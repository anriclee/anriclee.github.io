<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>ReadByWord</title>
    <link>https://anriclee.github.io/</link>
    <description>Recent content on ReadByWord</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Mon, 11 Sep 2023 21:12:31 +0800</lastBuildDate><atom:link href="https://anriclee.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>PaperModX New Features</title>
      <link>https://anriclee.github.io/docs/papermodx-new-features/</link>
      <pubDate>Tue, 12 Apr 2022 23:37:00 +0800</pubDate>
      
      <guid>https://anriclee.github.io/docs/papermodx-new-features/</guid>
      <description>This page explains the new features and changes of PaperModX comparing to the original PaperMod.</description>
      <content:encoded><![CDATA[<p>This page explains the new features and changes of PaperModX
comparing to the original PaperMod.</p>
<h2 id="table-of-contents-toc-floating-on-the-side">Table of Contents (ToC) floating on the side</h2>
<p>By adding config:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">params</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">TocSide</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;left&#39;</span><span class="w">  </span><span class="c"># or &#39;right&#39;</span><span class="w">
</span></span></span></code></pre></div><p>ToC will float on the left/right side of the page.
You can take a look at how <code>'right'</code> feels like in <a href="https://reorx.github.io/hugo-PaperModX/docs/installation/">Installation | Update</a>.</p>
<p>The ToC box is responsive, it only shows on the side when minimum screen size is 1440px.</p>
<p>This feature is enabled on this site.</p>
<h2 id="instantclick-integration">InstantClick integration</h2>
<p>By adding config:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">params</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">EnableInstantClick</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span></code></pre></div><p><a href="http://instantclick.io/">InstantClick</a> will be enabled,
making navigation behaves like Single Page Application.</p>
<p>Note that <code>/search</code> pages are omitted from InstantClick
to prevent conflicts from search&rsquo;s JavaScript,
this may be changed in the future after refactoring those scripts.</p>
<p>Another thing to notice is smooth scrolling will be disabled
if InstantClick is enabled, because they both listen click
event on every <code>&lt;a&gt;</code> tags. IMO smooth scrolling is not very useful
so it has to give way to InstantCllick.</p>
<p>This feature is enabled on this site.</p>
<h2 id="give-links-an-accent-color">Give links an accent color.</h2>
<p>Though PaperModX is designed to be minimal, accent color is still essential.
It&rsquo;s a good way to show personality and make your site feels more delightful.</p>
<p>The default color is a purple vibe,
you can customize the colors of link, link underline and their hover variants
by override the following css variables in <code>assets/css/extended/custom.css</code> of your site.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-css" data-lang="css"><span class="line"><span class="cl"><span class="p">:</span><span class="nd">root</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nv">--link-color</span><span class="p">:</span> <span class="nf">var</span><span class="p">(</span><span class="o">--</span><span class="n">primary</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="nv">--link-hover-color</span><span class="p">:</span> <span class="mh">#573eaa</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="nv">--link-underline-shadow</span><span class="p">:</span> <span class="mi">0</span> <span class="mi">1</span><span class="kt">px</span> <span class="mi">0</span> <span class="nf">var</span><span class="p">(</span><span class="o">--</span><span class="n">link</span><span class="o">-</span><span class="kc">color</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="nv">--link-hover-underline-color</span><span class="p">:</span> <span class="mh">#573eaa</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="nv">--link-hover-underline-shadow</span><span class="p">:</span> <span class="mi">0</span> <span class="mi">2</span><span class="kt">px</span> <span class="mi">0</span> <span class="nf">var</span><span class="p">(</span><span class="o">--</span><span class="n">link</span><span class="o">-</span><span class="n">hover</span><span class="o">-</span><span class="kc">underline</span><span class="o">-</span><span class="kc">color</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><h2 id="customize-pagniator-size">Customize pagniator size</h2>
<p>In section pages, if you want the paginator size be different from the
<a href="https://gohugo.io/templates/pagination/#configure-pagination">global config</a>,
you can add <code>paginate</code> in the frontmatter to customize.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nn">---</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">paginate</span><span class="p">:</span><span class="w"> </span><span class="m">10</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nn">---</span><span class="w">
</span></span></span></code></pre></div><h2 id="menus-external-link">Menus external link</h2>
<p>You can add <code>external: true</code> to a menu item&rsquo;s params to mark it as an external link,
this will add a small icon to the end, and make the link open in new tab when clicked.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">menu</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">main</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;@Author&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">url</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;https://reorx.com&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">params</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">external</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span></code></pre></div><h2 id="highlight-code-with-chroma-no-bullshit">Highlight code with Chroma, no bullshit</h2>
<p>PaperMod uses highlight.js to highlight code blocks.
In PaperModX, we use Chroma which is the recommended way in Hugo&rsquo;s
<a href="https://gohugo.io/content-management/syntax-highlighting/#:~:text=Hugo%20uses%20Chroma%20as%20its%20code%20highlighter%3B%20it%20is%20built%20in%20Go%20and%20is%20really%2C%20really%20fast">official docs</a>,
thus changing theme is easily supported.</p>
<p>By default the themes are <code>github</code> for light and <code>dracula</code> for dark,
you can change it by adding <code>chroma-light.css</code> and <code>chroma-dark.css</code>
in site&rsquo;s <code>assets/css/lib</code> directory.</p>
<h2 id="social-icons-from-simple-icons">Social icons from Simple Icons</h2>
<p>Add social icons with <code>-simple</code> suffix from <a href="https://simpleicons.org/">Simple Icons</a>.</p>
<p>Available icons:</p>
<ul>
<li>github-simple</li>
<li>rss-simple</li>
<li>telegram-simple</li>
<li>twitter-simple</li>
<li>pinboard-simple</li>
</ul>
<p>The icons are moved from <code>layouts/partials/svg.html</code> to <code>data/svg.toml</code>,
makes it easier to maintain, it&rsquo;s now possible to have an index page
to show all the icons, check it out at: <a href="https://reorx.github.io/hugo-PaperModX/docs/icons_preview/">Icons Preview</a></p>
<h2 id="opinionated-ui-enhancements">Opinionated UI enhancements</h2>
<ul>
<li>Distinguish home page width and post page width, post page is wider
(800px) for better readability, you can change it by <code>--post-width</code> in <code>theme-vars.css</code>.</li>
<li>Menu links are always bold, this feels more consistent when clicking around. Active links have deeper color.</li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>Icons Preview</title>
      <link>https://anriclee.github.io/docs/icons_preview/</link>
      <pubDate>Wed, 13 Apr 2022 00:00:00 +0000</pubDate>
      
      <guid>https://anriclee.github.io/docs/icons_preview/</guid>
      <description>Index of all icons in PaperModeX</description>
      <content:encoded><![CDATA[]]></content:encoded>
    </item>
    
    <item>
      <title>[译] 细谈依赖和配置</title>
      <link>https://anriclee.github.io/posts/spring_framework/core/the_ioc_container/dependencies/dependencies_configuration_in_detail/</link>
      <pubDate>Mon, 11 Sep 2023 21:12:31 +0800</pubDate>
      
      <guid>https://anriclee.github.io/posts/spring_framework/core/the_ioc_container/dependencies/dependencies_configuration_in_detail/</guid>
      <description>依赖项的详细配置
正如前面所提到的那样，你可以定义 bean 的属性和构造函数参数，去引用其他已经设置好的 bean 或者内联定义的值。 为了达到这个目的，Spring 的基于 XML 配置元数据支持在 和 元素内增加子元素。
直接值（基本类型，字符串等等） 元素的 value 值，把一个属性值或者构造函数参数定义为一个可读字符串。Spring 的转换服务被用来将这些值从字符串转换为属性或者参数的实际类型。下面的例子展示了可以被设置的多种值：
&amp;lt;bean id=&amp;#34;myDataSource&amp;#34; class=&amp;#34;org.apache.commons.dbcp.BasicDataSource&amp;#34; destroy-method=&amp;#34;close&amp;#34;&amp;gt; &amp;lt;!-- results in a setDriverClassName(String) call --&amp;gt; &amp;lt;property name=&amp;#34;driverClassName&amp;#34; value=&amp;#34;com.mysql.jdbc.Driver&amp;#34;/&amp;gt; &amp;lt;property name=&amp;#34;url&amp;#34; value=&amp;#34;jdbc:mysql://localhost:3306/mydb&amp;#34;/&amp;gt; &amp;lt;property name=&amp;#34;username&amp;#34; value=&amp;#34;root&amp;#34;/&amp;gt; &amp;lt;property name=&amp;#34;password&amp;#34; value=&amp;#34;misterkaoli&amp;#34;/&amp;gt; &amp;lt;/bean&amp;gt; 下面的例子使用 p-namespace 来让 XML 配置更加简明：
&amp;lt;beans xmlns=&amp;#34;http://www.springframework.org/schema/beans&amp;#34; xmlns:xsi=&amp;#34;http://www.w3.org/2001/XMLSchema-instance&amp;#34; xmlns:p=&amp;#34;http://www.springframework.org/schema/p&amp;#34; xsi:schemaLocation=&amp;#34;http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd&amp;#34;&amp;gt; &amp;lt;bean id=&amp;#34;myDataSource&amp;#34; class=&amp;#34;org.apache.commons.dbcp.BasicDataSource&amp;#34; destroy-method=&amp;#34;close&amp;#34; p:driverClassName=&amp;#34;com.mysql.jdbc.Driver&amp;#34; p:url=&amp;#34;jdbc:mysql://localhost:3306/mydb&amp;#34; p:username=&amp;#34;root&amp;#34; p:password=&amp;#34;misterkaoli&amp;#34;/&amp;gt; &amp;lt;/beans&amp;gt; 上面的 XML 更加的简明。然而，类型是在运行时而不是设计时发现的，除非你在创建 bean 定义的时候，用支持自动属性完成的 IDE（例如 Intellij IDEA 或者 Eclipse 的 Spring 工具）。这些辅助都是高度推荐的。 你同样可以配置 java.</description>
      <content:encoded><![CDATA[<p>依赖项的详细配置</p>
<p>正如前面所提到的那样，你可以定义 bean 的属性和构造函数参数，去引用其他已经设置好的 bean 或者内联定义的值。
为了达到这个目的，Spring 的基于 XML 配置元数据支持在 <property/> 和 <constructor-arg/> 元素内增加子元素。</p>
<h1 id="直接值基本类型字符串等等">直接值（基本类型，字符串等等）</h1>
<p><property/> 元素的 value 值，把一个属性值或者构造函数参数定义为一个可读字符串。Spring 的转换服务被用来将这些值从字符串转换为属性或者参数的实际类型。下面的例子展示了可以被设置的多种值：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-XML" data-lang="XML"><span class="line"><span class="cl"><span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&#34;myDataSource&#34;</span> <span class="na">class=</span><span class="s">&#34;org.apache.commons.dbcp.BasicDataSource&#34;</span> <span class="na">destroy-method=</span><span class="s">&#34;close&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">	<span class="c">&lt;!-- results in a setDriverClassName(String) call --&gt;</span>
</span></span><span class="line"><span class="cl">	<span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&#34;driverClassName&#34;</span> <span class="na">value=</span><span class="s">&#34;com.mysql.jdbc.Driver&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">	<span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&#34;url&#34;</span> <span class="na">value=</span><span class="s">&#34;jdbc:mysql://localhost:3306/mydb&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">	<span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&#34;username&#34;</span> <span class="na">value=</span><span class="s">&#34;root&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">	<span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&#34;password&#34;</span> <span class="na">value=</span><span class="s">&#34;misterkaoli&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/bean&gt;</span>
</span></span></code></pre></div><p>下面的例子使用 p-namespace 来让 XML 配置更加简明：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-XML" data-lang="XML"><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nt">&lt;beans</span> <span class="na">xmlns=</span><span class="s">&#34;http://www.springframework.org/schema/beans&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="na">xmlns:xsi=</span><span class="s">&#34;http://www.w3.org/2001/XMLSchema-instance&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="na">xmlns:p=</span><span class="s">&#34;http://www.springframework.org/schema/p&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="na">xsi:schemaLocation=</span><span class="s">&#34;http://www.springframework.org/schema/beans
</span></span></span><span class="line"><span class="cl"><span class="s">	https://www.springframework.org/schema/beans/spring-beans.xsd&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&#34;myDataSource&#34;</span> <span class="na">class=</span><span class="s">&#34;org.apache.commons.dbcp.BasicDataSource&#34;</span>
</span></span><span class="line"><span class="cl">		<span class="na">destroy-method=</span><span class="s">&#34;close&#34;</span>
</span></span><span class="line"><span class="cl">		<span class="na">p:driverClassName=</span><span class="s">&#34;com.mysql.jdbc.Driver&#34;</span>
</span></span><span class="line"><span class="cl">		<span class="na">p:url=</span><span class="s">&#34;jdbc:mysql://localhost:3306/mydb&#34;</span>
</span></span><span class="line"><span class="cl">		<span class="na">p:username=</span><span class="s">&#34;root&#34;</span>
</span></span><span class="line"><span class="cl">		<span class="na">p:password=</span><span class="s">&#34;misterkaoli&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/beans&gt;</span>
</span></span></code></pre></div><p>上面的 XML 更加的简明。然而，类型是在运行时而不是设计时发现的，除非你在创建 bean 定义的时候，用支持自动属性完成的 IDE（例如 Intellij IDEA 或者 Eclipse 的 Spring 工具）。这些辅助都是高度推荐的。
你同样可以配置 <code>java.util.Properties</code> 的实例，如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-XML" data-lang="XML"><span class="line"><span class="cl"><span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&#34;mappings&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="na">class=</span><span class="s">&#34;org.springframework.context.support.PropertySourcesPlaceholderConfigurer&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c">&lt;!-- typed as a java.util.Properties --&gt;</span>
</span></span><span class="line"><span class="cl">	<span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&#34;properties&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">		<span class="nt">&lt;value&gt;</span>
</span></span><span class="line"><span class="cl">			jdbc.driver.className=com.mysql.jdbc.Driver
</span></span><span class="line"><span class="cl">			jdbc.url=jdbc:mysql://localhost:3306/mydb
</span></span><span class="line"><span class="cl">		<span class="nt">&lt;/value&gt;</span>
</span></span><span class="line"><span class="cl">	<span class="nt">&lt;/property&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/bean&gt;</span>
</span></span></code></pre></div><p>Spring 容器可以通过使用 JavaBeans 的 PropertyEditor 机制，转换 <value/> 元素里面的文本值为一个 java.util.Properties 实例。这是一个不错的捷径，也是为数不多的 Spring 团队偏爱嵌套的 <value/> 元素而非 value 属性的风格的地方。</p>
<h1 id="idref-元素">idref 元素</h1>
<p>idref 元素就是一个简单的传递容器中另外一个 bean 的 id 到 <constructor-arg/> 或者 <property/> 元素中的防止错误的办法。下面的例子展示了如何去使用它：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-XML" data-lang="XML"><span class="line"><span class="cl"><span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&#34;theTargetBean&#34;</span> <span class="na">class=</span><span class="s">&#34;...&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&#34;theClientBean&#34;</span> <span class="na">class=</span><span class="s">&#34;...&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">	<span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&#34;targetName&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">		<span class="nt">&lt;idref</span> <span class="na">bean=</span><span class="s">&#34;theTargetBean&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">	<span class="nt">&lt;/property&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/bean&gt;</span>
</span></span></code></pre></div><p>上面的 bean 定义片段等价于下面的片段：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-XML" data-lang="XML"><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&#34;theTargetBean&#34;</span> <span class="na">class=</span><span class="s">&#34;...&#34;</span> <span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&#34;client&#34;</span> <span class="na">class=</span><span class="s">&#34;...&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">	<span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&#34;targetName&#34;</span> <span class="na">value=</span><span class="s">&#34;theTargetBean&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/bean&gt;</span>
</span></span></code></pre></div><p>第一种形式优于第二种，因为使用 idref 标签，可以让容器在部署时验证所引用的有名称的 bean 是否真正存在。在第二种变体中，不会验证传给 client bean 中 targetName 属性的值。当 client bean 被真正创建时，才会真正发现这个类型（很有可能是致命错误）。如果 client bean 是一个属性 bean，在容器被部署很长时间后，类型和结果异常才有可能被发现。</p>
<p>Note：idref 元素中的 local 属性在 XSD 4.0 bean 中的属性不再支持，因为它不再对一个普通 bean 引用提供值了。当升级到 4.0 Schema 的时候，需要修改你的当前存在的 idref local 引用为 idref bean。</p>
<p>一个</p>
<p><idref/> 元素中，</p>
<p>（早从 Spring 2.0 开始）<idref/> 元素配置值的一个常见位置就是 ProxyFactoryBean bean 定义中的 AOP 拦截器配置值。当你指定拦截器名称时，使用 <idref/> 元素可防止你误拼写一个拦截器的 ID。</p>
<h1 id="引用其他-bean协作器">引用其他 bean（协作器）</h1>
<p>ref 元素是 <constructor-arg/> 或者 <property/> 定义元素里面的最后一个元素。在这里，你可以将一个 bean 的具体属性设置为对另外一个被容器管理的 bean 的引用。被引用的 bean 是将被设置属性值 bean 的依赖，而且在属性被设置前，根据需要被初始化。（如果协作者是一个单例的 bean，它也许已经被容器初始化了）。所有的引用最终都是另外一个对象的引用。Scope 和验证取决于你通过 bean 或者 parent 属性指定的另外一个对象的 ID 或者名字。</p>
<p>通过 <ref/> 标签的 bean 属性指定目标 bean，是最常见的一种形式，并且允许引用相同容器或者父容器内的任何 bean，不论是否在同一个 XML 文件中。bean 属性的值也许和目标 bean 的id属性相同，或者和目标 bean 的 name 属性的其中一个值相同。下面的例子展示了怎么使用 ref 元素：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-XML" data-lang="XML"><span class="line"><span class="cl"><span class="nt">&lt;ref</span> <span class="na">bean=</span><span class="s">&#34;someBean&#34;</span><span class="nt">/&gt;</span>
</span></span></code></pre></div><p>通过 parent 属性指定目标 bean 创建了对当前容器父容器内的一个 bean 的引用。parent 属性的值可以和目标 bean 的 id 属性和 name 属性的其中一个值相同。目标 bean 必须在当前容器的一个父容器中。当你有一个容器的继承结构，并且你想要用和父 bean 一样的名字作为代理包装父容器中的一个现有 bean 的时候，你应该使用这种引用变体。下面的例子展示了如何使用 parent 属性：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-XML" data-lang="XML"><span class="line"><span class="cl"><span class="c">&lt;!-- in the parent context --&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&#34;accountService&#34;</span> <span class="na">class=</span><span class="s">&#34;com.something.SimpleAccountService&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">	<span class="c">&lt;!-- insert dependencies as required here --&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/bean&gt;</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-XML" data-lang="XML"><span class="line"><span class="cl"><span class="c">&lt;!-- in the child (descendant) context --&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&#34;accountService&#34;</span> <span class="err">&lt;!--</span> <span class="err">bean</span> <span class="err">name</span> <span class="err">is</span> <span class="err">the</span> <span class="err">same</span> <span class="err">as</span> <span class="err">the</span> <span class="err">parent</span> <span class="err">bean</span> <span class="err">--</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">	class=&#34;org.springframework.aop.framework.ProxyFactoryBean&#34;&gt;
</span></span><span class="line"><span class="cl">	<span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&#34;target&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">		<span class="nt">&lt;ref</span> <span class="na">parent=</span><span class="s">&#34;accountService&#34;</span><span class="nt">/&gt;</span> <span class="c">&lt;!-- notice how we refer to the parent bean --&gt;</span>
</span></span><span class="line"><span class="cl">	<span class="nt">&lt;/property&gt;</span>
</span></span><span class="line"><span class="cl">	<span class="c">&lt;!-- insert other configuration and dependencies as required here --&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/bean&gt;</span>
</span></span></code></pre></div><p>Note：ref 元素中的 local 属性在 XSD 4.0 中的 bean 已经不再支持，因为它不会对一个普通的 bean 引用提供任何值了。升级到 4.0 Schema 时，需要将现有的 ref local 引用改为 ref bean。</p>
<h1 id="内部-bean">内部 bean</h1>
<p><property/> 或者 <constructor-arg/> 元素内部的 <bean/> 元素定义了一个内部 bean，如下面的例子所示：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-XML" data-lang="XML"><span class="line"><span class="cl"><span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&#34;outer&#34;</span> <span class="na">class=</span><span class="s">&#34;...&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">	<span class="c">&lt;!-- instead of using a reference to a target bean, simply define the target bean inline --&gt;</span>
</span></span><span class="line"><span class="cl">	<span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&#34;target&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">		<span class="nt">&lt;bean</span> <span class="na">class=</span><span class="s">&#34;com.example.Person&#34;</span><span class="nt">&gt;</span> <span class="c">&lt;!-- this is the inner bean --&gt;</span>
</span></span><span class="line"><span class="cl">			<span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&#34;name&#34;</span> <span class="na">value=</span><span class="s">&#34;Fiona Apple&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">			<span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&#34;age&#34;</span> <span class="na">value=</span><span class="s">&#34;25&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">		<span class="nt">&lt;/bean&gt;</span>
</span></span><span class="line"><span class="cl">	<span class="nt">&lt;/property&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/bean&gt;</span>
</span></span></code></pre></div><p>一个内部bean定义不需要定义 ID 和名称。如果指定了，容器也不会用这个值作为标识。容器也会在创建 bean 时忽略 scope 标志，因为内部biean通常是匿名的而且总是与外面的 bean 一起创建。不可能单独只访问内部bean 或者将他们注入到外层嵌套 bean 以外的 bean 中。</p>
<p>在极端情况下，它会从一个自定义的 scope 接收到销毁的回调 —— 例如，对于一个包含在单例 bean 中的 request scope 的内部 bean。内部 bean 实例的创建于它所在的 bean 绑定在一起，但是销毁回调让它参与到 request 范围的生命周期。这不是一个常见的场景。内部 bean 通常仅仅与它所在的 bean 共享一个 scope。</p>
<h1 id="集合">集合</h1>
<p><list/>, <set/>, <map/> 和 <props/> 元素分别设置 Java 的集合类型：List，Set，Map 和 Properties。下面的例子显示了该用法：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-XML" data-lang="XML"><span class="line"><span class="cl"><span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&#34;moreComplexObject&#34;</span> <span class="na">class=</span><span class="s">&#34;example.ComplexObject&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">	<span class="c">&lt;!-- results in a setAdminEmails(java.util.Properties) call --&gt;</span>
</span></span><span class="line"><span class="cl">	<span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&#34;adminEmails&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">		<span class="nt">&lt;props&gt;</span>
</span></span><span class="line"><span class="cl">			<span class="nt">&lt;prop</span> <span class="na">key=</span><span class="s">&#34;administrator&#34;</span><span class="nt">&gt;</span>administrator@example.org<span class="nt">&lt;/prop&gt;</span>
</span></span><span class="line"><span class="cl">			<span class="nt">&lt;prop</span> <span class="na">key=</span><span class="s">&#34;support&#34;</span><span class="nt">&gt;</span>support@example.org<span class="nt">&lt;/prop&gt;</span>
</span></span><span class="line"><span class="cl">			<span class="nt">&lt;prop</span> <span class="na">key=</span><span class="s">&#34;development&#34;</span><span class="nt">&gt;</span>development@example.org<span class="nt">&lt;/prop&gt;</span>
</span></span><span class="line"><span class="cl">		<span class="nt">&lt;/props&gt;</span>
</span></span><span class="line"><span class="cl">	<span class="nt">&lt;/property&gt;</span>
</span></span><span class="line"><span class="cl">	<span class="c">&lt;!-- results in a setSomeList(java.util.List) call --&gt;</span>
</span></span><span class="line"><span class="cl">	<span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&#34;someList&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">		<span class="nt">&lt;list&gt;</span>
</span></span><span class="line"><span class="cl">			<span class="nt">&lt;value&gt;</span>a list element followed by a reference<span class="nt">&lt;/value&gt;</span>
</span></span><span class="line"><span class="cl">			<span class="nt">&lt;ref</span> <span class="na">bean=</span><span class="s">&#34;myDataSource&#34;</span> <span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">		<span class="nt">&lt;/list&gt;</span>
</span></span><span class="line"><span class="cl">	<span class="nt">&lt;/property&gt;</span>
</span></span><span class="line"><span class="cl">	<span class="c">&lt;!-- results in a setSomeMap(java.util.Map) call --&gt;</span>
</span></span><span class="line"><span class="cl">	<span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&#34;someMap&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">		<span class="nt">&lt;map&gt;</span>
</span></span><span class="line"><span class="cl">			<span class="nt">&lt;entry</span> <span class="na">key=</span><span class="s">&#34;an entry&#34;</span> <span class="na">value=</span><span class="s">&#34;just some string&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">			<span class="nt">&lt;entry</span> <span class="na">key=</span><span class="s">&#34;a ref&#34;</span> <span class="na">value-ref=</span><span class="s">&#34;myDataSource&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">		<span class="nt">&lt;/map&gt;</span>
</span></span><span class="line"><span class="cl">	<span class="nt">&lt;/property&gt;</span>
</span></span><span class="line"><span class="cl">	<span class="c">&lt;!-- results in a setSomeSet(java.util.Set) call --&gt;</span>
</span></span><span class="line"><span class="cl">	<span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&#34;someSet&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">		<span class="nt">&lt;set&gt;</span>
</span></span><span class="line"><span class="cl">			<span class="nt">&lt;value&gt;</span>just some string<span class="nt">&lt;/value&gt;</span>
</span></span><span class="line"><span class="cl">			<span class="nt">&lt;ref</span> <span class="na">bean=</span><span class="s">&#34;myDataSource&#34;</span> <span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">		<span class="nt">&lt;/set&gt;</span>
</span></span><span class="line"><span class="cl">	<span class="nt">&lt;/property&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/bean&gt;</span>
</span></span></code></pre></div><p>map 的 key 或者 value，或者一个设置好的 value，也可以使下面元素的任意一种：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-XML" data-lang="XML"><span class="line"><span class="cl">bean | ref | idref | list | set | map | props | value | null
</span></span></code></pre></div><h2 id="集合的并集">集合的并集</h2>
<p>Spring 容器同样支持集合的合并。一个应用的开发者可以定义一个父 <list/>, <map/>, <set/>   或者 <props/> 元素或者有一个子的 <list/>, <map/>, <set/>   或者 <props/> 元素，来继承或者覆盖父集合中的元素。即，子集合中的值是父集合和子集合中元素的并集，同时子集合中的元素会覆盖父集合中的元素。</p>
<p>这个合并讨论了父子 bean 的机制。不熟悉父子 bean 定义的读者，也许要在继续往下前读一下相关章节。</p>
<p>下面的例子展示了集合合并的用法：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-XML" data-lang="XML"><span class="line"><span class="cl"><span class="nt">&lt;beans&gt;</span>
</span></span><span class="line"><span class="cl">	<span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&#34;parent&#34;</span> <span class="na">abstract=</span><span class="s">&#34;true&#34;</span> <span class="na">class=</span><span class="s">&#34;example.ComplexObject&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">		<span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&#34;adminEmails&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">			<span class="nt">&lt;props&gt;</span>
</span></span><span class="line"><span class="cl">				<span class="nt">&lt;prop</span> <span class="na">key=</span><span class="s">&#34;administrator&#34;</span><span class="nt">&gt;</span>administrator@example.com<span class="nt">&lt;/prop&gt;</span>
</span></span><span class="line"><span class="cl">				<span class="nt">&lt;prop</span> <span class="na">key=</span><span class="s">&#34;support&#34;</span><span class="nt">&gt;</span>support@example.com<span class="nt">&lt;/prop&gt;</span>
</span></span><span class="line"><span class="cl">			<span class="nt">&lt;/props&gt;</span>
</span></span><span class="line"><span class="cl">		<span class="nt">&lt;/property&gt;</span>
</span></span><span class="line"><span class="cl">	<span class="nt">&lt;/bean&gt;</span>
</span></span><span class="line"><span class="cl">	<span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&#34;child&#34;</span> <span class="na">parent=</span><span class="s">&#34;parent&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">		<span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&#34;adminEmails&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">			<span class="c">&lt;!-- the merge is specified on the child collection definition --&gt;</span>
</span></span><span class="line"><span class="cl">			<span class="nt">&lt;props</span> <span class="na">merge=</span><span class="s">&#34;true&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">				<span class="nt">&lt;prop</span> <span class="na">key=</span><span class="s">&#34;sales&#34;</span><span class="nt">&gt;</span>sales@example.com<span class="nt">&lt;/prop&gt;</span>
</span></span><span class="line"><span class="cl">				<span class="nt">&lt;prop</span> <span class="na">key=</span><span class="s">&#34;support&#34;</span><span class="nt">&gt;</span>support@example.co.uk<span class="nt">&lt;/prop&gt;</span>
</span></span><span class="line"><span class="cl">			<span class="nt">&lt;/props&gt;</span>
</span></span><span class="line"><span class="cl">		<span class="nt">&lt;/property&gt;</span>
</span></span><span class="line"><span class="cl">	<span class="nt">&lt;/bean&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;beans&gt;</span>
</span></span></code></pre></div><p>注意子 bean 定义中 adminEmails 属性里<props/>  merge=true 属性的用法。当子bean被容器解析和初始化时，最终的实例会有一个包含合并子集合中 adminEmails 和父集合中的 adminEmails 的 adminEmails 和 Properties 集合。下面的列表会展示最终的结果</p>
<pre tabindex="0"><code>administrator=administrator@example.com
sales=sales@example.com
support=support@example.co.uk
</code></pre><p>子 Properties 集合中设置的值继承了所有父 <props/> 中的属性值，而且子集合中的 support 值覆盖了父集合中的值。</p>
<p>这个合并的行为同样适用于 <list/>, <map/>, <set/> 类型。在 <list/> 元素的特殊使用中，与 List 集合类型联系的语义（即集合中值的有序性）会一直保持。父集合中的值优先于子集合。在 Map, Set 和 Properties 集合类型中是无序的。因此，容器内部使用的 Map, Set 和 Properties 实现类型中没有有序性的语义生效。</p>
<h2 id="集合合并的限制">集合合并的限制</h2>
<h1 id="空串或者-null">空串或者 Null</h1>
<h1 id="p-namespace-的-xml-简写">p-namespace 的 XML 简写</h1>
<h1 id="c-namespace-的-xml-简写">c-namespace 的 XML 简写</h1>
<h1 id="复合属性名称">复合属性名称</h1>
<p>TO BE CONTINUED &hellip;.</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>[译] 依赖注入</title>
      <link>https://anriclee.github.io/posts/spring_framework/core/the_ioc_container/dependencies/dependency_injection/</link>
      <pubDate>Mon, 11 Sep 2023 20:12:31 +0800</pubDate>
      
      <guid>https://anriclee.github.io/posts/spring_framework/core/the_ioc_container/dependencies/dependency_injection/</guid>
      <description>在依赖注入（DI）里，对象通过构造函数参数、工厂方法参数或者在 被工厂方法创建返回的对象中设置的属性定义他们的依赖。然后，容器在创建这些 bean 时，注入依赖。这个过程与 bean 自身使用所需要类的直接构造函数实例化，或者通过 Service Locator 模式来找到所需要的依赖这个过程正好相反。
使用 DI 原则的代码更加干净整洁，并且提供给对象的依赖时，解耦也更加高效。对象并不找他们的依赖也并不知道这些依赖的地址或者类。这样的结果就是，你的类变得更易测试，尤其是当依赖是接口或者抽象的父类时，在单元测试可以对这些依赖进行打桩或者mock他们的实现。
基于构造函数的依赖注入 基于构造函数的依赖注入，是通过容器调用构造函数，并且传入若干参数来实现的，每一个参数都代表了一个依赖。调用静态工厂方法并传入特定的参数来构造一个 bean 也是一样的，在本讨论中，对待构造函数的参数和静态方法的参数也是相似的。下面的这里展示了一个之能通过构造函数来进行依赖注入的类：
public class SimpleMovieLister { // the SimpleMovieLister has a dependency on a MovieFinder private final MovieFinder movieFinder; // a constructor so that the Spring container can inject a MovieFinder public SimpleMovieLister(MovieFinder movieFinder) { this.movieFinder = movieFinder; } // business logic that actually uses the injected MovieFinder is omitted... } 注意，对于这个类没有更多特殊的地方。它仅仅是一个POJO，并且对容器特定接口、父类或者注解没有任何依赖。【译者按：没有任何代码侵入性】
构造函数参数解析 构造函数参数解析匹配通过参数类型来进行。如果在构造函数参数的 bean 定义中没有歧义，那么在 bean 定义中构造函数参数的顺序，就是当 bean 被实例化时，传给给构造函数参数的顺序。考虑下面的类：</description>
      <content:encoded><![CDATA[<p>在依赖注入（DI）里，对象通过构造函数参数、工厂方法参数或者在
被工厂方法创建返回的对象中设置的属性定义他们的依赖。然后，容器在创建这些 bean 时，注入依赖。这个过程与 bean 自身使用所需要类的直接构造函数实例化，或者通过 Service Locator 模式来找到所需要的依赖这个过程正好相反。</p>
<p>使用 DI 原则的代码更加干净整洁，并且提供给对象的依赖时，解耦也更加高效。对象并不找他们的依赖也并不知道这些依赖的地址或者类。这样的结果就是，你的类变得更易测试，尤其是当依赖是接口或者抽象的父类时，在单元测试可以对这些依赖进行打桩或者mock他们的实现。</p>
<h1 id="基于构造函数的依赖注入">基于构造函数的依赖注入</h1>
<p>基于构造函数的依赖注入，是通过容器调用构造函数，并且传入若干参数来实现的，每一个参数都代表了一个依赖。调用静态工厂方法并传入特定的参数来构造一个 bean 也是一样的，在本讨论中，对待构造函数的参数和静态方法的参数也是相似的。下面的这里展示了一个之能通过构造函数来进行依赖注入的类：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-Java" data-lang="Java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SimpleMovieLister</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// the SimpleMovieLister has a dependency on a MovieFinder
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="kd">private</span> <span class="kd">final</span> <span class="n">MovieFinder</span> <span class="n">movieFinder</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// a constructor so that the Spring container can inject a MovieFinder
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="kd">public</span> <span class="nf">SimpleMovieLister</span><span class="o">(</span><span class="n">MovieFinder</span> <span class="n">movieFinder</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">this</span><span class="o">.</span><span class="na">movieFinder</span> <span class="o">=</span> <span class="n">movieFinder</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">	<span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// business logic that actually uses the injected MovieFinder is omitted...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></div><p>注意，对于这个类没有更多特殊的地方。它仅仅是一个POJO，并且对容器特定接口、父类或者注解没有任何依赖。【译者按：没有任何代码侵入性】</p>
<h2 id="构造函数参数解析">构造函数参数解析</h2>
<p>构造函数参数解析匹配通过参数类型来进行。如果在构造函数参数的 bean 定义中没有歧义，那么在 bean 定义中构造函数参数的顺序，就是当 bean 被实例化时，传给给构造函数参数的顺序。考虑下面的类：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-Java" data-lang="Java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">x.y</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ThingOne</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="nf">ThingOne</span><span class="o">(</span><span class="n">ThingTwo</span> <span class="n">thingTwo</span><span class="o">,</span> <span class="n">ThingThree</span> <span class="n">thingThree</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">		<span class="c1">// ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>假设 <code>ThingTwo</code> 和 <code>ThingThree</code> 不是继承关系，并且没有歧义。你不需要指定在 <constructor-arg/> 元素中的顺序或者类型，下面的配置一样会正常起作用。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-XML" data-lang="XML"><span class="line"><span class="cl"><span class="nt">&lt;beans&gt;</span>
</span></span><span class="line"><span class="cl">	<span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&#34;beanOne&#34;</span> <span class="na">class=</span><span class="s">&#34;x.y.ThingOne&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">		<span class="nt">&lt;constructor-arg</span> <span class="na">ref=</span><span class="s">&#34;beanTwo&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">		<span class="nt">&lt;constructor-arg</span> <span class="na">ref=</span><span class="s">&#34;beanThree&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">	<span class="nt">&lt;/bean&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&#34;beanTwo&#34;</span> <span class="na">class=</span><span class="s">&#34;x.y.ThingTwo&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&#34;beanThree&#34;</span> <span class="na">class=</span><span class="s">&#34;x.y.ThingThree&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/beans&gt;</span>
</span></span></code></pre></div><p>当引用另外一个 bean 的时候，类型已知，即可以适配到。当使用一个简单的类型时，例如 <code>&lt;value&gt;true&lt;/value&gt;</code> ，Spring 不能决定一个 value 的类型，因此不能在没有任何帮助时，适配到具体的类型。考虑下面的类：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-Java" data-lang="Java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">examples</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ExampleBean</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// Number of years to calculate the Ultimate Answer
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="kd">private</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">years</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// The Answer to Life, the Universe, and Everything
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="kd">private</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">ultimateAnswer</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="nf">ExampleBean</span><span class="o">(</span><span class="kt">int</span> <span class="n">years</span><span class="o">,</span> <span class="n">String</span> <span class="n">ultimateAnswer</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">this</span><span class="o">.</span><span class="na">years</span> <span class="o">=</span> <span class="n">years</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">		<span class="k">this</span><span class="o">.</span><span class="na">ultimateAnswer</span> <span class="o">=</span> <span class="n">ultimateAnswer</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">	<span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>在上面的场景中，如果你通过 <code>type</code> 属性显式地指定一个构造函数参数类型，容器就可以使用简单的类型匹配，如下面的例子所示：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-XML" data-lang="XML"><span class="line"><span class="cl"><span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&#34;exampleBean&#34;</span> <span class="na">class=</span><span class="s">&#34;examples.ExampleBean&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">	<span class="nt">&lt;constructor-arg</span> <span class="na">type=</span><span class="s">&#34;int&#34;</span> <span class="na">value=</span><span class="s">&#34;7500000&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">	<span class="nt">&lt;constructor-arg</span> <span class="na">type=</span><span class="s">&#34;java.lang.String&#34;</span> <span class="na">value=</span><span class="s">&#34;42&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/bean&gt;</span>
</span></span></code></pre></div><p>你可以使用 index 属性指定构造函数参数的顺序，如下面的例子所示：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-XML" data-lang="XML"><span class="line"><span class="cl"><span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&#34;exampleBean&#34;</span> <span class="na">class=</span><span class="s">&#34;examples.ExampleBean&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">	<span class="nt">&lt;constructor-arg</span> <span class="na">index=</span><span class="s">&#34;0&#34;</span> <span class="na">value=</span><span class="s">&#34;7500000&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">	<span class="nt">&lt;constructor-arg</span> <span class="na">index=</span><span class="s">&#34;1&#34;</span> <span class="na">value=</span><span class="s">&#34;42&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/bean&gt;</span>
</span></span></code></pre></div><p>Note: index 从 0 开始。</p>
<p>你也可以使用构造函数参数名来消除歧义，如下面的例子所示：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-XML" data-lang="XML"><span class="line"><span class="cl"><span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&#34;exampleBean&#34;</span> <span class="na">class=</span><span class="s">&#34;examples.ExampleBean&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">	<span class="nt">&lt;constructor-arg</span> <span class="na">name=</span><span class="s">&#34;years&#34;</span> <span class="na">value=</span><span class="s">&#34;7500000&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">	<span class="nt">&lt;constructor-arg</span> <span class="na">name=</span><span class="s">&#34;ultimateAnswer&#34;</span> <span class="na">value=</span><span class="s">&#34;42&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/bean&gt;</span>
</span></span></code></pre></div><p>需要记住的是，为了开箱即用的效果，你的代码必须在编译时将 debug 标识打开，以便 Spring 可以通过名字从构造器查看参数名。如果你不能或者不想再编译时把 debug 标志打开，你可以使用 @ConstructorProperties JDK 注解对构造函数参数显式地指定名字。下面的例子展示了示例类的样子：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-Java" data-lang="Java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">examples</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ExampleBean</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// Fields omitted
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">	<span class="nd">@ConstructorProperties</span><span class="o">({</span><span class="s">&#34;years&#34;</span><span class="o">,</span> <span class="s">&#34;ultimateAnswer&#34;</span><span class="o">})</span>
</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="nf">ExampleBean</span><span class="o">(</span><span class="kt">int</span> <span class="n">years</span><span class="o">,</span> <span class="n">String</span> <span class="n">ultimateAnswer</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">this</span><span class="o">.</span><span class="na">years</span> <span class="o">=</span> <span class="n">years</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">		<span class="k">this</span><span class="o">.</span><span class="na">ultimateAnswer</span> <span class="o">=</span> <span class="n">ultimateAnswer</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">	<span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><h1 id="基于-setter-函数的依赖注入">基于 Setter 函数的依赖注入</h1>
<p>基于 Setter 的依赖注入，是通过容器在调用无参构造函数或者无参静态工厂方法来实例化 bean 之后，调用 bean 中的 setter 方法来完成的。</p>
<p>下面的例子展示了一个类可以仅通过单纯的 setter 注入完成依赖注入。这个类是传统的 Java。这是一个对具体的接口，基类或者注解没有依赖的 POJO。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-Java" data-lang="Java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SimpleMovieLister</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// the SimpleMovieLister has a dependency on the MovieFinder
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="kd">private</span> <span class="n">MovieFinder</span> <span class="n">movieFinder</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// a setter method so that the Spring container can inject a MovieFinder
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">setMovieFinder</span><span class="o">(</span><span class="n">MovieFinder</span> <span class="n">movieFinder</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">this</span><span class="o">.</span><span class="na">movieFinder</span> <span class="o">=</span> <span class="n">movieFinder</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">	<span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// business logic that actually uses the injected MovieFinder is omitted...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></div><p><code>ApplicationContext</code> 支持对其管理的 bean，进行基于构造函数和setter函数的依赖注入。它同样也支持通过构造函数已经注入后，基于 setter 的依赖注入。你用 BeanDefinition 的形式配置了依赖，结合 <code>PropertyEditor</code> 实例，将属性值从一种形式转换为另外一种形式，然而，大部分 Spring 的用户不是直接使用这些类（即，代码的方式），而是使用 XML bean 定义，注解组件（即，有 <code>@Component</code> 和 <code>@Controller</code> 等等装配的类）或者在基于 Java @Configuration 类的 @Bean 方法。这些源在内部被转换成 BeanDefinition 实例，并且被用来加载整个 Spring IoC 容器实例。</p>
<blockquote>
<p>基于构造函数或者基于 setter 的依赖注入？</p>
<p>因为你可以混合基于构造函数和基于Setter的依赖注入，对必要的依赖使用构造函数，对可选依赖使用 Setter 方法或者配置方法是一个很好的经验法则。注意，在 setter 方法上使用 @Autowired 注解可以用来使这个属性成为一个必要的依赖；然而，通过构造函数注入，并且在代码中验证参数的有效性是值得考虑的。</p>
<p>Spring 团队通常提倡构造函数的依赖注入，因为这会让你将应用程序的组件实现为不可变对象，并且能够确保必要的依赖是非空的。而且，通过构造函数注入返回的组件是一个完全初始化的状态。一个数量较多参数的构造函数，是一种坏味道，暗示着这个类很可能有诸多的职责，应该需要重构，以更好地解决适当的关注点分离的问题。</p>
<p>基于 Setter 的注入，应该仅被用于可以被赋予默认值的可选依赖。否则，非空检测，必须在使用依赖的任何地方进行。setter 注入的好处之一是 setter 方法使该类的对象可以在以后重新配置或重新注入。因此，通过 JMX MBean 进行管理是 setter 注入的一个引人注目的用例。</p>
<p>使用 DI 风格对一些类具有最重要的意义。有时候，当处理你没有源码的第三方类的时候，这是你的选择。例如，如果一个三方类没有暴露任何 setter 方法，构造函数的注入或许会是依赖注入的唯一形式。</p>
</blockquote>
<h1 id="依赖的解决过程">依赖的解决过程</h1>
<p>容器对 bean 的依赖解决过程如下：</p>
<ul>
<li>创建 ApplicationContext 时用描述所有 bean 的配置元数据一起初始化。配置元数据可以通过 XML，Java代码或者注解表达</li>
<li>对于每一个 bean，它的依赖是以属性、构造函数参数、或者静态工厂方法（如果你用之代替普通的构造器）的参数的形式来表示的。这些依赖在 bean 被实际上创建后，提供给 bean</li>
<li>每个属性或者构造器参数，是一个要设置值得实际上定义，或者容器内对另外一个 bean 的引用</li>
<li>作为值的每一个属性或者构造器参数，都被从其指定的格式转换为属性或者构造函数参数实际上的类型。默认，Spring 可以转换一个字符串类型的值为所有的自建类型，例如 int、lang、String、boolean 等等。</li>
</ul>
<p>Spring 容器在其被创建时，会对所有的bean的配置进行有效性验证。然而，这些 bean 的属性直到 bean 被实际上创建的时候，才会被设置进去。单例类型且设置为预初始化（默认）的 bean，将会在容器创建时被创建。Scopes 时 Bean Scopes 中定义的。其他的 bean，在 bean 被实际请求时创建。创建一个 bean 会潜在的引起依赖图中的 bean 被创建，bean的依赖和依赖的依赖的创建和分配过程亦然。注意，这些依赖之间的解析不匹配可能会较晚出现 - 即，在第一个受影响的 bean 被创建时出现。</p>
<blockquote>
<p>循环依赖</p>
<p>如果你主要使用构造器的注入模式，很可能会出现一个无法解决的循环依赖场景。</p>
<p>例如：类 A 通过构造注入依赖一个类 B 的实例，类 B 通过构造注入依赖一个一个类 A 的实例。如果你配置类 A 和类 B 互相注入，Spring Ioc 容器在运行时检测到循环依赖，即会抛出 BeanCurrentlyInCreationException。</p>
<p>一个可能的解决办法就是，编辑一些类中的源码，让他们通过 setter 注入而非构造器。也可以选择避免构造器注入，只使用 setter 注入。换句话说，虽然不是很推荐，但是你依赖可以通过 setter 注入配置循环依赖。</p>
<p>与典型的例子（没有循环依赖）不同，一个bean A 和 bean B 的循环依赖，迫使其中的一个 bean 在自己完全初始化之前注入另外一个优先级更高的 bean（一个典型的鸡生蛋蛋生鸡问题）。</p>
</blockquote>
<p>你通常可以相信 Spring 会做正确的事情。它可以在容器加载的时候检测到配置问题，比如引用不存在的 bean 和循环依赖。Spring 会在 bean 被实际上创建后，尽可能晚地设置属性和解决依赖。当你请求一个对象，如果在创建这个对象或者它的依赖有问题时，一个被正确加载的 Spring 容器可以在稍后抛出异常。 —— 例如，bean 会因为属性丢失或者无效引发异常。这些配置问题的延迟出现就是为什么 <code>ApplicationContext</code> 的实现默认是预初始化的单例 bean。在 bean 实际需要之前，以前期的时间和内存为代价来创建这些 bean。你会在 ApplicationContext 被创建的时候，发现配置问题。你仍然可以覆盖这个默认的行为，以便单例的 bean 可以被延迟初始化而不是过早的初始化。</p>
<p>如果没有循环依赖存在，当一个或者多个合作的 bean 被注入到一个需要依赖的 bean 时，每一个协作的 bean 会在注入到依赖的 bean 前被完全配置。这意味着，如果 bean A 对 bean B 有依赖，Spring IoC 容器在调用 bean A 的方法之前，将 bean B 完全配置好。换句话说，bean 被实例化后，它的依赖早已被设置好了，它的生命周期方法也早已被调用了。</p>
<h1 id="依赖注入的例子">依赖注入的例子</h1>
<p>下面的例子使用了基于 XML 的配置元数据，用来做基于 setter 的 DI。Spring XML 配置文件指定了一些 bean 定义如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-XML" data-lang="XML"><span class="line"><span class="cl"><span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&#34;exampleBean&#34;</span> <span class="na">class=</span><span class="s">&#34;examples.ExampleBean&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">	<span class="c">&lt;!-- setter injection using the nested ref element --&gt;</span>
</span></span><span class="line"><span class="cl">	<span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&#34;beanOne&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">		<span class="nt">&lt;ref</span> <span class="na">bean=</span><span class="s">&#34;anotherExampleBean&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">	<span class="nt">&lt;/property&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c">&lt;!-- setter injection using the neater ref attribute --&gt;</span>
</span></span><span class="line"><span class="cl">	<span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&#34;beanTwo&#34;</span> <span class="na">ref=</span><span class="s">&#34;yetAnotherBean&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">	<span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&#34;integerProperty&#34;</span> <span class="na">value=</span><span class="s">&#34;1&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/bean&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&#34;anotherExampleBean&#34;</span> <span class="na">class=</span><span class="s">&#34;examples.AnotherBean&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&#34;yetAnotherBean&#34;</span> <span class="na">class=</span><span class="s">&#34;examples.YetAnotherBean&#34;</span><span class="nt">/&gt;</span>
</span></span></code></pre></div><p>下面的例子展示了对应的 <code>ExampleBean</code>  类：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-Java" data-lang="Java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ExampleBean</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="kd">private</span> <span class="n">AnotherBean</span> <span class="n">beanOne</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="kd">private</span> <span class="n">YetAnotherBean</span> <span class="n">beanTwo</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="kd">private</span> <span class="kt">int</span> <span class="n">i</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">setBeanOne</span><span class="o">(</span><span class="n">AnotherBean</span> <span class="n">beanOne</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">this</span><span class="o">.</span><span class="na">beanOne</span> <span class="o">=</span> <span class="n">beanOne</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">	<span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">setBeanTwo</span><span class="o">(</span><span class="n">YetAnotherBean</span> <span class="n">beanTwo</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">this</span><span class="o">.</span><span class="na">beanTwo</span> <span class="o">=</span> <span class="n">beanTwo</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">	<span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">setIntegerProperty</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">this</span><span class="o">.</span><span class="na">i</span> <span class="o">=</span> <span class="n">i</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">	<span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>在前面的例子中，声明 setter 方法去定义 XML 文件中的属性。下面的例子使用了基于构造函数的 DI：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-XML" data-lang="XML"><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&#34;exampleBean&#34;</span> <span class="na">class=</span><span class="s">&#34;examples.ExampleBean&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">	<span class="c">&lt;!-- constructor injection using the nested ref element --&gt;</span>
</span></span><span class="line"><span class="cl">	<span class="nt">&lt;constructor-arg&gt;</span>
</span></span><span class="line"><span class="cl">		<span class="nt">&lt;ref</span> <span class="na">bean=</span><span class="s">&#34;anotherExampleBean&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">	<span class="nt">&lt;/constructor-arg&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c">&lt;!-- constructor injection using the neater ref attribute --&gt;</span>
</span></span><span class="line"><span class="cl">	<span class="nt">&lt;constructor-arg</span> <span class="na">ref=</span><span class="s">&#34;yetAnotherBean&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nt">&lt;constructor-arg</span> <span class="na">type=</span><span class="s">&#34;int&#34;</span> <span class="na">value=</span><span class="s">&#34;1&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/bean&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&#34;anotherExampleBean&#34;</span> <span class="na">class=</span><span class="s">&#34;examples.AnotherBean&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&#34;yetAnotherBean&#34;</span> <span class="na">class=</span><span class="s">&#34;examples.YetAnotherBean&#34;</span><span class="nt">/&gt;</span>
</span></span></code></pre></div><p>下面的例子展示了对应的 ExampleBean 类：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-Java" data-lang="Java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ExampleBean</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="kd">private</span> <span class="n">AnotherBean</span> <span class="n">beanOne</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="kd">private</span> <span class="n">YetAnotherBean</span> <span class="n">beanTwo</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="kd">private</span> <span class="kt">int</span> <span class="n">i</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="nf">ExampleBean</span><span class="o">(</span>
</span></span><span class="line"><span class="cl">		<span class="n">AnotherBean</span> <span class="n">anotherBean</span><span class="o">,</span> <span class="n">YetAnotherBean</span> <span class="n">yetAnotherBean</span><span class="o">,</span> <span class="kt">int</span> <span class="n">i</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">this</span><span class="o">.</span><span class="na">beanOne</span> <span class="o">=</span> <span class="n">anotherBean</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">		<span class="k">this</span><span class="o">.</span><span class="na">beanTwo</span> <span class="o">=</span> <span class="n">yetAnotherBean</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">		<span class="k">this</span><span class="o">.</span><span class="na">i</span> <span class="o">=</span> <span class="n">i</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">	<span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>bean 定义中指定的构造函数中的参数，被用作 ExampleBean 构造函数中的参数。</p>
<p>现在考虑这个例子的一个变形，而不是使用构造函数。Spring 被告知调用静态工厂方法来返回一个对象的实例。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-XML" data-lang="XML"><span class="line"><span class="cl"><span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&#34;exampleBean&#34;</span> <span class="na">class=</span><span class="s">&#34;examples.ExampleBean&#34;</span> <span class="na">factory-method=</span><span class="s">&#34;createInstance&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">	<span class="nt">&lt;constructor-arg</span> <span class="na">ref=</span><span class="s">&#34;anotherExampleBean&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">	<span class="nt">&lt;constructor-arg</span> <span class="na">ref=</span><span class="s">&#34;yetAnotherBean&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">	<span class="nt">&lt;constructor-arg</span> <span class="na">value=</span><span class="s">&#34;1&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/bean&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&#34;anotherExampleBean&#34;</span> <span class="na">class=</span><span class="s">&#34;examples.AnotherBean&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&#34;yetAnotherBean&#34;</span> <span class="na">class=</span><span class="s">&#34;examples.YetAnotherBean&#34;</span><span class="nt">/&gt;</span>
</span></span></code></pre></div><p>下面的例子展示了相应的 ExampleBean 类：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-Java" data-lang="Java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ExampleBean</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// a private constructor
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="kd">private</span> <span class="nf">ExampleBean</span><span class="o">(...)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">		<span class="o">...</span>
</span></span><span class="line"><span class="cl">	<span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// a static factory method; the arguments to this method can be
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// considered the dependencies of the bean that is returned,
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// regardless of how those arguments are actually used.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="kd">public</span> <span class="kd">static</span> <span class="n">ExampleBean</span> <span class="nf">createInstance</span> <span class="o">(</span>
</span></span><span class="line"><span class="cl">		<span class="n">AnotherBean</span> <span class="n">anotherBean</span><span class="o">,</span> <span class="n">YetAnotherBean</span> <span class="n">yetAnotherBean</span><span class="o">,</span> <span class="kt">int</span> <span class="n">i</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="n">ExampleBean</span> <span class="n">eb</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ExampleBean</span> <span class="o">(...);</span>
</span></span><span class="line"><span class="cl">		<span class="c1">// some other operations...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="k">return</span> <span class="n">eb</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">	<span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p><constructor-arg/> 元素提供了静态工厂方法中的参数，就如同一个构造函数被实际上使用。工厂方法返回 class 的类型，不一定要和包含静态方法的类是一个类型（尽管在这个例子中相同）。一个实例的非静态工厂方法可以用本质上同样的方式来使用（使用 factory-bean 属性代替 class 属性除外），所以我们在这里就不多赘述了。</p>
<p>[全文完]</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>中秋绝句</title>
      <link>https://anriclee.github.io/posts/essays/poems/</link>
      <pubDate>Wed, 06 Sep 2023 23:14:19 +0800</pubDate>
      
      <guid>https://anriclee.github.io/posts/essays/poems/</guid>
      <description>中秋绝句
癸卯秋夜，虽炎热潮湿，开窗无月，然心情大好，咏志抒怀，无碍也，是为序。
自来霜雪映吴钩，半生浮云半生幽
未有三旬寂寞守，何能一夜照清秋</description>
      <content:encoded><![CDATA[<p>中秋绝句</p>
<blockquote>
<p>癸卯秋夜，虽炎热潮湿，开窗无月，然心情大好，咏志抒怀，无碍也，是为序。</p>
</blockquote>
<p>自来霜雪映吴钩，半生浮云半生幽</p>
<p>未有三旬寂寞守，何能一夜照清秋</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>[译] Spring AOP 概念</title>
      <link>https://anriclee.github.io/posts/spring_framework/core/spring_aop/concept/</link>
      <pubDate>Tue, 05 Sep 2023 23:01:18 +0800</pubDate>
      
      <guid>https://anriclee.github.io/posts/spring_framework/core/spring_aop/concept/</guid>
      <description>AOP 通过提供另外一种关于程序结构的思考方式补充了面向对象编程（OOP ）。在 OOP 中模块的关键单元是 class，而在 AOP 中，模块的关键是 Aspect（切面）。切面支持跨多个对象和类型的关注点模块化（比如事务的管理）。在 AOP 中这种关注点通常被叫做 “跨领域” 关注点。
Spring 的一个核心组件就是 AOP 框架。虽然 Spring IoC 容器并不依赖于 AOP（意思是如果不想用 AOP 可以不用），但是 AOP 对 Spring IoC 做了一个补充，提供了一种功能非常强大的中间件解决方案。
Spring AOP 和 切面切点
Spring 提供了简单而高效的方式来自定义切面，可以通过基于 schema 的方法也可以通过 @AspectJ 注解的风格。当使用 Spring AOP 来织入时，这两种风格都提供了充分类型的 advice 和 AspectJ 的切点语言。
这张主要讨论 schema 和 @Aspect 的 AOP 支持。AOP 底层的支持在下面的一章节会讨论到。
AOP 在 Spring 框架中的用途：
提供声明式的企业级服务。最重要的就是声明式事务管理 让用户实现自定义的切面作为他们用 AOP 实现 OOP 的补充。 Note：如果你对通用的声明式服务或者其他预先打包的声明式中间件服务感兴趣，你不用直接和 Spring AOP 直接打交道，可以跳过本章的大部分地方。
AOP 概念 让我们从一些核心的 AOP 概念和术语出发。这些术语并不只是 Spring 特有的。不幸地是，AOP 术语并不符合直觉。然而，如果 Spring 使用它自己的术语，或许会更加令人迷惑。</description>
      <content:encoded><![CDATA[<p>AOP 通过提供另外一种关于程序结构的思考方式补充了面向对象编程（OOP ）。在 OOP 中模块的关键单元是 class，而在 AOP 中，模块的关键是 Aspect（切面）。切面支持跨多个对象和类型的关注点模块化（比如事务的管理）。在 AOP 中这种关注点通常被叫做 “跨领域” 关注点。</p>
<p>Spring 的一个核心组件就是 AOP 框架。虽然 Spring IoC 容器并不依赖于 AOP（意思是如果不想用 AOP 可以不用），但是 AOP 对 Spring IoC 做了一个补充，提供了一种功能非常强大的中间件解决方案。</p>
<blockquote>
<p>Spring AOP 和 切面切点</p>
<p>Spring 提供了简单而高效的方式来自定义切面，可以通过基于 schema 的方法也可以通过 @AspectJ 注解的风格。当使用 Spring AOP 来织入时，这两种风格都提供了充分类型的 advice 和 AspectJ 的切点语言。</p>
<p>这张主要讨论 schema 和 @Aspect 的 AOP 支持。AOP 底层的支持在下面的一章节会讨论到。</p>
</blockquote>
<p>AOP 在 Spring 框架中的用途：</p>
<ul>
<li>提供声明式的企业级服务。最重要的就是声明式事务管理</li>
<li>让用户实现自定义的切面作为他们用 AOP 实现 OOP 的补充。</li>
</ul>
<p>Note：如果你对通用的声明式服务或者其他预先打包的声明式中间件服务感兴趣，你不用直接和 Spring AOP 直接打交道，可以跳过本章的大部分地方。</p>
<h1 id="aop-概念">AOP 概念</h1>
<p>让我们从一些核心的 AOP 概念和术语出发。这些术语并不只是 Spring 特有的。不幸地是，AOP 术语并不符合直觉。然而，如果 Spring 使用它自己的术语，或许会更加令人迷惑。</p>
<ul>
<li>Aspect：跨多个 class 的关注点模块化。事务处理是一个在企业级 Java 应用中跨领域关注点的很好例子。在 Spring AOP 中，使用普通的类实现切面（基于 schema 的方式）或者使用带有 @Aspect 注解的普通类实现（@Aspect 风格）</li>
<li>Join point：程序执行过程中的一个点，例如方法的执行或者异常的处理。在 Spring AOP 中，一个 Join point 总代表一个方法的执行。</li>
<li>Advice：Aspect 在一个特殊的 Join point 中要执行的操作，不同类型的 Advice 包括 around（环绕），before（事前） 和 after（事后）。（Advice 的类型会在稍后讨论）。许多 包括 Spring 在内的 AOP 的框架，对 advice 建模为一个拦截器，围绕着 Join point 维持一个拦截器的链路。</li>
<li>Pointcut：与 Join point 进行匹配的谓词。Advice 总是和一个 Pointcut 表达式联系在一起，并且会在任何匹配到 Pointcut 的 Join point 执行（例如，一个有特定的名字的方法的执行）。通过 Pointcut 表达式匹配的 Join point 的概念是 AOP 的核心，Spring 默认使用 AspectJ pointcut 表达式语言。</li>
<li>Introduction：代表一种类型声明其他的方法或者字段。Spring AOP 可以让你对任何 advised（被 Advice 的） 对象引入新的接口（包含一个相应的实现）。例如，你可以使用 Introduction 让一个 bean 实现一个 IsModified 接口，以此实现简单的缓存。（在 Aspect 社区里，一个 Introduction 被视作一个类型间的声明）</li>
<li>目标对象：被一个或者多个 Aspect 进行 Advice 的对象。同样也被视为 Advice 对象。因为 Spring AOP 通过使用动态代理实现，这个对象永远是一个代理对象。</li>
<li>AOP 代理：AOP 框架为了实现 Aspect 契约（如 advise 方法执行等等）而创建的一个对象。在 Spring 框架中，一个 AOP 代理就是 JDK 动态代理或者 CGLIB 代理</li>
<li>Weaving（织入）：连接 Aspect 和其他的应用类型或者对象来创建一个 advised 对象。它可以在编译时（例如使用 AspectJ编译器）、加载时、或者运行时完成。Spring AOP，如其他的纯 Java AOP 框架一样，在运行时执行织入。
【译者按：1. 这些技术术语翻译为中文有点怪，不太合适，与其强行翻译，不如直接用原生的英文术语。】</li>
</ul>
<p>Spring AOP 包括下面类型的 advice：</p>
<ul>
<li>事前 advice ：在一个 join point 前执行的 advice，但并没有能力阻止下一个 join point 的执行（除非它抛出异常）</li>
<li>事后 advice ：在一个 join point 正常结束后，要运行的 advice（例如，一个没有抛出异常的方法的返回）</li>
<li>异常 advice ：如果一个方法异常退出，则运行该 advice</li>
<li>最终 advice后： join point 存在无论如何要执行的 advice（正常结束或者异常退出）</li>
<li>环绕 advice：在方法调用前后要执行的 advice。这是最强大的一种 advice。环绕 advice 可以在方法执行前后可以执行自定义的行为。它同时要对选择是否执行到下一个 joint point 还是通过正常返回值或者抛出异常来中断执行 advised 方法。</li>
</ul>
<p>环绕 advice 是最常见的一种 advice。因为 Spring AOP，像 AspectJ 提供了 advice 的所有类型，我们推荐你使用可以实现预期行为的最小 advice 类型。例如，如果你仅仅需要在方法返回值后，更新缓存，你最好使用一个事后 advice 而不是一个环绕 advice，虽然环绕 advice 也可以完成相同的事情。使用最合适的 advice 类型可以提供一种简单的编程模型，尽可能地减少错误的发生率。例如，你不必要在环绕 advice 里面的 JoinPoint 调用 proceed 方法，因此，你就不会调用失败。</p>
<p>所有的 advice 参数都是静态类型，以便你可以使用 合适类型的 advice 参数，而非 Object 数组。</p>
<p>通过 pointcut 匹配的 join point 的概念是 AOP 的关键，这也是它与仅提供拦截器的老技术不同的地方。Pointcut 可以使 advice 能够更具有针对性，脱离面向对象的继承关系。例如，你可以通过提供一个声明式事务管理来对一系列跨多对象（例如 service 层的所有业务操作）的方法应用一个环绕 advice。</p>
<h1 id="spring-aop-的能力和目标">Spring AOP 的能力和目标</h1>
<p>Spring AOP 使用纯 Java 实现。没有特殊编译过程的必要。Spring AOP 不用控制类加载器关系，因此适合使用在 servelet 容器或者应用服务器中。</p>
<p>Spring AOP 当前仅支持方法的 Join point （在 Spring 的 bean 里面的方法的执行添加 advice）。字段拦截没有实现，虽然无需破坏核心的 Spring AOP 接口就可以添加对字段的支持。如果你需要对字段的访问和更新进行 advice，考虑使用例如一种叫 AspectJ 的语言。</p>
<p>Spring 的 AOP 方法和大部分其他的 AOP 框架的不同。它的目标不是为了提供最完备的 AOP 实现（虽然 Spring AOP 是非常强悍的）。它的目标是提供一个 AOP 实现和 Spring IoC 之间更加紧密的整合，以便能够帮助解决企业级应用的一些常见问题。</p>
<p>因此，Spring 框架的 AOP 能力通常与 Spring IoC 容器一起使用。通过使用正常的 bean 定义语法可以对 Aspects 进行配置（尽管这允许强大的自动代理能力）。这是一个不同于其他 AOP 实现的显著不同点。你使用 Spring AOP 不能高效和轻易地做诸如对一个精细的对象（典型地，例如领域对象）进行 advice。AspectJ 在这些场景下是最好的选择。然而，我们的经验是，Spring AOP 提供对企业级 Java 应用大部分问题的非常出色的解决方案，这对 AOP 是一个补充。</p>
<p>Spring AOP 从来不刻意和 AspectJ 进行竞争，来提供一个全面的解决方法。我们相信像 Spring AOP 这样的基于代理的框架和像 AspectJ 的非常成熟的框架都是非常有意义的，他们之间是互补的而不是竞争的。Spring 无缝整合了 Spring AOP、IoC 和 AspectJ，为了让基于 Spring 的应用架构能够使用所有的 AOP。这样的整合不影响 Spring AOP 接口或者 AOP 的 Alliance 接口。Spring AOP 保持向下兼容。对于 Spring AOP 接口的讨论，参考下一章。</p>
<p>Note：Spring 框架的一个核心的原则就是无侵入性。这个观点就是你不应该被强迫引入框架专用的类和接口到你的业务模块或者领域模块。然而，在一些地方，Spring 框架确实给你了选择来引入 Spring 框架专用的依赖到你的代码库。给你这样的选择的理由就是在特定的场景下，或许使用这种方式能够使得代码更易读或者更易编写一些特定功能的代码。然而，Spring 框架（几乎）总是给你选择：你拥有慎重决定选择最适合你的使用场景的自由。</p>
<p>与本章相关的这样一个决定就是选择哪种 AOP 框架（哪种 AOP 风格）。你可以选择 AspectJ，Spring AOP 或者两种都选择。你同样可以选择使用 @AspectJ 的注解风格方法或者 Spring XML 配置风格方法。本章首先选择引入 @Aspect 风格方法，并不是 Spring 团队偏好这种风格。</p>
<h1 id="aop-代理">AOP 代理</h1>
<p>Spring AOP 默认使用标准 JDK 代理来做 AOP 代理。这让任何接口（或者接口集）都能够被代理。</p>
<p>Spring AOP 同样可以使用 CGLIB 代理。代理类而非接口的场景下，这是必须的。默认情况，如果一个业务对象没有实现接口，就会用 CGLIB 。考虑面向接口而非类编程是一个最佳实践，业务类通常会实现一个或者多个业务接口。强制使用 CGLIB 也是可以的，在那些你需要对没有在接口中声明的方法进行 advice 或者你需要以一个具体的类型传递一个代理对象到一个方法的地方（希望这些场景不是很多）。</p>
<p>牢牢把握 Spring AOP 是基于代理这个事实是非常重要的。</p>
<h1 id="aspectj-支持">@AspectJ 支持</h1>
<p>@AspectJ 指的是一种将带有注解的普通类声明为 aspect 的风格。@AspectJ 风格在 AspectJ 5 中被 AspectJ 项目引入。Spring 使用 AspectJ 提供的库进行 pointcut 解析和匹配，对于同样的注解与 AspectJ 5 的相同。尽管如此，AOP 运行时仍然是纯 Spring AOP，且没有依赖任何 AspectJ 编译器或者织入器。</p>
<p>Note：使用 AspectJ 编译器和织入器来允许完整的 AspectJ 语言，在 <a href="https://docs.spring.io/spring-framework/reference/core/aop/using-aspectj.html">Using AspectJ with Spring Applications.</a> 进行了讨论。</p>
<h1 id="打开-aspectj">打开 @AspectJ</h1>
<p>为了在 Spring 配置中使用 @AspectJ ，你需要让 Spring 支持基于 @AspectJ 的 AOP 配置和基于是否被那些 Aspect advice 的 bean 做自动代理。通过自动代理，我们的意思是，如果 Spring 决定一个 bean 被一个或者多个 aspect advice，它通常会对那个 bean 来生成一个代理，来拦截方法的执行，在需要的时候，允许 advice 运行。</p>
<p>@AspectJ 支持可以通过 XML 或者 Java 配置来打开。无论哪一种方法，你都需要确保 AspectJ 的 aspectjweaver.jar 库在你应用程序的类路径上。这个库在 AspectJ 的 lib 目录下或者 Maven 中央仓库里面都可以找到。</p>
<h2 id="使用-java-配置打开-aspectj">使用 Java 配置打开 @AspectJ</h2>
<p>通过 Java @Configuration 支持 @AspectJ，添加 @EnableAspectJAutoProxy  注解。如下面的例子所示：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-Java" data-lang="Java"><span class="line"><span class="cl"><span class="nd">@Configuration</span>
</span></span><span class="line"><span class="cl"><span class="nd">@EnableAspectJAutoProxy</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">AppConfig</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><h2 id="通过-xml-配置打开-aspectj">通过 XML 配置打开 @AspectJ</h2>
<p>通过基于 XML 的配置，使能 @AspectJ 的支持，需要使用 aop:aspectj-autoproxy 元素，如下面的例子所示：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-XML" data-lang="XML"><span class="line"><span class="cl"><span class="nt">&lt;aop:aspectj-autoproxy/&gt;</span>
</span></span></code></pre></div><p>这假设你使用了 schema 支持。</p>
<h1 id="声明一个-aspect">声明一个 Aspect</h1>
<p>@AspectJ 支持打开后，在你应用 context 中任何带有 @AspectJ aspect 的 bean 类都会被 Spring 自动检测到，并用来配置 Spring AOP。下面的两个例子，展示了定义一个不是非常有用的 aspect 所必要的最少步骤。</p>
<p>第一个例子展示了在应用 context 里面的一个普通定义，指向了一个带有 @Aspect 注解的 bean 类。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-XML" data-lang="XML"><span class="line"><span class="cl"><span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&#34;myAspect&#34;</span> <span class="na">class=</span><span class="s">&#34;com.xyz.NotVeryUsefulAspect&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">	<span class="c">&lt;!-- configure properties of the aspect here --&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/bean&gt;</span>
</span></span></code></pre></div><p>第二个例子，展示了带有 @Aspect 注解的 NotVeryUsefulAspect  类定义：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-Java" data-lang="Java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">com.xyz</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.aspectj.lang.annotation.Aspect</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nd">@Aspect</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">NotVeryUsefulAspect</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>Aspects（带有 @Aspect 注解的类），可以有方法和字段，和其他类一样。他们也可以包含 pointcut，advice 和 introduction。</p>
<p>Note：你可以在 Spring 的 XML 配置中以普通 bean  的形式注册 aspect 类，通过在 @Configuration 类中使用 @Bean 的方法，或者让 Spring 通过类路径扫描的方式来自动检测 ———— 和其他 Spring 管理的 bean 一样。然而，注意 @Aspect 注解对于类路径的自动检测来讲，是不够的。出于这个目的，你需要增加一个独立的 @Component 注解（或者，作为备选，一个满足让 Spring 可以扫描到的自定义的注解类型）。</p>
<p>Note：在 Spring AOP 中，aspect 不能是其他 Aspect 中 advice 的目标。@Aspect 注解标记这个类是一个 aspect，因此它不会被自动代理。</p>
<h1 id="声明一个-pointcut">声明一个 Pointcut</h1>
<p>Pointcut 决定感兴趣的 join point，因此当 advice 运行时，可以让我们实现控制。Spring AOP 仅支持 Spring bean 中方法执行的 join point，因此你可以认为一个 pointcut 就是 Spring bean 中药执行的方法的匹配。一个 point 声明有两部分：包含名称和任意参数的签名以及一个决定我们对哪些方法执行感兴趣的 pointcut 表达式。在一个 @AspectJ 注解风格的 AOP 中，一个 pointcut 的签名通过普通方法定义的的形式来提供，一个pointcut表达式通过使用 @Pointcut 注解来标明（作为 pointcut 签名方法必须有一个 void 返回类型）。</p>
<p>下面一个例子或许会使 pointcut 的签名和 pointcut 表达式之间的区别更加明显。下面的例子定义了一个叫 anyOldTransfer 的 pointcut，它匹配了所有叫 transfer 的方法的执行。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-Java" data-lang="Java"><span class="line"><span class="cl"><span class="nd">@Pointcut</span><span class="o">(</span><span class="s">&#34;execution(* transfer(..))&#34;</span><span class="o">)</span> <span class="c1">// the pointcut expression
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">private</span> <span class="kt">void</span> <span class="nf">anyOldTransfer</span><span class="o">()</span> <span class="o">{}</span> <span class="c1">// the pointcut signature
</span></span></span></code></pre></div><p>组成 pointcut 注解值的表达式是一个普通的 AspectJ 表达式。</p>
<h2 id="支持的-pointcut-指示符">支持的 pointcut 指示符</h2>
<p>Spring AOP 在 pointcut 表达式中支持下面的 AspectJ pointcut 指示符（PCD）：</p>
<ul>
<li>execution：匹配方法执行的 join point。当使用 Spring AOP 时，这个是最主要的 PCD</li>
<li>within：限制匹配具有特定类型的 join point（当使用 Spring AOP 时，在匹配类型内的声明方法的执行）</li>
<li>this：限制匹配 join point，此时 bean 引用是一个给定类型的实例。</li>
<li>target：限制连接点的匹配，此时目标对象是一个给定类型的实例</li>
<li>args：限制匹配 join point，此时参数是给定类型的注解</li>
<li>@target：限制 join point 的匹配，此时被执行的对象的类有一个给定类型的注解</li>
<li>@args：限制 join point 的匹配，传递参数的运行类型有给定类型的注解</li>
<li>@within：限制匹配到有给定注解类型的 join point（使用 Spring AOP 时，具有给定注解类型的方法的执行）</li>
<li>@annotation：限制匹配 join point （在 Spring AOP 中运行的方法），其主题有一个给定注解</li>
</ul>
<blockquote>
<p>其他 pointcut 类型</p>
<p>完整的 AspectJ pointcut 语言支持额外在 Spring 中不支持的 pointcut 指示符：call, get, set, preinitialization, staticinitialization, initialization, handler, adviceexecution, withincode, cflow, cflowbelow, if, @this, 以及 @withincode. 在 Spring AOP 的 pointcut 表达式中使用这些指示符，会抛出 IllegalArgumentException  异常。</p>
<p>这套 pointcut 指示符回叙在将来会被 Spring AOP 支持。</p>
</blockquote>
<p>因为 Spring AOP 限制了仅对方法执行的 join point 做匹配，前面的关于 pointcut 指示符的定义有了比你在 Aspect 语言指南中更狭义的定义。除此之外，AspectJ 自身也有基于类型的语义，而且，在一个 join point 执行的地方，this 和 target 都指向一个相同的对象：执行方法的对象。Spring AOP 是基于代理的系统，在代理对象本身和其后面所代理的对象之间会有所区分。</p>
<p>Note：因为 Spring AOP 框架的基于代理的本质，根据定义，在目标对象里面的调用不会被拦截。对于 JDK 代理，仅仅调用 public 接口方法可以被拦截。在 CGLIB 中，在代理对象上的 public 和 protected 方法调用可以被拦截（如有必要，甚至包级别可见的方法）。然而，在代理之间的公共交互，应该设计为 public 签名</p>
<p>注意，pointcut 定义一般会匹配到任何被拦截到的方法。如果一个 pointcut 严格意义上是仅为 public，即使在一个 CGLIB 代理场景中，通过代理进行潜在地非 public 的交互，也需要对其进行相应的定义。</p>
<p>如果你的拦截需要包括在目标类中的方法调用甚至构造函数的调用，考虑基于 Spring 驱动的 native Aspect 织入，而非 Spring 的基于代理的 AOP 框架。这形成了一个具有不同特点的不同的 AOP 的使用，所以确保在做决定之前，要对织入比较熟悉。</p>
<p>Spring AOP 同样支持一个额外的叫 bean 的 PCD。这个 PCD 能让你限制 join point 到一个特定的 Spring bean 或者一系列命名的 Spring Bean （当使用通配符）。这个 bean PCD 有下面的形式：</p>
<p>bean(idOrNameOfBean)</p>
<p>idOrNameOfBean 符号可以为任意 Spring bean 的名字。限制的通配符使用 * 符号，如果你建立了一些对 Spring beans 的命名习惯，你可以写一个 bean PCD 表达式来选择他们。这对于其他的 pointcut 指示符也适用，bean PCD 也可以与 &amp;&amp;（与），||（或），!（非） 操作符一起使用。</p>
<p>Note：bean PCD 仅仅在 Spring AOP 中支持，而非 native AspectJ 织入中。它是一种 Spring 独有的对 AspectJ 定义的标准 PCD 的扩展，因此，在 @Aspect 模型中定义的 aspect 不能使用。</p>
<p>bean PCD 在实例级别进行操作（在 Spring bean 命名概念上构建），而非仅在类级别。基于实例的 pointcut 指示符是一个基于 Spring 代理的 AOP 框架与 Spring bean 工厂之间的特殊能力，在此中，通过名字标识具体的 bean 非常自然和直观。</p>
<h2 id="pointcut-表达式之间的组合">Pointcut 表达式之间的组合</h2>
<p>你可以使用 &amp;&amp;,||,! 组合 pointcut 表达式，你也可以通过名字来引用 pointcut 表达式。下面的例子展示了三种 pointcut 表达式</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-Java" data-lang="Java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">com.xyz</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Pointcuts</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nd">@Pointcut</span><span class="o">(</span><span class="s">&#34;execution(public * *(..))&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">publicMethod</span><span class="o">()</span> <span class="o">{}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nd">@Pointcut</span><span class="o">(</span><span class="s">&#34;within(com.xyz.trading..*)&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">inTrading</span><span class="o">()</span> <span class="o">{}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nd">@Pointcut</span><span class="o">(</span><span class="s">&#34;publicMethod() &amp;&amp; inTrading()&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">tradingOperation</span><span class="o">()</span> <span class="o">{}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><ol>
<li>publicMethod 匹配所有的 public 方法的 join point 的执行</li>
<li>inTrading 匹配 trading 模块下的方法执行</li>
<li>tradingOperation 匹配在 trading 模块下的任意 public 执行</li>
</ol>
<p>在小的有名字的 pointcuts 的基础上构建更加复杂的 pointcut 表达式，是最佳实践。当通过名字引用 pointcut 时，普通的 Java 可见性规则同样适用（你可以看到同类型里的 private pointcut，继承关系中的 protected pointcut，任何地方的 public pointcuts 等等）。可见性并不影响 pointcut 的匹配。</p>
<h2 id="共享命名的-pointcut-定义">共享命名的 pointcut 定义</h2>
<p>在使用企业级应用时，开发者经常需要引用应用的模块和在若干 aspects 中的特定的操作集合。出于此目的，我们建议定义一个能够包含常用的有名字的 pointcut 表达式专门的类。这样的一个类通常组合了下面的 CommonPointcuts 示例（怎么命名这个类取决于你）。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-Java" data-lang="Java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">com.xyz</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.aspectj.lang.annotation.Pointcut</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">CommonPointcuts</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">	 * 这是一个在 web 层的 join point，定义在 com.xyz.web 包里面
</span></span></span><span class="line"><span class="cl"><span class="cm">	 * 或者这个包下面的任何子包
</span></span></span><span class="line"><span class="cl"><span class="cm">	 */</span>
</span></span><span class="line"><span class="cl">	<span class="nd">@Pointcut</span><span class="o">(</span><span class="s">&#34;within(com.xyz.web..*)&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">inWebLayer</span><span class="o">()</span> <span class="o">{}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">	 * 这是一个服务层的 join point，如果一个方法定义在 com.xyz.service
</span></span></span><span class="line"><span class="cl"><span class="cm">	 * 包中或者这个包下面的任意子包
</span></span></span><span class="line"><span class="cl"><span class="cm">	 */</span>
</span></span><span class="line"><span class="cl">	<span class="nd">@Pointcut</span><span class="o">(</span><span class="s">&#34;within(com.xyz.service..*)&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">inServiceLayer</span><span class="o">()</span> <span class="o">{}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">	 * 定义在数据接入层的一个 join point，如果方法定义在 com.xyz.dao
</span></span></span><span class="line"><span class="cl"><span class="cm">	 * 包中或者此包下面的任意子包
</span></span></span><span class="line"><span class="cl"><span class="cm">	 */</span>
</span></span><span class="line"><span class="cl">	<span class="nd">@Pointcut</span><span class="o">(</span><span class="s">&#34;within(com.xyz.dao..*)&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">inDataAccessLayer</span><span class="o">()</span> <span class="o">{}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">	 * 一个业务类是在 service 接口上的定义的任意方法的执行。这个定义假设接口都在 service 
</span></span></span><span class="line"><span class="cl"><span class="cm">	 * 包中，所有的接口实现类都在子包中
</span></span></span><span class="line"><span class="cl"><span class="cm">	 * 
</span></span></span><span class="line"><span class="cl"><span class="cm">	 * 如果你通过功能对这些 service 接口分组（例如在 com.xyz.abc.service 包和 com.xyz.def.service 包，那么 pointcut 表达式 &#34;execution(* com.xyz..service.*.*(..))&#34; 就可以使用
</span></span></span><span class="line"><span class="cl"><span class="cm">	 * 
</span></span></span><span class="line"><span class="cl"><span class="cm">	 * 作为备选，你可以使用 bean PCD 来写表达式，例如 &#34;bean(*Service)&#34;。（这假设你已经以一个一贯的方式对你的 Spring service beans 命名
</span></span></span><span class="line"><span class="cl"><span class="cm">	 */</span>
</span></span><span class="line"><span class="cl">	<span class="nd">@Pointcut</span><span class="o">(</span><span class="s">&#34;execution(* com.xyz..service.*.*(..))&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">businessService</span><span class="o">()</span> <span class="o">{}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">	 * 一个数据接入操作，是定义在 DAO 接口层中的任意方法的执行。这个定义假设接口在 dao 包内，实现类型在子包内
</span></span></span><span class="line"><span class="cl"><span class="cm">	 */</span>
</span></span><span class="line"><span class="cl">	<span class="nd">@Pointcut</span><span class="o">(</span><span class="s">&#34;execution(* com.xyz.dao.*.*(..))&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">dataAccessOperation</span><span class="o">()</span> <span class="o">{}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>在任意你需要一个 pointcut 表达式的地方，你可以通过引用一个 class 的全限定名与 @Pointcut 方法名的组合引用定义在这样的类里面的 pointcut。例如，为了使你的服务层是事务的，你可以写下面的引用了 com.xyz.CommonPointcuts.businessService() 中的命名的 pointcut：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-Java" data-lang="Java"><span class="line"><span class="cl"><span class="o">&lt;</span><span class="n">aop</span><span class="o">:</span><span class="n">config</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl">	<span class="o">&lt;</span><span class="n">aop</span><span class="o">:</span><span class="n">advisor</span>
</span></span><span class="line"><span class="cl">		<span class="n">pointcut</span><span class="o">=</span><span class="s">&#34;com.xyz.CommonPointcuts.businessService()&#34;</span>
</span></span><span class="line"><span class="cl">		<span class="n">advice</span><span class="o">-</span><span class="n">ref</span><span class="o">=</span><span class="s">&#34;tx-advice&#34;</span><span class="o">/&gt;</span>
</span></span><span class="line"><span class="cl"><span class="o">&lt;/</span><span class="n">aop</span><span class="o">:</span><span class="n">config</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="o">&lt;</span><span class="n">tx</span><span class="o">:</span><span class="n">advice</span> <span class="n">id</span><span class="o">=</span><span class="s">&#34;tx-advice&#34;</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl">	<span class="o">&lt;</span><span class="n">tx</span><span class="o">:</span><span class="n">attributes</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl">		<span class="o">&lt;</span><span class="n">tx</span><span class="o">:</span><span class="n">method</span> <span class="n">name</span><span class="o">=</span><span class="s">&#34;*&#34;</span> <span class="n">propagation</span><span class="o">=</span><span class="s">&#34;REQUIRED&#34;</span><span class="o">/&gt;</span>
</span></span><span class="line"><span class="cl">	<span class="o">&lt;/</span><span class="n">tx</span><span class="o">:</span><span class="n">attributes</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="o">&lt;/</span><span class="n">tx</span><span class="o">:</span><span class="n">advice</span><span class="o">&gt;</span>
</span></span></code></pre></div><h2 id="例子">例子</h2>
<p>Spring AOP 用户很可能使用 execution pointcut 指示符最多。一个 execution 表达式的格式如下：</p>
<pre tabindex="0"><code>execution(modifiers-pattern?
			ret-type-pattern
			declaring-type-pattern?name-pattern(param-pattern)
			throws-pattern?)
</code></pre><p>除了返回类型模式（在前面代码片段中的 ret-type-pattern）、命名模式、参数模式之外，所有的部分都是可选的。返回类型的模式决定了方法返回的类型必须是什么样才能匹配一个 join point。<code>*</code> 是作为返回类型最频繁使用的。它匹配任何返回类型。一个全限定类型名仅仅匹配返回类指定类型的方法。命名模式匹配方法名。你可以使用 <code>*</code> 通配符作为一个命名模式的部分或者全部。如果你指定了一个声明类型的模式，请添加一个后缀 <code>.</code> 来满足命名模式。参数模式稍微有些复杂：<code>()</code> 匹配一个无参方法，<code>(..)</code> 匹配有任意参数的方法（包含0个）。<code>(*)</code> 匹配有一个任意类型参数的方法。 <code>(*,String)</code> 匹配一个接受两个参数的方法。第一个可以为任意类型，第二个必须是一个 String。</p>
<p>下面的例子展示了一些常用的 pointcut 表达式：</p>
<ul>
<li>任意 public 方法的执行</li>
</ul>
<p><code>execution(public * *(..))</code></p>
<ul>
<li>任意以 set 开头作为方法名的方法</li>
</ul>
<p><code>execution(* set*(..))</code></p>
<ul>
<li>任意通过 AccountService 接口定义的方法</li>
</ul>
<p><code>execution(* com.xyz.service.AccountService.*(..)) </code></p>
<ul>
<li>任意定义在 service 包里的方法的执行</li>
</ul>
<p><code>execution(* com.xyz.service.*.*(..))</code></p>
<ul>
<li>定义在 service 包或者其中一个子包的任意方法的执行</li>
</ul>
<p><code>execution(* com.xyz.service..*.*(..))</code></p>
<ul>
<li>任意在 service 包里面的 join point（仅在 Spring AOP 中的方法的执行）</li>
</ul>
<p><code>within(com.xyz.service.*)</code></p>
<ul>
<li>任意在 service 包里面或者子包里面的 join point（仅在 Spring AOP 方法执行）</li>
</ul>
<p><code>within(com.xyz.service..*)</code></p>
<ul>
<li>一个代理实现了 AccountService 接口的 join point（仅在 Spring AOP 中的方法执行）</li>
</ul>
<p><code>this(com.xyz.service.AccountService)</code></p>
<ul>
<li>目标对象实现了 AccountService 接口的 join point</li>
</ul>
<p><code>target(com.xyz.service.AccountService)</code></p>
<ul>
<li>接受一个参数，并且在运行时传入的时候是可序列化的（仅在 Spring AOP）</li>
</ul>
<p><code>args(java.io.Serializable)</code></p>
<p>注意例子中给出的 pointcut 与 <code>execution(* *(java.io.Serializable))</code> 不同。如果运行时传入的参数是可序列化的，并且如果方法签名声明了一个可序列化类型，执行版本匹配</p>
<ul>
<li>一个 target 对象有一个 @Transactional 注解的 join point。</li>
</ul>
<p><code>@target(org.springframework.transaction.annotation.Transactional)</code></p>
<ul>
<li>目标对象的声明类型有一个 @Transactional 的 join point</li>
</ul>
<p><code>@within(org.springframework.transaction.annotation.Transactional)</code></p>
<ul>
<li>执行方法有一个  @Transactional 注解的 join point（仅在 Spring AOP）</li>
</ul>
<p><code>@annotation(org.springframework.transaction.annotation.Transactional)</code></p>
<ul>
<li>接受当个参数，且参数的运行时类型有 @Classified 注解的 join point</li>
</ul>
<p><code>@args(com.xyz.security.Classified)</code></p>
<ul>
<li>在一个叫 tradeService 的 Spring bean 中的 join point（仅在 Spring AOP 中适用）</li>
</ul>
<p><code>bean(tradeService)</code></p>
<ul>
<li>匹配通配符 <code>*Service</code> 的 Spring bean 中的 join point</li>
</ul>
<p><code>bean(*Service)</code></p>
<h2 id="写好-pointcut">写好 Pointcut</h2>
<p>在编译过程中，Aspect 为了优化匹配性能，按顺序处理 pointcut 。检查代码，确定是否每一个匹配指定 pointcut 的 join point 为一个耗时的过程。（动态匹配意味着匹配不能通过静态分析完全确定，且代码中有相应的测试用例来确定在代码运行时是否真有一个匹配）。在第一次遇到 pointcut 声明时，AspectJ 为了匹配过程，会重写为一个优化格式。什么意思呢？简单说，pointcut 被重写为 DNF（Disjunctive Normal Form）而且 pointcut 的组件被排序，以便那些求值代价更小的被优先检测。这意味着你无需关心不同的 pointcut 指示符的性能，可以以任意顺序提供 pointcut 声明。</p>
<p>然而，AspectJ 仅能按照命令行事。为了匹配性能的最大化，你应该考虑你想达到什么效果，并尽可能地在定义时缩小你的匹配空间。当前的指示符本质上可以归为三组：kinded、scoping、contextual。</p>
<ul>
<li>kinded 指示符选择一种特殊的 join point：execution、get、set、call、handler</li>
<li>scoping 指示符从一组 join point 中选择：within、withincode</li>
<li>contextual 指示符基于上下文进行匹配：this、target、@annotation</li>
</ul>
<p>一个号的 pointcut 应该至少包括两个类型（kinded和 scoping）。你可以包含 contextual 指示符来基于 join point 上下文匹配或者在使用 advice 时绑定上下文。假设仅有一种指示符或者仅有一个 contextual 指示符可以起作用，但是会由于额外的处理或者分析影响织入性能（时间或者内存大小）。scoping 指示符匹配非常快，使用他们意味着 AspectJ 可以非常快地忽略无需进一步处理的 join point 组。一个好的 pointcut 应该尽可能地址包含一种。</p>
<h1 id="声明一个-advice">声明一个 advice</h1>
<p>TO BE CONTINUED</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>[译] Bean 概述</title>
      <link>https://anriclee.github.io/posts/spring_framework/core/the_ioc_container/bean_overview/</link>
      <pubDate>Sat, 02 Sep 2023 23:12:31 +0800</pubDate>
      
      <guid>https://anriclee.github.io/posts/spring_framework/core/the_ioc_container/bean_overview/</guid>
      <description>一个 Sring IoC 容器可以操作一个或者多个 bean。这些 bean 是通过你提供给容器的配置元数据生成的（例如，以 XML 中的 &amp;lt;bean/&amp;gt; ）。
在容器内，这些 bean 的定义被表示成 BeanDefinition 对象的形式，包含了下面的元数据：
包定义的类名：通常是定义的 bean 的真正实现类 bean 行为配置元素，表明了 bean 在 container 中的行为（scope，生命周期回调等等）。 对其他需要的 bean 的引用。这些引用也被称作协作器和依赖。 在一个新创建的对象中的其他配置设置 - 例如，池的数量限制或者一个操作连接池 bean 中的连接数量 这些元数据转换为构成这些 bean 定义的一系列属性。下表表示了这些属性值：
属性 含义 Class 正在实例化的bean Name bean的名字 Scope Bean的Scope 构造函数参数 依赖注入 自动装配模式 装配的协作对象 懒加载模式 懒加载 Bean 初始化方法 初始化回调 析构方法 析构回调 除了包含怎么创建一个特定的 bean 的信息之外， ApplicationContext 的实现同样允许在容器外面已经创建好的对象注册到其中（用户创建）。这是通过 getBeanFactory 方法获取到 ApplicationContext 的 BeanFactory，得到 DefaultListableBeanFactory 实现来做到的。DefaultListableBeanFactory 支持通过调用 registerSingleton(..) 和 registerBeanDefinition(.</description>
      <content:encoded><![CDATA[<p>一个 Sring IoC 容器可以操作一个或者多个 bean。这些 bean 是通过你提供给容器的配置元数据生成的（例如，以 XML 中的 <code>&lt;bean/&gt;</code> ）。</p>
<p>在容器内，这些 bean 的定义被表示成 <code>BeanDefinition</code> 对象的形式，包含了下面的元数据：</p>
<ul>
<li>包定义的类名：通常是定义的 bean 的真正实现类</li>
<li>bean 行为配置元素，表明了 bean 在 container 中的行为（scope，生命周期回调等等）。</li>
<li>对其他需要的 bean 的引用。这些引用也被称作协作器和依赖。</li>
<li>在一个新创建的对象中的其他配置设置 - 例如，池的数量限制或者一个操作连接池 bean 中的连接数量</li>
</ul>
<p>这些元数据转换为构成这些 bean 定义的一系列属性。下表表示了这些属性值：</p>
<table>
<thead>
<tr>
<th>属性</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>Class</td>
<td>正在实例化的bean</td>
</tr>
<tr>
<td>Name</td>
<td>bean的名字</td>
</tr>
<tr>
<td>Scope</td>
<td>Bean的Scope</td>
</tr>
<tr>
<td>构造函数参数</td>
<td>依赖注入</td>
</tr>
<tr>
<td>自动装配模式</td>
<td>装配的协作对象</td>
</tr>
<tr>
<td>懒加载模式</td>
<td>懒加载 Bean</td>
</tr>
<tr>
<td>初始化方法</td>
<td>初始化回调</td>
</tr>
<tr>
<td>析构方法</td>
<td>析构回调</td>
</tr>
</tbody>
</table>
<p>除了包含怎么创建一个特定的 bean 的信息之外， <code>ApplicationContext</code> 的实现同样允许在容器外面已经创建好的对象注册到其中（用户创建）。这是通过 <code>getBeanFactory</code> 方法获取到 <code>ApplicationContext</code> 的 <code>BeanFactory</code>，得到 <code>DefaultListableBeanFactory</code> 实现来做到的。<code>DefaultListableBeanFactory</code> 支持通过调用 <code>registerSingleton(..)</code>  和 <code>registerBeanDefinition(..)</code> 方法来实现这样的注册。然而，典型的应用程序仅仅使用常规的 bean 定义元数据。</p>
<p>Note：bean 的元数据和手工提供的单例对象，需要被尽可能早地注册，以便容器在自动装配期间和其他内省的步骤中，可以对他们做出合理的推断。尽管覆盖现有的元数据和单例对象在某种程度上可以支持，但是官方并不支持在运行时注册新的 bean，这很可能会导致并发获取的异常，bean 容器中不一致的状态，或者两者都有。</p>
<h1 id="bean-命名">Bean 命名</h1>
<p>每个 bean 都有至少一个标识。这些标识必须在持有 bean 的容器中保持唯一。一个 bean 通常仅有一个标识。然而，如果需要不止一个，额外的可以被认为是别名。</p>
<p>在基于 XML 的配置元数据中，你可以使用 id 属性，name 属性或者两者一起确定唯一的 bean。id 属性让你确定唯一的一个 id。按照习惯，这些名字都由字母或者数字组成，但是他们也可以包含特殊字符。如果你想对这些 bean 引入其他的别名，你也可以通过使用 <code>,</code> <code>;</code> <code>空格</code> 作为分隔符的 name 属性。尽管 id属性已经被定义为 xsd:string 类型，容器中还是bean 的 id 唯一性是由容器强制执行的，而不是通过 XML 解析器。</p>
<p>对一个 bean 提供 name 或者 id 属性并不是必须的。如果你不希望显式地提供 name 或者 id，容器会对这个 bean 生成一个唯一的名字。但是，如果你想通过名字引用这个 bean，通过 ref 元素或者 Service Locator 的模式来找，你必须提供 name 属性。在使用内部的 bean 或者自动装配时，可以不提供 name 属性。</p>
<blockquote>
<p>Bean 名字惯例</p>
<p>当给一个 bean 命名时，惯例是使用标准 Java 实例中对成员变量名。这也就是 bean 的名字必须以一个小写字母开始，并且是驼峰的形式。这样的例子如：<code>accountManager</code>，<code>accountService</code>，<code>userDao</code>，<code>loginController</code> 等等。</p>
<p>对 bean 命名的一致性，可以使你的配置更易读且易懂。而且，如果你使用 Spring 的 AOP 机制，当通过名字来对一系列 bean 提供一个 bean 是非常有用的。</p>
</blockquote>
<p>Note：当在 classpath 下进行 component 扫描时，Spring 会遵循前面描述的规则对没有命名的 component 生成名字：实质上，就是采用一个简单的类名，并且把首字母变为小写。然而，在不止包含一个字母并且首字母和第二个字母都大写的特殊情形下，原来的就会被继续保留。这些规则与 <code>java.beans.Introspector.decapitalize</code> 中定义的相同（Spring 把他们用在这里了）。</p>
<h1 id="对在-beandefinition-之外的-bean-起别名">对在 BeanDefinition 之外的 bean 起别名</h1>
<p>在 bean 定义自身中个，你可以通过使用 id 属性和在 name 属性中定义任意数量的名字对 bean 提供不止一个名字。这些名字相当于 bean 的别名，在某些情况下比较有用，例如，让应用程序中的每一个 component 都通过使用相对于这个 component 中的特定的 bean 名称来引用一个相同的依赖。</p>
<p>但是，在 bean 实际上被定义的地方里设置所有的别名，并不总是合适的。当这个 bean 在别的地方也定义的时候，有时候需要引入这个 bean 的别名。这在一个配置文件跨越多个子系统的大系统时且每个子系统都有自己的一套 bean 定义时，是非常常见的。在基于 XML 的配置元数据中，你可以使用 <code>&lt;alias/&gt;</code> 元素来完成这项任务。下面的例子表示了怎么使用：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-XML" data-lang="XML"><span class="line"><span class="cl"><span class="nt">&lt;alias</span> <span class="na">name=</span><span class="s">&#34;fromName&#34;</span> <span class="na">alias=</span><span class="s">&#34;toName&#34;</span><span class="nt">/&gt;</span>
</span></span></code></pre></div><p>在这个例子中，一个叫 <code>fromName</code> 的 bean，在使用这个别名定义后，也可以通过 <code>toName</code> 来引用到。</p>
<p>例如，对子系统 A 中的配置元数据，可以通过 <code>subsystemA-dataSource</code> 引用到 DataSrouce。在子系统 B 中也可以通过使用 <code>subsystemB-dataSource</code> 引用到。当构成一个同时使用到这两个子系统的主应用程序时，主应用程序可以通过 <code>myApp-dataSource</code> 名字来引用到 DataSource。你可以在配置元数据中增加下面的别名定义，来使所有三个名字引用到相同的对象：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-XML" data-lang="XML"><span class="line"><span class="cl"><span class="nt">&lt;alias</span> <span class="na">name=</span><span class="s">&#34;myApp-dataSource&#34;</span> <span class="na">alias=</span><span class="s">&#34;subsystemA-dataSource&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;alias</span> <span class="na">name=</span><span class="s">&#34;myApp-dataSource&#34;</span> <span class="na">alias=</span><span class="s">&#34;subsystemB-dataSource&#34;</span><span class="nt">/&gt;</span>
</span></span></code></pre></div><p>现在每一个 component 和主应用都可以通过一个唯一且不与其他 bean 定义冲突的名字引用到dataSource。，但他们都指向同一个 bean。</p>
<blockquote>
<p>Java 配置</p>
<p>如果你使用 Java 配置，@Bean 注解同样也可以用来提供别名。</p>
</blockquote>
<h1 id="bean-的实例化">Bean 的实例化</h1>
<p>一个 bean 定义本质上就是创建一个或者对个对象的菜谱。当容器被索要 bean 的时候，容器查看这个 bean 的菜谱，使用被 bean 定义封装好的配置元数据来创建一个真正的对象。</p>
<p>如果你使用 XML 配置元数据，你可以在 <bean/> 元素的 class 属性中，指定要实例化对象的类型或者（类名）。这个 class 属性通常是强制的（通常是 BeanDefinition 实例中的 Class 属性）。你可以使用下面两种方法之一来使用 Class 属性：</p>
<ul>
<li>
<p>通常，在容器本身直接通过反射调用构造函数创建 bean 的地方，直接指定要被构建的类，在某种程度上相当于在 Java 代码中使用new 操作符</p>
</li>
<li>
<p>通过指定包含创建这个对象静态工厂方法的类，容器调用这个类的静态工厂方法创建 bean，这是一个不太常见的用法。静态工厂方法返回的对象类型也许和此类相同或者完全不同</p>
</li>
</ul>
<blockquote>
<p>嵌套的类名</p>
<p>如果你想对一个嵌套类定义配置 bean 定义，你可以使用这个嵌套类的二进制名或者源文件名</p>
<p>例如，如果在 <code>com.example</code> 包里有一个类叫 <code>SomeThing</code>，并且这个 <code>SomeThing</code> 类有一个叫 <code>OtherThing</code> 的静态嵌套类，他们可以通过 <code>$</code> 或者 <code>.</code> 符号分割，所以 bean 定义中的 <code>class</code> 属性值会是：<code>com.example.SomeThing$OtherThing</code> 或者 <code>com.example.SomeThing.OtherThing</code>.</p>
</blockquote>
<h1 id="通过构造器实例化">通过构造器实例化</h1>
<p>当你通过构造器的方式来创建 bean，所有普通类都可以被使用并且与 Spring 兼容。也就是说，正在被开发的类没必要实现任何特殊的接口或者用一种特殊的方式编码。只需要指定 bean 的类就足够了。然而，根据你为了创建特定 bean 选择的 IoC类型，你也许会需要一个默认（空的）构造器。</p>
<p>Spring IoC 容器几乎可以操作任何你想操作的类。并不仅限于操作真正的 JavaBean。大部分 Spring 的用户更偏爱使用只包含一个无参构造器，合适的 setter 和 getter 建模的 JavaBean。你也可以在你的容器中使用更多的非 bean 风格的类。例如，如果你需要使用一个遗留下来的绝对没有遵循  JavaBean 规范的连接池，Spring 同样操作它。</p>
<p>在下面的基于 XML 配置元数据例子中，你可以指定你的 bean 类：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-XML" data-lang="XML"><span class="line"><span class="cl"><span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&#34;exampleBean&#34;</span> <span class="na">class=</span><span class="s">&#34;examples.ExampleBean&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nt">&lt;bean</span> <span class="na">name=</span><span class="s">&#34;anotherExample&#34;</span> <span class="na">class=</span><span class="s">&#34;examples.ExampleBeanTwo&#34;</span><span class="nt">/&gt;</span>
</span></span></code></pre></div><h1 id="通过静态方法实例化">通过静态方法实例化</h1>
<p>当定义一个你想通过静态工厂方法创建的 bean 时，需要使用 <code>class</code> 属性指定包含这个静态工厂方法的类，使用 <code>factory-method</code> 属性，指定这个工厂方法本身。你能够调用这个方法（通过可选参数，这个待马上会讲到）返回一个对象，随后，这个对象看做是通过构造函数创建的。这样定义 bean 的一个使用场景就是调用遗留代码中的静态工厂。</p>
<p>下面的 bean 定义，指定了将要通过工厂方法创建的 bean。这个定义不会指定返回对象的类型，而是指定包含静态方法的类。在这个例子中，<code>createInstance()</code> 方法必须是一个静态方法。下面的例子展示了怎么去指定一个工厂方法。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-XML" data-lang="XML"><span class="line"><span class="cl"><span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&#34;clientService&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="na">class=</span><span class="s">&#34;examples.ClientService&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="na">factory-method=</span><span class="s">&#34;createInstance&#34;</span><span class="nt">/&gt;</span>
</span></span></code></pre></div><p>下面的例子展示了一个上面 bean 定义用到的类：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-Java" data-lang="Java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ClientService</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">	<span class="kd">private</span> <span class="kd">static</span> <span class="n">ClientService</span> <span class="n">clientService</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ClientService</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">	<span class="kd">private</span> <span class="nf">ClientService</span><span class="o">()</span> <span class="o">{}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="kd">static</span> <span class="n">ClientService</span> <span class="nf">createInstance</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="n">clientService</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">	<span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>想了解关于如何给工厂方法传参并且在工厂返回的对象中设置对象实例的属性的细节，可以参考 <a href="https://docs.spring.io/spring-framework/reference/core/beans/dependencies/factory-properties-detailed.html">Dependencies and Configuration in Detail.</a>。</p>
<h1 id="通过实例的工厂方法">通过实例的工厂方法</h1>
<p>与通过静态工厂方法实例化相似，通过实例的工厂方法调用一个容器中一个现有 bean 的非静态方法来创建一个新的 bean。要想使用这个机制，需要将 <code>class</code> 属性置空并且在 <code>factory-bean</code> 属性指定当前容器（父容器或者祖父容器）中的 bean 的名称，此 bean 包含创建对象实例的方法。在 <code>factory-method</code> 属性中设置工厂方法本身的名字。下面的例子展示了如何配置这样一个 bean：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-XML" data-lang="XML"><span class="line"><span class="cl"><span class="c">&lt;!-- the factory bean, which contains a method called createInstance() --&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&#34;serviceLocator&#34;</span> <span class="na">class=</span><span class="s">&#34;examples.DefaultServiceLocator&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">	<span class="c">&lt;!-- inject any dependencies required by this locator bean --&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/bean&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c">&lt;!-- the bean to be created via the factory bean --&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&#34;clientService&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="na">factory-bean=</span><span class="s">&#34;serviceLocator&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="na">factory-method=</span><span class="s">&#34;createClientServiceInstance&#34;</span><span class="nt">/&gt;</span>
</span></span></code></pre></div><p>下面的例子展示了与之相应的类：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-Java" data-lang="Java"><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">DefaultServiceLocator</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="kd">private</span> <span class="kd">static</span> <span class="n">ClientService</span> <span class="n">clientService</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ClientServiceImpl</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="n">ClientService</span> <span class="nf">createClientServiceInstance</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="n">clientService</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">	<span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>一个工厂类，同样也可以包含更多的工厂方法，如下面的例子所示：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-XML" data-lang="XML"><span class="line"><span class="cl"><span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&#34;serviceLocator&#34;</span> <span class="na">class=</span><span class="s">&#34;examples.DefaultServiceLocator&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">	<span class="c">&lt;!-- inject any dependencies required by this locator bean --&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/bean&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&#34;clientService&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="na">factory-bean=</span><span class="s">&#34;serviceLocator&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="na">factory-method=</span><span class="s">&#34;createClientServiceInstance&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&#34;accountService&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="na">factory-bean=</span><span class="s">&#34;serviceLocator&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="na">factory-method=</span><span class="s">&#34;createAccountServiceInstance&#34;</span><span class="nt">/&gt;</span>
</span></span></code></pre></div><p>下面的例子展示了与之相对应的类：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-Java" data-lang="Java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">DefaultServiceLocator</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="kd">private</span> <span class="kd">static</span> <span class="n">ClientService</span> <span class="n">clientService</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ClientServiceImpl</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="kd">private</span> <span class="kd">static</span> <span class="n">AccountService</span> <span class="n">accountService</span> <span class="o">=</span> <span class="k">new</span> <span class="n">AccountServiceImpl</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="n">ClientService</span> <span class="nf">createClientServiceInstance</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="n">clientService</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">	<span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="n">AccountService</span> <span class="nf">createAccountServiceInstance</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="n">accountService</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">	<span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>这个方法展示了工厂 bean 本身是可以通过依赖注入机制被设置和配置的。</p>
<p>Note：在 Spring 的文档中，&ldquo;factory bean&rdquo; 指的是一个在 Spring 容器中配置好并且通过实例或者静态工厂方法创建好的 bean。与之相对比，<code>FactoryBean</code>（注意首字母），指的是一个 Spring 特定的 <code>FactoryBean</code> 的实现类。</p>
<h1 id="确定一个-bean-的运行时类名">确定一个 bean 的运行时类名</h1>
<p>确定一个特定的bean的运行时类型并非易事。一个在 bean 元数据定义中指定的类仅仅是一个可能与一个声明的工厂方法组合的初始类引用，或者是一个会
让此 bean 的运行时类型完全不同的 FactoryBean 类，或者在实例级别的工厂方法（通过指定的 factory-bean 来解决）什么也不做。此外，AOP 代理也会通过bean 接口代理来包装一个bean实例，此接口代理会有限地暴露目标bean的实际类型（仅仅是已经实现的接口）。</p>
<p>找出一个特定 bean 的实际运行时类型的推荐的方法是通过指定 bean 名字，调用 <code>BeanFactory.getType</code> 方法。这种方法将上面所有的情形考虑在内，并且返回对象的类型，此对象也是在相同名称下，调用 <code>BeanFactory.getBean</code> 方法会返回的。</p>
<p>[全文完]</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>[译] Spring IOC 容器</title>
      <link>https://anriclee.github.io/posts/spring_framework/core/the_ioc_container/container_and_beans/</link>
      <pubDate>Sat, 02 Sep 2023 23:12:31 +0800</pubDate>
      
      <guid>https://anriclee.github.io/posts/spring_framework/core/the_ioc_container/container_and_beans/</guid>
      <description>Spring IOC 和 bean 的简介 本章涵盖了 SpringFramework 中的控制反转原则（Ioc）的实现。IoC 也被称为依赖注入（DI）。它是这样的一种过程，在此期间对象仅通过构造函数参数、工厂方法的参数或者当对象实例被构造后或者通过工厂方法返回时在它上面设置的属性定义自己的依赖（即对象必须合作的其他对象）。
当容器创建这些 bean 后，再注入这些依赖。
这个过程本质上与bean 通过使用直接的类构造函数进行直接实例化或者通过类似 Service Locator模式来寻找依赖的位置是相反的（这也是 IoC 名字的由来）。
org.springframework.beans 和 org.springframework.context 包是 SpringFramework IoC 容器的基石。BeanFactory 接口提供了一种更先进的能够控制人已类型对象的配置机制。ApplicationContext 是 BeanFactory 的子接口。它增加了下面的特性：
与 Spring 的 AOP 特性更容易整合 消息资源处理（在国际化场景的使用） 事件发布 例如用于 Web 应用的 WebApplicationContext 应用层特定的上下文 总而言之，BeanFactory 提供了配置的框架和基本的功能。ApplicationContext 增加了更多的企业特定的功能。ApplicationContext 完全是 BeanFactory 的超集。在本章关于 Spring IoC 容器做专门描述时会用到。想要获取更多的关于使用 ApplicationContext 而非 BeanFactory 的信息，参见介绍 BeanFactory API 的部分。
在 Spring 中，作为你应用基石同时可以被 Spring IoC 容器所操控的对象就被称之为 bean。bean 就是被 Spring IoC 容器实例化、组装和设置的对象。否则，一个 bean 就是你应用程序中诸多对象中的一个。 Beans 以及他们依赖关系，反映在容器使用的配置元数据中。</description>
      <content:encoded><![CDATA[<h1 id="spring-ioc-和-bean-的简介">Spring IOC 和 bean 的简介</h1>
<p>本章涵盖了 SpringFramework 中的控制反转原则（Ioc）的实现。IoC 也被称为依赖注入（DI）。它是这样的一种过程，在此期间对象仅通过构造函数参数、工厂方法的参数或者当对象实例被构造后或者通过工厂方法返回时在它上面设置的属性定义自己的依赖（即对象必须合作的其他对象）。</p>
<p>当容器创建这些 bean 后，再注入这些依赖。</p>
<p>这个过程本质上与bean 通过使用直接的类构造函数进行直接实例化或者通过类似 Service Locator模式来寻找依赖的位置是相反的（这也是 IoC 名字的由来）。</p>
<p><code>org.springframework.beans</code> 和 <code>org.springframework.context</code> 包是 SpringFramework IoC 容器的基石。<code>BeanFactory</code> 接口提供了一种更先进的能够控制人已类型对象的配置机制。<code>ApplicationContext</code> 是 <code>BeanFactory</code> 的子接口。它增加了下面的特性：</p>
<ul>
<li>与 Spring 的 AOP 特性更容易整合</li>
<li>消息资源处理（在国际化场景的使用）</li>
<li>事件发布</li>
<li>例如用于 Web 应用的 <code>WebApplicationContext</code> 应用层特定的上下文</li>
</ul>
<p>总而言之，<code>BeanFactory</code> 提供了配置的框架和基本的功能。<code>ApplicationContext</code> 增加了更多的企业特定的功能。<code>ApplicationContext</code> 完全是 <code>BeanFactory</code> 的超集。在本章关于 Spring IoC 容器做专门描述时会用到。想要获取更多的关于使用 <code>ApplicationContext</code> 而非 <code>BeanFactory</code> 的信息，参见介绍 <a href="https://docs.spring.io/spring-framework/reference/core/beans/beanfactory.html">BeanFactory</a> API 的部分。</p>
<p>在 Spring 中，作为你应用基石同时可以被 Spring IoC 容器所操控的对象就被称之为 bean。bean 就是被 Spring IoC 容器实例化、组装和设置的对象。否则，一个 bean 就是你应用程序中诸多对象中的一个。 Beans 以及他们依赖关系，反映在容器使用的配置元数据中。</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>[译] 容器概述</title>
      <link>https://anriclee.github.io/posts/spring_framework/core/the_ioc_container/container_overview/</link>
      <pubDate>Sat, 02 Sep 2023 23:12:31 +0800</pubDate>
      
      <guid>https://anriclee.github.io/posts/spring_framework/core/the_ioc_container/container_overview/</guid>
      <description>容器概述 org.springframework.context.ApplicationContext 接口代表了 Spring IoC 容器，它主要负责通过读取配置文件对 bean 进行实例化、配置和组装。 容器通过读取配置元数据来获知要实例化、配置和组装那些对象。配置的元数据一般为 XML、Java 注解和 Java 代码的形式，它让你能够表达组成你应用程序的对象以及对象之间的丰富的相互依赖关系。
Spring 提供了 ApplicationContext 接口的若干实现。在单体应用中，创建一个 ClassPathXmlApplicationContext 或者 FileSystemXmlApplicationContext 是很常见的。虽然 XML 是定义配置元数据的传统形式，但是你还可以通过在 XML 文件里面进行声明配置来告诉容器对于 Java 注解或者Java代码格式的支持。
在大多数的应用场景中，并不需要显式的代码来实例化 Spring IoC 容器。例如，在 Web 应用的场景中，在 web.xml 文件中仅用简单的 8 行代码左右的样板 Web XML 描述符即可满足需要（参考 Convenient ApplicationContext Instantiation for Web Applications）。如果你使 Eclipse 中的 Spring 工具（在 Eclipse 开发环境中），你可以通过几下鼠标点击或者按键的敲击就能轻松创建这样一个样板配置文件。
下图展示了关于 Spring 工作机制的一个全局视角。在 ApplicationContext 被创建和初始化后，你的应用类和配置元数据已经捆绑在一起了，这样一来，你就有一个充分配置并且可执行的系统或者应用程序。
配置元数据 如上图所示，Spring Ioc 容器接收到一种格式的配置元数据。这个配置元数据代表了，作为一个应用开发者你告诉 Spring 容器在应用程序中，如何实例化、配置和组装对象。
传统的配置元数据是一种简单并且符合直觉的 XML 形式，在本章的大部分地方，也用此来表达关键的概念和 Spring IoC 容器的特性。
基于 XML 的元数据不是配置元数据的唯一允许的形式。Spring IoC 容器自身与配置元数据实际上是什么格式完全解耦。目前许多开发者在应用程序中选择基于Java 的配置。</description>
      <content:encoded><![CDATA[<h1 id="容器概述">容器概述</h1>
<p><code>org.springframework.context.ApplicationContext</code> 接口代表了 Spring IoC 容器，它主要负责通过读取配置文件对 bean 进行实例化、配置和组装。
容器通过读取配置元数据来获知要实例化、配置和组装那些对象。配置的元数据一般为 XML、Java 注解和 Java 代码的形式，它让你能够表达组成你应用程序的对象以及对象之间的丰富的相互依赖关系。</p>
<p>Spring 提供了 <code>ApplicationContext</code> 接口的若干实现。在单体应用中，创建一个 <code>ClassPathXmlApplicationContext</code> 或者 <code>FileSystemXmlApplicationContext</code> 是很常见的。虽然 XML 是定义配置元数据的传统形式，但是你还可以通过在 XML 文件里面进行声明配置来告诉容器对于 Java 注解或者Java代码格式的支持。</p>
<p>在大多数的应用场景中，并不需要显式的代码来实例化 Spring IoC 容器。例如，在 Web 应用的场景中，在 <code>web.xml</code> 文件中仅用简单的 8 行代码左右的样板 Web XML 描述符即可满足需要（参考 <a href="https://docs.spring.io/spring-framework/reference/core/beans/context-introduction.html#context-create">Convenient ApplicationContext Instantiation for Web Applications</a>）。如果你使 Eclipse 中的 Spring 工具（在 Eclipse 开发环境中），你可以通过几下鼠标点击或者按键的敲击就能轻松创建这样一个样板配置文件。</p>
<p>下图展示了关于 Spring 工作机制的一个全局视角。在 <code>ApplicationContext</code> 被创建和初始化后，你的应用类和配置元数据已经捆绑在一起了，这样一来，你就有一个充分配置并且可执行的系统或者应用程序。</p>
<p><img loading="lazy" src="/posts/spring_framework/core/the_ioc_container/container_overview/imgs/ioc.png" type="" alt="Spring"  /></p>
<h1 id="配置元数据">配置元数据</h1>
<p>如上图所示，Spring Ioc 容器接收到一种格式的配置元数据。这个配置元数据代表了，作为一个应用开发者你告诉 Spring 容器在应用程序中，如何实例化、配置和组装对象。</p>
<p>传统的配置元数据是一种简单并且符合直觉的 XML 形式，在本章的大部分地方，也用此来表达关键的概念和 Spring IoC 容器的特性。</p>
<blockquote>
<p>基于 XML 的元数据不是配置元数据的唯一允许的形式。Spring IoC 容器自身与配置元数据实际上是什么格式完全解耦。目前许多开发者在应用程序中选择<a href="https://docs.spring.io/spring-framework/reference/core/beans/java.html">基于Java 的配置</a>。</p>
</blockquote>
<p>在 Spring 容器中使用其他格式的配置元数据，可参考：</p>
<ul>
<li><a href="https://docs.spring.io/spring-framework/reference/core/beans/annotation-config.html">基于注解的配置</a>：通过基于注解的配置元数据定义 beans</li>
<li><a href="https://docs.spring.io/spring-framework/reference/core/beans/java.html">基于Java的配置</a>：通过使用 Java 而不是 XML 文件来定义你应用类之外的 beans。使用这些特性可以参考 <a href="https://docs.spring.io/spring-framework/docs/6.0.11/javadoc-api/org/springframework/context/annotation/Configuration.html">@Configuration</a>, <a href="https://docs.spring.io/spring-framework/docs/6.0.11/javadoc-api/org/springframework/context/annotation/Bean.html">@Bean</a>, <a href="https://docs.spring.io/spring-framework/docs/6.0.11/javadoc-api/org/springframework/context/annotation/Import.html">@Import</a>, <a href="https://docs.spring.io/spring-framework/docs/6.0.11/javadoc-api/org/springframework/context/annotation/DependsOn.html">@DependsOn</a> 注解。</li>
</ul>
<p>Spring 的配置由至少一个，通常为1个以上容器可以操作的 bean 组成。基于 XML 的配置元数据，配置顶部根元素 <beans/> 里面的 <bean/> 元素。Java 配置通常在一个 @Configuration 类里面使用 @Bean 注解方法。</p>
<p>这些 bean 的定义与组成你应用的实际对象相对应。通常地，你需要定义服务层对象，持久化层对象例如仓库或者数据接入对象（DAOs），例如 Web Controller 的表现层对象，例如一个 JPA EntityManagerFactory 的基础层对象，JMS 队列等等。通常不在容器里面对一个领域层对象进行精细化配置，因为创建和加载领域对象，通常是存储层和业务层的逻辑。</p>
<p>下面的例子，展示了基于 XML 的配置元数据的基本结构：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-XML" data-lang="XML"><span class="line"><span class="cl"><span class="cp">&lt;?xml version=&#34;1.0&#34; encoding=&#34;UTF-8&#34;?&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;beans</span> <span class="na">xmlns=</span><span class="s">&#34;http://www.springframework.org/schema/beans&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="na">xmlns:xsi=</span><span class="s">&#34;http://www.w3.org/2001/XMLSchema-instance&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="na">xsi:schemaLocation=</span><span class="s">&#34;http://www.springframework.org/schema/beans
</span></span></span><span class="line"><span class="cl"><span class="s">		https://www.springframework.org/schema/beans/spring-beans.xsd&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&#34;...&#34;</span> <span class="na">class=</span><span class="s">&#34;...&#34;</span><span class="nt">&gt;</span> [1][2]
</span></span><span class="line"><span class="cl">		<span class="c">&lt;!-- collaborators and configuration for this bean go here --&gt;</span>
</span></span><span class="line"><span class="cl">	<span class="nt">&lt;/bean&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&#34;...&#34;</span> <span class="na">class=</span><span class="s">&#34;...&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">		<span class="c">&lt;!-- collaborators and configuration for this bean go here --&gt;</span>
</span></span><span class="line"><span class="cl">	<span class="nt">&lt;/bean&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c">&lt;!-- more bean definitions go here --&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/beans&gt;</span>
</span></span></code></pre></div><p>[1]：id 属性唯一标识一个独立的 bean 定义
[2]：class 属性定义了 bean的类型，并且使用类的全限定名</p>
<p>id 属性的值可以被用来引用互相协作的对象。引用协作的对象的 XML并不在此例中，参考<a href="https://docs.spring.io/spring-framework/reference/core/beans/dependencies.html">依赖</a>部分获取更多的信息。</p>
<h1 id="初始化一个容器">初始化一个容器</h1>
<p>提供给 <code>ApplicationContext</code> 构造器的位置路径是一些表示资源的字符串，这些字符串可以让容器从各种外部资源加载配置元数据，例如本地文件系统，Java 类路径等等。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-Java" data-lang="Java"><span class="line"><span class="cl"><span class="n">ApplicationContext</span> <span class="n">context</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ClassPathXmlApplicationContext</span><span class="o">(</span><span class="s">&#34;services.xml&#34;</span><span class="o">,</span> <span class="s">&#34;daos.xml&#34;</span><span class="o">);</span>
</span></span></code></pre></div><p>在你了解了 Spring 的 IoC 容器后，你也许想对 Spring 的“资源：抽象了解更多，这提供了一种方便的从 URI 语法标识中读取输入流的机制。特别是 Resource 路径用于构建应用的上下文。</p>
<p>下面的例子展示了服务层的对象(services.xml)的配置文件：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-XML" data-lang="XML"><span class="line"><span class="cl"><span class="cp">&lt;?xml version=&#34;1.0&#34; encoding=&#34;UTF-8&#34;?&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;beans</span> <span class="na">xmlns=</span><span class="s">&#34;http://www.springframework.org/schema/beans&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="na">xmlns:xsi=</span><span class="s">&#34;http://www.w3.org/2001/XMLSchema-instance&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="na">xsi:schemaLocation=</span><span class="s">&#34;http://www.springframework.org/schema/beans
</span></span></span><span class="line"><span class="cl"><span class="s">		https://www.springframework.org/schema/beans/spring-beans.xsd&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c">&lt;!-- services --&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&#34;petStore&#34;</span> <span class="na">class=</span><span class="s">&#34;org.springframework.samples.jpetstore.services.PetStoreServiceImpl&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">		<span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&#34;accountDao&#34;</span> <span class="na">ref=</span><span class="s">&#34;accountDao&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">		<span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&#34;itemDao&#34;</span> <span class="na">ref=</span><span class="s">&#34;itemDao&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">		<span class="c">&lt;!-- additional collaborators and configuration for this bean go here --&gt;</span>
</span></span><span class="line"><span class="cl">	<span class="nt">&lt;/bean&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c">&lt;!-- more bean definitions for services go here --&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/beans&gt;</span>
</span></span></code></pre></div><p>下面的例子展示了数据接入层(daos.xml)文件：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-XML" data-lang="XML"><span class="line"><span class="cl"><span class="cp">&lt;?xml version=&#34;1.0&#34; encoding=&#34;UTF-8&#34;?&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;beans</span> <span class="na">xmlns=</span><span class="s">&#34;http://www.springframework.org/schema/beans&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="na">xmlns:xsi=</span><span class="s">&#34;http://www.w3.org/2001/XMLSchema-instance&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="na">xsi:schemaLocation=</span><span class="s">&#34;http://www.springframework.org/schema/beans
</span></span></span><span class="line"><span class="cl"><span class="s">		https://www.springframework.org/schema/beans/spring-beans.xsd&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&#34;accountDao&#34;</span>
</span></span><span class="line"><span class="cl">		<span class="na">class=</span><span class="s">&#34;org.springframework.samples.jpetstore.dao.jpa.JpaAccountDao&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">		<span class="c">&lt;!-- additional collaborators and configuration for this bean go here --&gt;</span>
</span></span><span class="line"><span class="cl">	<span class="nt">&lt;/bean&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&#34;itemDao&#34;</span> <span class="na">class=</span><span class="s">&#34;org.springframework.samples.jpetstore.dao.jpa.JpaItemDao&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">		<span class="c">&lt;!-- additional collaborators and configuration for this bean go here --&gt;</span>
</span></span><span class="line"><span class="cl">	<span class="nt">&lt;/bean&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c">&lt;!-- more bean definitions for data access objects go here --&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/beans&gt;</span>
</span></span></code></pre></div><p>在上面的例子中，服务层由 <code>PetStoreServiceImpl</code> 类和两种类型分别为 <code>JpaAccountDao</code> 和 <code>JpaItemDao</code>(基于JPA对象关系映射标准) 的数据接入对象。<code>property name</code> 元素引用 JavaBean 属性的名字，<code>ref</code> 元素引用另外一个 bean 定义的名字。<code>id</code> 和 <code>ref</code> 元素之间的联系，表达了两个互相协作对象之间的依赖关系。想了解更多配置对象依赖的细节，参考 <a href="https://docs.spring.io/spring-framework/reference/core/beans/dependencies.html">依赖</a>。</p>
<h1 id="组装基于-xml-的配置元数据">组装基于 XML 的配置元数据</h1>
<p>一个 bean 的定义跨越多个 XML 文件中有时候会非常有用。通常，每一个 XML 的配置文件代表你架构里面的一个逻辑层或者模块。</p>
<p>你可以使用应用的上下文构造器从这些 XML 的片段中加载 bean 定义。这个构造器可以接受多 Resource 加载位置，就如前面表示的那样。你也可以使用一个或者多个 <code>&lt;import/&gt;</code> 元素去加载另一个（或者一些）文件中的 bean 定义。下面的例子展示了如何去做到这一点：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-XML" data-lang="XML"><span class="line"><span class="cl"><span class="nt">&lt;beans&gt;</span>
</span></span><span class="line"><span class="cl">	<span class="nt">&lt;import</span> <span class="na">resource=</span><span class="s">&#34;services.xml&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">	<span class="nt">&lt;import</span> <span class="na">resource=</span><span class="s">&#34;resources/messageSource.xml&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">	<span class="nt">&lt;import</span> <span class="na">resource=</span><span class="s">&#34;/resources/themeSource.xml&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&#34;bean1&#34;</span> <span class="na">class=</span><span class="s">&#34;...&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">	<span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&#34;bean2&#34;</span> <span class="na">class=</span><span class="s">&#34;...&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/beans&gt;</span>
</span></span></code></pre></div><p>在上面的例子中，外部的 bean 定义从三个文件中加载到：<code>services.xml</code>,<code>messageSource.xml</code>,<code>themeSource.xml</code> 。所有的位置路径都是做引入的 bean 定义文件的相对路径。所以，services.xml 必须和正在引入的文件在相同的目录下或者类路径下。虽然 <code>messageSource.xml</code> 和 <code>themeSource.xml</code> 必须在导入文件的下面的路径的 resource 路径里。如你所见，前导的 <code>/</code> 符号被忽略了。然而，既然这些路径都是相对的，所以，最好不适用 <code>/</code> 。被引入文件的内容，必须是一个依据 Spring Schema 的有效 XML bean 定义，最外层是 <code>&lt;beans/&gt;</code> 元素。</p>
<p>注意：
使用 <code>../</code> 路径引用父目录中的文件虽然是可以的，但是并不推荐。这样做，会使得当前的应用程序对外部的文件造成依赖。特别是，这个引用对类路径不推荐，例如：<code>classpath:../services.xml</code>，这样的情形下，运行时的进程会选择离 classpath 根路径最近的地方，然后去找它的父目录。类路径配置的修改，很可能会导致一个完全不同的错误的目录被选中。</p>
<p>你可以永远选择一个全限定的资源路径而不是相对路径，例如 <code>file:C:/config/services.xml</code> 或者 <code>classpath:/config/services.xml</code>。然而，需要知道的是，你正在使你的应用配置和特定的绝对路径耦合。通常会选择对这样的绝对路径做一个间接地引用，例如，通过运行时，根据 JVM 的系统属性解析的<code>${...}</code> 占位符。</p>
<p>名空间提供了引入原语的特性。在普通 bean 定义之外的特性可以在 Spring 提供的名空间————例如， <code>context</code> 和 <code>util</code> 中获取到。</p>
<h1 id="grooy-bean-定义的-dsl">Grooy Bean 定义的 DSL</h1>
<p>另外一个外部配置元数据的例子，同样可以使用 Spring 的 Groovy Bean 定义 DSL 来表达，如 Grails 框架所示。通常，在 <code>.groovy</code> 文件会采用下面的配置结构：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-Groovy" data-lang="Groovy"><span class="line"><span class="cl"><span class="n">beans</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">	<span class="n">dataSource</span><span class="o">(</span><span class="n">BasicDataSource</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">		<span class="n">driverClassName</span> <span class="o">=</span> <span class="s2">&#34;org.hsqldb.jdbcDriver&#34;</span>
</span></span><span class="line"><span class="cl">		<span class="n">url</span> <span class="o">=</span> <span class="s2">&#34;jdbc:hsqldb:mem:grailsDB&#34;</span>
</span></span><span class="line"><span class="cl">		<span class="n">username</span> <span class="o">=</span> <span class="s2">&#34;sa&#34;</span>
</span></span><span class="line"><span class="cl">		<span class="n">password</span> <span class="o">=</span> <span class="s2">&#34;&#34;</span>
</span></span><span class="line"><span class="cl">		<span class="n">settings</span> <span class="o">=</span> <span class="o">[</span><span class="nl">mynew:</span><span class="s2">&#34;setting&#34;</span><span class="o">]</span>
</span></span><span class="line"><span class="cl">	<span class="o">}</span>
</span></span><span class="line"><span class="cl">	<span class="n">sessionFactory</span><span class="o">(</span><span class="n">SessionFactory</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">		<span class="n">dataSource</span> <span class="o">=</span> <span class="n">dataSource</span>
</span></span><span class="line"><span class="cl">	<span class="o">}</span>
</span></span><span class="line"><span class="cl">	<span class="n">myService</span><span class="o">(</span><span class="n">MyService</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">		<span class="n">nestedBean</span> <span class="o">=</span> <span class="o">{</span> <span class="n">AnotherBean</span> <span class="n">bean</span> <span class="o">-&gt;</span>
</span></span><span class="line"><span class="cl">			<span class="n">dataSource</span> <span class="o">=</span> <span class="n">dataSource</span>
</span></span><span class="line"><span class="cl">		<span class="o">}</span>
</span></span><span class="line"><span class="cl">	<span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>这样的配置风格基本和 Spring XML 配置名空间中的 bean 定义和事件相同。同样，通过 importBeans 指令引入 XML bean 定义也是可以的。</p>
<h1 id="容器的使用">容器的使用</h1>
<p><code>ApplicationContext</code> 是一个高级的工厂接口，它可以保存一个包含不同的 bean 和他们的依赖。通过使用方法 <code>T getBean(String name, Class&lt;T&gt; requiredType)</code>，你可以获取到你 bean 的实例。</p>
<p><code>ApplicationContext</code> 让你可以读取并获取 bean 定义，如下面的例子所示：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-Java" data-lang="Java"><span class="line"><span class="cl"><span class="c1">// create and configure beans
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">ApplicationContext</span> <span class="n">context</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ClassPathXmlApplicationContext</span><span class="o">(</span><span class="s">&#34;services.xml&#34;</span><span class="o">,</span> <span class="s">&#34;daos.xml&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// retrieve configured instance
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">PetStoreService</span> <span class="n">service</span> <span class="o">=</span> <span class="n">context</span><span class="o">.</span><span class="na">getBean</span><span class="o">(</span><span class="s">&#34;petStore&#34;</span><span class="o">,</span> <span class="n">PetStoreService</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// use configured instance
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">userList</span> <span class="o">=</span> <span class="n">service</span><span class="o">.</span><span class="na">getUsernameList</span><span class="o">();</span>
</span></span></code></pre></div><p>使用 Groovy 配置，启动过程也类似。它有一个不同的上下文可以感知 Groovy 的实现类（同时也可以理解 XML 的 bean 定义）。下面的例子展示了 Groovy 的配置：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-Java" data-lang="Java"><span class="line"><span class="cl"><span class="n">ApplicationContext</span> <span class="n">context</span> <span class="o">=</span> <span class="k">new</span> <span class="n">GenericGroovyApplicationContext</span><span class="o">(</span><span class="s">&#34;services.groovy&#34;</span><span class="o">,</span> <span class="s">&#34;daos.groovy&#34;</span><span class="o">);</span>
</span></span></code></pre></div><p>最灵活的变化就是 <code>GenericApplicationContext</code> 和读取代理————例如，使用  <code>XmlBeanDefinitionReader</code> 读取 XML 文件中：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-Java" data-lang="Java"><span class="line"><span class="cl"><span class="n">GenericApplicationContext</span> <span class="n">context</span> <span class="o">=</span> <span class="k">new</span> <span class="n">GenericApplicationContext</span><span class="o">();</span>
</span></span><span class="line"><span class="cl"><span class="k">new</span> <span class="n">XmlBeanDefinitionReader</span><span class="o">(</span><span class="n">context</span><span class="o">).</span><span class="na">loadBeanDefinitions</span><span class="o">(</span><span class="s">&#34;services.xml&#34;</span><span class="o">,</span> <span class="s">&#34;daos.xml&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl"><span class="n">context</span><span class="o">.</span><span class="na">refresh</span><span class="o">();</span>
</span></span></code></pre></div><p>你也可以使用 <code>GroovyBeanDefinitionReader</code> 读取 Groovy 文件：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-Java" data-lang="Java"><span class="line"><span class="cl"><span class="n">GenericApplicationContext</span> <span class="n">context</span> <span class="o">=</span> <span class="k">new</span> <span class="n">GenericApplicationContext</span><span class="o">();</span>
</span></span><span class="line"><span class="cl"><span class="k">new</span> <span class="n">GroovyBeanDefinitionReader</span><span class="o">(</span><span class="n">context</span><span class="o">).</span><span class="na">loadBeanDefinitions</span><span class="o">(</span><span class="s">&#34;services.groovy&#34;</span><span class="o">,</span> <span class="s">&#34;daos.groovy&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl"><span class="n">context</span><span class="o">.</span><span class="na">refresh</span><span class="o">();</span>
</span></span></code></pre></div><p>你可以在 <code>ApplicationContext</code> 中混合匹配这样的读取代理，来分别兑取不同的配置文件源里面的 bean 定义。</p>
<p>你也可以使用 <code>getBean</code> 来获取你的 bean 实例对象。<code>ApplicationContext</code> 接口有一些其他的方法用来获取 bean。但是，理想情况下，你的应用代码不会用到它。确实，你的应用代码如果没有对 Spring API 的任何依赖，就不应该调用 <code>getBean()</code> 方法。例如，Spring 和 Web 框架的整合提供了对各种 web 框架元组件的依赖注入，例如 Controller 和 JSF 的bean，这些都可以让你能够通过元数据（例如自动装配）来声明依赖。</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>[译] SpringFramework 文档</title>
      <link>https://anriclee.github.io/posts/spring_framework/directory/</link>
      <pubDate>Sat, 02 Sep 2023 11:46:07 +0800</pubDate>
      
      <guid>https://anriclee.github.io/posts/spring_framework/directory/</guid>
      <description>概述 历史，设计哲学，反馈，开始
核心 IoC容器，事件，资源，i18n，验证，数据绑定，类型转换，SpEL，AOP，AOT
测试 对象 Mock，测试上下文框架，Spring MVC 测试，Web 测试客户端
数据接入 事务，DAO 支持，JDBC，R2DBC，O/R 映射，XML 编码
Web Servlet SpringMVC,WebSocket,SockJS,STOMP 通信
Web 响应式 Spring WebFlux, WebClient, WebSocket, RSocket.
[集成] REST 客户端, JMS, JCA, JMX, Email, 任务, 调度, 缓存, 可见性.
语言 Kotlin, Groovy, Dynamic 语言.
附录 Spring 属性</description>
      <content:encoded><![CDATA[<ul>
<li>
<p><a href="Overview">概述</a> 历史，设计哲学，反馈，开始</p>
</li>
<li>
<p><a href="">核心</a> IoC容器，事件，资源，i18n，验证，数据绑定，类型转换，SpEL，AOP，AOT</p>
</li>
<li>
<p><a href="">测试</a> 对象 Mock，测试上下文框架，Spring MVC 测试，Web 测试客户端</p>
</li>
<li>
<p><a href="">数据接入</a> 事务，DAO 支持，JDBC，R2DBC，O/R 映射，XML 编码</p>
</li>
<li>
<p><a href="">Web Servlet</a> SpringMVC,WebSocket,SockJS,STOMP 通信</p>
</li>
<li>
<p><a href="">Web 响应式</a> Spring WebFlux, WebClient, WebSocket, RSocket.</p>
</li>
<li>
<p>[集成] REST 客户端, JMS, JCA, JMX, Email, 任务, 调度, 缓存, 可见性.</p>
</li>
<li>
<p><a href="">语言</a> Kotlin, Groovy, Dynamic 语言.</p>
</li>
<li>
<p><a href="">附录</a> Spring 属性</p>
</li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>[译] SpringFramework 概述</title>
      <link>https://anriclee.github.io/posts/spring_framework/overview/</link>
      <pubDate>Sat, 02 Sep 2023 11:46:07 +0800</pubDate>
      
      <guid>https://anriclee.github.io/posts/spring_framework/overview/</guid>
      <description>概述 Spring 使得创建 Java 企业级应用更加容易。它提供了你在企业环境下拥抱 Java 语言所需要的一切，支持 JVM 平台上的 Groovy 和 Kotlin 作为备选语言，并且提供了根据应用程序的需求创建多种架构的灵活性。从 SpringFramework 6.0 开始，Spring 需要 Java 17 以上的版本。
Spring 支持广泛的应用场景。在一个大型企业里，应用程序经常会存在很长时间，并且必须运行在一个开发者不能控制升级周期的 JDK 和应用服务器上。 另外一些可能会作为一个内嵌服务器的单独 jar 包，运行在一个云环境里，还有一些可能是一个不需要服务器的独立应用程序（例如批处理或者集成处理工作）。
Spring 是开源的。它有一个庞大而活跃的社群，基于各种实际用例，提供持续反馈。这也帮助了 Spring 在相当长一段时间内成功发展。。
当我们在谈 Spring 时我们在谈什么 “Spring” 这个术语在不同的语境下有着不同的含义。它可以用来表示 SpringFramework 这个项目自身，一切都是从这里开始的（-译者按：梦开始的地方）。随着时间的推移，又构建了一些以 SpringFramework 为基础的 Spring 项目。大部分情况下，当人们谈论 Spring，他们的意思是 Spring 整个系列（-译者按：俗称全家桶）。本参考文档只针对这个基础进行介绍：SpringFramework 本身。
SpringFramework 被分成不同的模块。应用程序可以根据他们所需要的模块进行选择。这些模块中处于核心的是 core container，包括配置模型和依赖注入机制。除此之外，SpringFramework 还对于不同应用架构提供基础支持，包括消息传递、事务以及持久化和 web。它同时也包含了基于 Servlet 的 SpringMVC web 框架以及Spring WebFlux 响应式web框架。
关于这些模块需要注意的是：
Spring 的框架，允许部署到 JDK 9 的模块路径（&amp;ldquo;Jigsaw&amp;rdquo;）。对于在支持 “Jigsaw” 的应用程序中的使用，Spring Framework 5 的 jar 包里面，携带了 “Automatic-Module-Name” 的 manifest entries，它定义了稳定的语言级别模块名（例如：“spring.</description>
      <content:encoded><![CDATA[<h1 id="概述">概述</h1>
<p>Spring 使得创建 Java 企业级应用更加容易。它提供了你在企业环境下拥抱 Java 语言所需要的一切，支持 JVM 平台上的 Groovy 和 Kotlin 作为备选语言，并且提供了根据应用程序的需求创建多种架构的灵活性。从 SpringFramework 6.0 开始，Spring 需要 Java 17 以上的版本。</p>
<p>Spring 支持广泛的应用场景。在一个大型企业里，应用程序经常会存在很长时间，并且必须运行在一个开发者不能控制升级周期的 JDK 和应用服务器上。
另外一些可能会作为一个内嵌服务器的单独 jar 包，运行在一个云环境里，还有一些可能是一个不需要服务器的独立应用程序（例如批处理或者集成处理工作）。</p>
<p>Spring 是开源的。它有一个庞大而活跃的社群，基于各种实际用例，提供持续反馈。这也帮助了 Spring 在相当长一段时间内成功发展。。</p>
<h1 id="当我们在谈-spring-时我们在谈什么">当我们在谈 Spring 时我们在谈什么</h1>
<p>“Spring” 这个术语在不同的语境下有着不同的含义。它可以用来表示 SpringFramework 这个项目自身，一切都是从这里开始的（-译者按：梦开始的地方）。随着时间的推移，又构建了一些以 SpringFramework 为基础的 Spring 项目。大部分情况下，当人们谈论 Spring，他们的意思是 Spring 整个系列（-译者按：俗称全家桶）。本参考文档只针对这个基础进行介绍：SpringFramework 本身。</p>
<p>SpringFramework 被分成不同的模块。应用程序可以根据他们所需要的模块进行选择。这些模块中处于核心的是 core container，包括配置模型和依赖注入机制。除此之外，SpringFramework 还对于不同应用架构提供基础支持，包括消息传递、事务以及持久化和 web。它同时也包含了基于 Servlet 的 SpringMVC web 框架以及Spring WebFlux 响应式web框架。</p>
<p>关于这些模块需要注意的是：</p>
<p>Spring 的框架，允许部署到 JDK 9 的模块路径（&ldquo;Jigsaw&rdquo;）。对于在支持 “Jigsaw” 的应用程序中的使用，Spring Framework 5 的 jar 包里面，携带了 “Automatic-Module-Name” 的 manifest entries，它定义了稳定的语言级别模块名（例如：“spring.core”，“spring.context” 等等），它与 jar 的 artifact 名字独立（ 这些 jar 遵循同样的模式，例如 “spring-core” 和 “spring-context”。 “-” 代替 “.”</p>
<blockquote>
<p>译者按：本人对于 Jigsaw 不太熟悉，等后面熟悉了，再过来修正这一段的翻译。目前，是不知道这段说了什么的。</p>
</blockquote>
<p>当然，Spring 框架中的 jar 包，在 JDK 9 和 JDK 9+ 的 classpath 中，可以继续正常工作。</p>
<h1 id="spring-和-spring-framework-的历史">Spring 和 Spring Framework 的历史</h1>
<p>在 2003 年，为了应对 J2EE 早期规范的复杂性，Spring 应运而生。
虽然一些人认为 Java EE 和他的现代继承者 Jakarta EE 与 Spring 势不两立，但是他们实际上是互为补充的。
Spring 的编程模型不会拥抱 Jakarta EE 平台的规范，相反，它从传统的 EE 的笼罩下面，精心挑选了一些规范，并与之整合：</p>
<ul>
<li>
<p>Servlet API (JSR 340)</p>
</li>
<li>
<p>WebSocket API (JSR 356)</p>
</li>
<li>
<p>Concurrency Utilities (JSR 236)</p>
</li>
<li>
<p>JSON Binding API (JSR 367)</p>
</li>
<li>
<p>Bean Validation (JSR 303)</p>
</li>
<li>
<p>JPA (JSR 338)</p>
</li>
<li>
<p>JMS (JSR 914)</p>
</li>
<li>
<p>如果有必要的话，还有 JTA/JCA 用于事务协商的设置</p>
</li>
</ul>
<p>SpringFramework 还支持应用开发者使用依赖注入规范（JSR 330）和通用注解规范（JSR 250），代替 SpringFramework 提供的 Spring 规范机制。最初，他们都是基于 javax 包的。</p>
<blockquote>
<p>译者按：自由即长久。</p>
</blockquote>
<p>SpringFramework 6.0 里，Spring 已经升级到 Jakarta EE 9（例如：Servlet 5.0+，JPA 3.0+），基于 Jakarta 名称空间，而非传统的 javax 包。
从 EE 9 开始到现在已经支持的 EE 10，Spring 准备对 Jakarta EE 接口的进一步发展提供开箱即用的支持。</p>
<p>SpringFramework 6.0 已经完全兼容 Tomcat 10.1，Jetty 11 和 Undertow 2.3 作为 web 服务器，这其中也抱愧 Hibernate ORM 6.1.</p>
<p>随着时间的推移，Java/Jakarta EE 在应用开发中的角色在不断演进。在 J2EE 和 Spring 的早期，应用被创建后，部署到一个应用服务器上。</p>
<p>今天，在 Spring Boot 的帮助下，应用可以以一种 devops 和云友好的方式创建，内嵌 Servlet 容器，并且易于修改。从 SpringFramework 5 开始，WebFlux 应用甚至不直接使用 Servlet API 就可以在非 Servlet 的服务器上运行起来（例如 Netty）</p>
<p>Spring 持续创新和演进。除了 SpringFramework 之外，还有很多项目，例如 Spring Boot，Spring Security，Spring Data，Spring Cloud，Spring Batch。
值得记住的是：每一个项目都有它自己的源码仓库，问题追踪和发版节奏。可以在 <a href="https://spring.io/projects">spring.io/projects</a> 看到 Spring 项目的完整清单。</p>
<h1 id="设计哲学">设计哲学</h1>
<p>当你了解一个框架时，重要的不是知道它做了什么而是它遵循什么样的准则。SpringFramework 的指导准则如下：</p>
<ul>
<li>在每一个级别上提供选择。Spring 可以让你尽可能晚地推迟做出设计决策。比如，你可以在不更改代码的情况下，改变你的持久化方案。对于其他的基础设施问题，整合其他第三方的 API，这一点同样适用。</li>
<li>兼容并包。Spring 拥抱灵活性，并不介意事情是怎么被完成的。它提供了在不同观念下的诸多需要。</li>
<li>保持较强的向后兼容性。Spring 的演进经过精心管理，在版本之间，几乎没有特别大的变化。Spring 精心挑选 JDK 版本号范围以及第三方库，以方便维护依赖于 Spring 的应用以及库。</li>
<li>精心设计 API。Spring 团队投入了较多的时间和精力设计 API，目的是让 API 更加符合直觉，可以使用很多年，跨越多个版本。</li>
<li>对代码质量设置较高的标准。SpringFramework 重点强调有意义的、及时、精确的 javadoc。它是为数不多的声称拥有干净的代码架构且在不同的包之间没有循环引用的项目之一。</li>
</ul>
<h1 id="开始">开始</h1>
<p>如果你刚开始接触 Spring，你也许会从创建一个基于 SpringBoot 应用开始使用 SpringFramework。SpringBoot 提供了一个快速（固定）的方式来创建可部署生产环境的基于 Spring 的应用。它基于 SpringFramework，喜欢约定优于配置的风格，设计它就是为了让你能够尽可能快地启动和运行。</p>
<p>你可以使用<a href="https://start.spring.io/">start.spring.io</a>来生成一个基本的项目，或者遵循<a href="https://spring.io/guides">&ldquo;Getting Started&rdquo; 指南</a> 例如 <a href="https://spring.io/guides/gs/rest-service/">Getting Started Building a RESTful Web Service</a>。</p>
<p>这些指南都是任务导向且易于理解的，他们中的大部分是基于 SpringBoot。它同时也涵盖了 Spring 产品中的其他项目，这些你可能会在解决某个具体的问题时会使用到。</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>聊点什么</title>
      <link>https://anriclee.github.io/posts/essays/saysomething/</link>
      <pubDate>Wed, 30 Aug 2023 23:26:45 +0800</pubDate>
      
      <guid>https://anriclee.github.io/posts/essays/saysomething/</guid>
      <description>谈心的文章好久没有写了，初秋的夜晚，键盘的敲击声格外响亮，一时竟然不知道从哪儿说起。我从今年开始，格外的怀旧起来。不只是怀念那个青春的八十年代，质朴的九十年代，而且竟然怀念起仿佛刚刚过去的两千年。也许是现在回看，带着滤镜和光影的原因吧。但我着实相信，过去确实比现在更加美丽一些。试问，现在还有什么歌曲能像过去的八九十年代扣人心弦，还有谁能写出像罗大佑那样充满人文情怀的歌词？我不是一个保守的人，现在的歌曲我也会经常听，但摇滚光是呐喊、嘶吼没有反思，民谣只有情绪没有韵味，流行歌曲更是惨不忍听。现在一首歌有四句比较朗朗上口一些，就能风靡一时，然后人们快速遗忘，寻找下一个。人们没法不遗忘，因为实在没有什么好怀念的。
人们在路上疯狂且快速的奔跑着，前面有人但凡有一点点挡道，便会怒从心头起。也许在快速奔跑中，人们才来不及为过去伤怀，风驰电掣，麻木一生。
如果我也这样，多好！
可是，我偏偏要将步伐放慢，歪着头想想，于是总感觉自己是个慢半拍的人。
今年一整年，几乎没有在公众号上发表任何文章，我想找个没人的地方，倾吐一下自己的想法。
失落与大门 今年是让我特别失落的一年，特别失落。
还有几年，就到传说中的中年危机了。坦白说，我直到今年才有些许明白，中年危机的真实含义。
所谓中年危机，并不单单是一个经济的问题，而是方方面面。
这个尴尬的年纪，朋友帮不上你，于是友情危机；妻子不理解你，于是婚姻危机；父母埋怨你，于是亲情危机。各方面的危机，想汹涌的几股暗流，汇集而来，向涉世未深的你迎面击来。
这个年纪，看似血气方刚，实则是最脆弱的年纪，没有经验的积淀，没有人脉的积淀，只有你自己硬抗，像不喝药，凭借自己的身体素质对抗一场重感冒。
扛过去，就会好很多。后面遇到再多糟心事，有了前面的抗体，总是会好过一些。
呵，男人四十！
今年的夏天格外热，但是在每次下班骑车回家的路上，听着歌，经常感觉浑身一阵冷战。也许是突然被某句歌词所触动，伤怀往事、怀疑信念。
于是有一阵子，我囤了很多书。最明显的变化是，我开始看外国小说了，以前硬着头皮两次入门、两次放弃的《安娜卡列尼娜》，这次竟然能够看的津津有味，甚至有时候，会有冲动，买下托尔斯泰的《战争与和平》这部据说很冗长的巨著一看。
年龄大了，学会妥协了。年少时，看那些翻译过来的腔调，就是不喜欢看不下去，我从来不理解为什么要冗长的心理描写，为什么人物的每一句台词，中间都要被“xxx说”拦腰斩为两截，如此种种。
今年突然明白了，这就是文化差异，不同地区的表达习惯，是会有不同的，不只是语汇的区分。我们应该注重的是书里面的所蕴含的光辉思想以及作者倾注的满腔热情。我们在《史记-项羽本纪》里面看不到一句项羽的心理描写，仅凭几句念白，几句描写，一个英雄就这样被人千年。
所以，中国会有山水画，笔墨留白，却依然已经满怀，而西方的工笔画、油画也依然是情绪饱满的。
留白也有水货，浓墨重彩也有精品。
这么想着，一道艺术的大门就这样为我敞开。
思想越包容，视野越广阔。有些时候，就是需要换一个视角和思维的转变。
AI 与艺术 AI 是今年的热词，仿佛一夜之间，什么都可以用 AI 做了。
就在这孤独的一年，我的阅读量和艺术视角，刻意地伸长，触及到了我之前出于懒惰不会触及的地方。就凭我简单的探索，我就知道 AI 根本没戏，虽然，我是一个技术人，但是我从来不认为 AI 能够写出那些不朽的作品，能够勾勒出那些美妙的线条。
很简单，因为 AI 不是人，没有意识和灵魂。
不是人，所以不会像人一样犯错，与此同时，也缺少了很多偶然。须知，很多艺术就是来源于偶然的灵光一现。
当然，还有一个重要的因素，就是伟大的读者催生伟大的作品，我们很难想象，被 AI 和短视频喂饱的读者们会有什么眼光去苛求那些内容的生产者。
想来也荒唐，到底是谁训练了谁？
将来的市场，AI 肯定是能挤掉一部分人的作品的。那些平庸的、毫无新意和灵魂的作品，会被 AI 取而代之。这或许倒是一个良币驱逐劣币的过程。
试看当今的歌坛，有多惨不忍睹就知道，科技能帮助人在艺术道路上走一段路，可是，剩下的路还是要靠人类自己走。
这是人类的宿命。
AI 也没有用。
也许，将来 AI 可能会突然大爆发，像人一样有了意识，但也是需要和人一样有痛苦的经历的。这样，AI 既有了人的意识，又有了人的经历和痛苦，那就是人类无疑了。
也许是 AI 被我们人类同化了吧？不知道是否可以当成人类的一场惨胜。
人文与科技 自己今年的时间，比往年多了一些，想做的事情太多，结果现在一件事也没有做成。自己不甘于只做一个消费者，也想做一个内容的生产者。
但生成什么内容，却让自己又一次开始了犹豫和纠结。
也许，这也是我的宿命，我注定会饿死在人文与科技的十字路口。
人文类的内容，是我的兴趣所在，但是目前的境况很是不尽人意，言论管控空前，万马齐喑。再加上饭圈文化和粉丝量的有限和题材内容的饱和，很难找到一个切入口完成一些看似“伟大”的事情。
科技类的内容，也是我想做的，看起来比人文的圈子要简单一些，但是，也比较枯燥一些，而且，自己驾驭起来，并不如人文类的容易一些，粉丝量的成长幅度，肯定比不上人文类的 up 主，毕竟大家都想在下班后，躺在床上，听听历史的八卦，谁会主动坐在桌前，听你分享一些你自己以为讲的很明白的原理和架构？
但是，自己毕竟是吃技术这碗饭的，而且自己在今年换工作之后，看到身边有的人无知的像一头猪一样，不禁觉得可笑之余，转念一想，自己是否在另一些人的眼里，也无知得可笑呢？于是，我立志，要把自己的技术短板填补上，尽量不看起来像一头猪。
综合起来，貌似技术up这条路，自己会走得更踏实一些，而且人文类的内容，要想做得出彩，关键在于自己阅历的积淀和对世情的理解。同样是看《潜伏》，有的人能分析地头头是道，非经一番历练之人，不可懂其中深味也。
希望与失望 当蜘蛛网无情地查封了我的炉台，
当灰烬的余烟叹息着贫困的悲哀，
我依然固执地铺平失望的灰烬，
用美丽的雪花写下：相信未来。</description>
      <content:encoded><![CDATA[<p>谈心的文章好久没有写了，初秋的夜晚，键盘的敲击声格外响亮，一时竟然不知道从哪儿说起。我从今年开始，格外的怀旧起来。不只是怀念那个青春的八十年代，质朴的九十年代，而且竟然怀念起仿佛刚刚过去的两千年。也许是现在回看，带着滤镜和光影的原因吧。但我着实相信，过去确实比现在更加美丽一些。试问，现在还有什么歌曲能像过去的八九十年代扣人心弦，还有谁能写出像罗大佑那样充满人文情怀的歌词？我不是一个保守的人，现在的歌曲我也会经常听，但摇滚光是呐喊、嘶吼没有反思，民谣只有情绪没有韵味，流行歌曲更是惨不忍听。现在一首歌有四句比较朗朗上口一些，就能风靡一时，然后人们快速遗忘，寻找下一个。人们没法不遗忘，因为实在没有什么好怀念的。</p>
<p>人们在路上疯狂且快速的奔跑着，前面有人但凡有一点点挡道，便会怒从心头起。也许在快速奔跑中，人们才来不及为过去伤怀，风驰电掣，麻木一生。</p>
<p>如果我也这样，多好！</p>
<p>可是，我偏偏要将步伐放慢，歪着头想想，于是总感觉自己是个慢半拍的人。</p>
<p>今年一整年，几乎没有在公众号上发表任何文章，我想找个没人的地方，倾吐一下自己的想法。</p>
<h1 id="失落与大门">失落与大门</h1>
<p>今年是让我特别失落的一年，特别失落。</p>
<p>还有几年，就到传说中的中年危机了。坦白说，我直到今年才有些许明白，中年危机的真实含义。</p>
<p>所谓中年危机，并不单单是一个经济的问题，而是方方面面。</p>
<p>这个尴尬的年纪，朋友帮不上你，于是友情危机；妻子不理解你，于是婚姻危机；父母埋怨你，于是亲情危机。各方面的危机，想汹涌的几股暗流，汇集而来，向涉世未深的你迎面击来。</p>
<p>这个年纪，看似血气方刚，实则是最脆弱的年纪，没有经验的积淀，没有人脉的积淀，只有你自己硬抗，像不喝药，凭借自己的身体素质对抗一场重感冒。</p>
<p>扛过去，就会好很多。后面遇到再多糟心事，有了前面的抗体，总是会好过一些。</p>
<p>呵，男人四十！</p>
<p>今年的夏天格外热，但是在每次下班骑车回家的路上，听着歌，经常感觉浑身一阵冷战。也许是突然被某句歌词所触动，伤怀往事、怀疑信念。</p>
<p>于是有一阵子，我囤了很多书。最明显的变化是，我开始看外国小说了，以前硬着头皮两次入门、两次放弃的《安娜卡列尼娜》，这次竟然能够看的津津有味，甚至有时候，会有冲动，买下托尔斯泰的《战争与和平》这部据说很冗长的巨著一看。</p>
<p>年龄大了，学会妥协了。年少时，看那些翻译过来的腔调，就是不喜欢看不下去，我从来不理解为什么要冗长的心理描写，为什么人物的每一句台词，中间都要被“xxx说”拦腰斩为两截，如此种种。</p>
<p>今年突然明白了，这就是文化差异，不同地区的表达习惯，是会有不同的，不只是语汇的区分。我们应该注重的是书里面的所蕴含的光辉思想以及作者倾注的满腔热情。我们在《史记-项羽本纪》里面看不到一句项羽的心理描写，仅凭几句念白，几句描写，一个英雄就这样被人千年。</p>
<p>所以，中国会有山水画，笔墨留白，却依然已经满怀，而西方的工笔画、油画也依然是情绪饱满的。</p>
<p>留白也有水货，浓墨重彩也有精品。</p>
<p>这么想着，一道艺术的大门就这样为我敞开。</p>
<p>思想越包容，视野越广阔。有些时候，就是需要换一个视角和思维的转变。</p>
<h1 id="ai-与艺术">AI 与艺术</h1>
<p>AI 是今年的热词，仿佛一夜之间，什么都可以用 AI 做了。</p>
<p>就在这孤独的一年，我的阅读量和艺术视角，刻意地伸长，触及到了我之前出于懒惰不会触及的地方。就凭我简单的探索，我就知道 AI 根本没戏，虽然，我是一个技术人，但是我从来不认为 AI 能够写出那些不朽的作品，能够勾勒出那些美妙的线条。</p>
<p>很简单，因为 AI 不是人，没有意识和灵魂。</p>
<p>不是人，所以不会像人一样犯错，与此同时，也缺少了很多偶然。须知，很多艺术就是来源于偶然的灵光一现。</p>
<p>当然，还有一个重要的因素，就是伟大的读者催生伟大的作品，我们很难想象，被 AI 和短视频喂饱的读者们会有什么眼光去苛求那些内容的生产者。</p>
<p>想来也荒唐，到底是谁训练了谁？</p>
<p>将来的市场，AI 肯定是能挤掉一部分人的作品的。那些平庸的、毫无新意和灵魂的作品，会被 AI 取而代之。这或许倒是一个良币驱逐劣币的过程。</p>
<p>试看当今的歌坛，有多惨不忍睹就知道，科技能帮助人在艺术道路上走一段路，可是，剩下的路还是要靠人类自己走。</p>
<p>这是人类的宿命。</p>
<p>AI 也没有用。</p>
<p>也许，将来 AI 可能会突然大爆发，像人一样有了意识，但也是需要和人一样有痛苦的经历的。这样，AI 既有了人的意识，又有了人的经历和痛苦，那就是人类无疑了。</p>
<p>也许是 AI 被我们人类同化了吧？不知道是否可以当成人类的一场惨胜。</p>
<h1 id="人文与科技">人文与科技</h1>
<p>自己今年的时间，比往年多了一些，想做的事情太多，结果现在一件事也没有做成。自己不甘于只做一个消费者，也想做一个内容的生产者。</p>
<p>但生成什么内容，却让自己又一次开始了犹豫和纠结。</p>
<p>也许，这也是我的宿命，我注定会饿死在人文与科技的十字路口。</p>
<p>人文类的内容，是我的兴趣所在，但是目前的境况很是不尽人意，言论管控空前，万马齐喑。再加上饭圈文化和粉丝量的有限和题材内容的饱和，很难找到一个切入口完成一些看似“伟大”的事情。</p>
<p>科技类的内容，也是我想做的，看起来比人文的圈子要简单一些，但是，也比较枯燥一些，而且，自己驾驭起来，并不如人文类的容易一些，粉丝量的成长幅度，肯定比不上人文类的 up 主，毕竟大家都想在下班后，躺在床上，听听历史的八卦，谁会主动坐在桌前，听你分享一些你自己以为讲的很明白的原理和架构？</p>
<p>但是，自己毕竟是吃技术这碗饭的，而且自己在今年换工作之后，看到身边有的人无知的像一头猪一样，不禁觉得可笑之余，转念一想，自己是否在另一些人的眼里，也无知得可笑呢？于是，我立志，要把自己的技术短板填补上，尽量不看起来像一头猪。</p>
<p>综合起来，貌似技术up这条路，自己会走得更踏实一些，而且人文类的内容，要想做得出彩，关键在于自己阅历的积淀和对世情的理解。同样是看《潜伏》，有的人能分析地头头是道，非经一番历练之人，不可懂其中深味也。</p>
<h1 id="希望与失望">希望与失望</h1>
<blockquote>
<p>当蜘蛛网无情地查封了我的炉台，</p>
<p>当灰烬的余烟叹息着贫困的悲哀，</p>
<p>我依然固执地铺平失望的灰烬，</p>
<p>用美丽的雪花写下：相信未来。</p>
<p>当我的紫葡萄化为深秋的露水，</p>
<p>当我的鲜花依偎在别人的情怀，</p>
<p>我依然固执地用凝霜的枯藤，</p>
<p>在凄凉的大地上写下：相信未来。</p>
<p>我要用手指那涌向天边的排浪，</p>
<p>我要用手掌那托起太阳的大海，</p>
<p>摇曳着曙光那支温暖漂亮的笔杆，</p>
<p>用孩子的笔体写下：相信未来。</p>
<p>我之所以坚定地相信未来，</p>
<p>是我相信未来人们的眼睛——她有拨开历史风尘的睫毛，</p>
<p>她有看透岁月篇章的瞳孔。</p>
<p>不管人们对于我们腐烂的皮肉，</p>
<p>那些迷途的惆怅，失败的苦痛，</p>
<p>是寄予感动的热泪，深切的同情，</p>
<p>还是给以轻蔑的微笑，辛辣的嘲讽。</p>
<p>我坚信人们对于我们的脊骨，</p>
<p>那无数次地探索、迷途、失败和成功，</p>
<p>一定会给予热情、客观、公正的评定，</p>
<p>是的，我焦急地等待着他们的评定。</p>
<p>朋友，坚定地相信未来吧，</p>
<p>相信不屈不挠的努力，</p>
<p>相信战胜死亡的年轻，</p>
<p>相信未来，热爱生命。</p>
<p>—————————— 食指《相信未来》</p>
</blockquote>
<p>诗人食指，在那个黑暗的年代，竟然依然能写出来如此光明的诗；我们当今，虽然也在往更糟的方向狂奔，但是至少目前还比那个年代强一些。
或许，我们应该用饱含热泪的眼睛，永远期待未来。</p>
<p>2023 年 8 月 31 日夜。</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>《金瓶梅》</title>
      <link>https://anriclee.github.io/posts/gold_bottle/1/</link>
      <pubDate>Sun, 07 May 2023 23:38:33 +0800</pubDate>
      
      <guid>https://anriclee.github.io/posts/gold_bottle/1/</guid>
      <description>碎碎念。</description>
      <content:encoded><![CDATA[<p>碎碎念。</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>《红楼梦》碎碎念</title>
      <link>https://anriclee.github.io/posts/stone/summary/</link>
      <pubDate>Sun, 07 May 2023 23:15:53 +0800</pubDate>
      
      <guid>https://anriclee.github.io/posts/stone/summary/</guid>
      <description>个人读《红楼梦》之所感所思，想到哪儿，写到哪儿，不拘章法，也无体系，不求闻达，但求深思。</description>
      <content:encoded><![CDATA[<p>个人读《红楼梦》之所感所思，想到哪儿，写到哪儿，不拘章法，也无体系，不求闻达，但求深思。</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Telegram bot 入门实践</title>
      <link>https://anriclee.github.io/posts/telegram_bot/</link>
      <pubDate>Sat, 11 Jun 2022 11:43:42 +0800</pubDate>
      
      <guid>https://anriclee.github.io/posts/telegram_bot/</guid>
      <description>什么是 Bot Bot 的概念在官网的介绍稍微有点繁琐和复杂，详细可以了解官网介绍，
简单来说，bot 就是你在 telegram 中的一个特殊账号，你申请了 bot，这个 bot 就是你的代理人，你发号施令到 bot，bot 会响应你的指令，仅此而已。
申请 bot 需要找 BotFather（名字起的很形象），具体过程官网说的比较详细，此处不赘言。但是需要强调的一点是，bot 仅仅是你的代理人而已，真正执行你指令的是你自己部署的脚本，如果你不部署自己的脚本，在 bot 中输入指令，是没有任何响应的。
你、bot和你部署的脚本关系如下:
脚本 上面说过了，bot 只是你在 telegram 的一个代理，真正干活的是你的脚本。既然自己写脚本，就会存在两个问题：接受指令、做出响应。
接受指令 对于如何让脚本接受指令，官方提供了两种思路：推模式 、拉模式。
拉模式 这种模式，官方不太推荐。简单而言，就是自己部署一个脚本，不断执行 get 请求，获取自己 bot 的更新信息，就好比一个仆人一直在问你：
有没有需要我做的？
有没有需要我做的？
有没有需要我做的？
询问的方式也比较简单：
curl -X GET https://api.telegram.org/bot[token]/getUpdates 这里的 token，就是上面申请 bot 完毕后，得到的 token， 出于脱敏，我使用 [token] 代替，下同。这种方法比较笨拙，轮询的频次太高和太低都不行，而且你在 bot 中发布一条指令后，可能并不能够马上得到执行，会有延迟。
这种方式的好处是：可以让 bot 启在本地，不需要部署到服务器上，因为 telegram 不知道你的存在，他也不需要知道你的存在。
推模式 这种方式是官方比较推荐的一种方式，这种类似事件驱动的原理。只有有任务了，才会通知脚本去做。但前提是：在向 bot 发号施令前，需要在 bot 中注册一个 callback url。
bot 在接受你的指令后，会调用此 url，通知你的脚本，让他执行任务。
注册方式也比较简单：</description>
      <content:encoded><![CDATA[<h1 id="什么是-bot">什么是 Bot</h1>
<p>Bot 的概念在官网的介绍稍微有点繁琐和复杂，详细可以了解<a href="https://core.telegram.org/bots">官网介绍</a>，</p>
<p>简单来说，bot 就是你在 telegram 中的一个特殊账号，你申请了 bot，这个 bot 就是你的代理人，你发号施令到 bot，bot 会响应你的指令，仅此而已。</p>
<p>申请 bot 需要找 BotFather（名字起的很形象），具体过程官网说的比较详细，此处不赘言。但是需要强调的一点是，bot 仅仅是你的代理人而已，真正执行你指令的是你自己部署的脚本，如果你不部署自己的脚本，在 bot 中输入指令，是没有任何响应的。</p>
<p>你、bot和你部署的脚本关系如下:</p>
<p>
  <img loading="lazy" src="https://raw.githubusercontent.com/anriclee/diagramStorage/master/telegram.drawio.png" alt="&amp;ldquo;你、bot和你部署的脚本&amp;rdquo;"  /></p>
<h1 id="脚本">脚本</h1>
<p>上面说过了，bot 只是你在 telegram 的一个代理，真正干活的是你的脚本。既然自己写脚本，就会存在两个问题：接受指令、做出响应。</p>
<h2 id="接受指令">接受指令</h2>
<p>对于如何让脚本接受指令，官方提供了两种思路：推模式 、拉模式。</p>
<ul>
<li>拉模式</li>
</ul>
<p>这种模式，官方不太推荐。简单而言，就是自己部署一个脚本，不断执行 get 请求，获取自己 bot 的更新信息，就好比一个仆人一直在问你：</p>
<p>有没有需要我做的？</p>
<p>有没有需要我做的？</p>
<p>有没有需要我做的？</p>
<p>询问的方式也比较简单：</p>
<pre tabindex="0"><code>curl -X GET https://api.telegram.org/bot[token]/getUpdates
</code></pre><p>这里的 token，就是上面申请 bot 完毕后，得到的 token， 出于脱敏，我使用 [token] 代替，下同。这种方法比较笨拙，轮询的频次太高和太低都不行，而且你在 bot 中发布一条指令后，可能并不能够马上得到执行，会有延迟。</p>
<p>这种方式的好处是：可以让 bot 启在本地，不需要部署到服务器上，因为 telegram 不知道你的存在，他也不需要知道你的存在。</p>
<ul>
<li>推模式</li>
</ul>
<p>这种方式是官方比较推荐的一种方式，这种类似事件驱动的原理。只有有任务了，才会通知脚本去做。但前提是：在向 bot 发号施令前，需要在 bot 中注册一个 callback url。</p>
<p>bot 在接受你的指令后，会调用此 url，通知你的脚本，让他执行任务。</p>
<p>注册方式也比较简单：</p>
<pre tabindex="0"><code>curl -X POST https://api.telegram.org/bot[token]/setWebhook -H &#34;Content-type: application/json&#34; -d &#39;{&#34;url&#34;: &#34;[YOUR_URL]&#34;}
</code></pre><p>使用这种方式，会比上一种稍微麻烦一点，需要你部署的服务能够支持 https（这也是为了安全起见）。</p>
<h3 id="响应指令">响应指令</h3>
<p>收到 telegram 的指令后，如何发送消息到 telegram 频道呢？笔者对 golang 较为熟悉，所以采用了 golang 的方式进行响应。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-Golang" data-lang="Golang"><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">Handler</span><span class="p">(</span><span class="nx">w</span> <span class="nx">http</span><span class="p">.</span><span class="nx">ResponseWriter</span><span class="p">,</span> <span class="nx">r</span> <span class="o">*</span><span class="nx">http</span><span class="p">.</span><span class="nx">Request</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">err</span> <span class="o">:=</span> <span class="nx">r</span><span class="p">.</span><span class="nf">ParseForm</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">log</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;parse form values failed:%+v&#34;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">body</span><span class="p">,</span> <span class="nx">_</span> <span class="o">:=</span> <span class="nx">r</span><span class="p">.</span><span class="nf">GetBody</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="nx">bytes</span><span class="p">,</span> <span class="nx">_</span> <span class="o">:=</span> <span class="nx">io</span><span class="p">.</span><span class="nf">ReadAll</span><span class="p">(</span><span class="nx">body</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">msg</span> <span class="o">:=</span> <span class="nb">string</span><span class="p">(</span><span class="nx">bytes</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// ...... 读取到 query 参数和 body 后，可以进行各种逻辑操作
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Fprintf</span><span class="p">(</span><span class="nx">w</span><span class="p">,</span> <span class="s">&#34;result:&#34;</span><span class="o">+</span><span class="nx">content</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>上面的代码使用到了一个<a href="https://github.com/go-telegram-bot-api/telegram-bot-api">开源库</a>，他替我们封装好了api（当然也可以自己按照 telegram 的协议组装消息）。</p>
<h2 id="部署脚本">部署脚本</h2>
<p>现在有了 bot，也有了响应 bot 的脚本逻辑，只剩部署脚本到服务器了。我们当然不能仅仅为了响应一条指令租一个个人服务器吧（土豪除外）。</p>
<p>笔者用的是 Vercel 平台，使用 Vercel 部署 ServeLess 的 Function 还是比较方便的，部署过程，跟随步骤指导一步一步来比较容易。</p>
<p><a href="https://vercel.com/">https://vercel.com/</a></p>
<p>部署好之后，可以先在本地执行下 curl 请求，测试没问题后，将该 url 设置为 telegram bot 的 callback 函数即可。</p>
<h2 id="使用">使用</h2>
<p>学会一个东西的主要方法，就是疯狂的使用它。本人出入办公单位，都需要扫门禁二维码，不胜其烦，需要关注微信小程序，然后点击门禁二维码，全程既慢且麻烦。</p>
<p>在一次偶然抓包之后，发现获取二维码的请求是一个简单的 http post 请求，且密码为明文。</p>
<p>这次体验到了 Serveless 的方便，出于 bot 练习之故，可以将该请求封装到 script 中，部署到 vercel 平台上，在 telegram 申请一个门禁机器人，打开之后，发送指令到 script，script 发起 post 调用，获取到结果后，渲染为二维码即可。</p>
<p>渲染二维码使用到的<a href="https://github.com/skip2/go-qrcode">开源包</a></p>
<h2 id="请求安全性校验">请求安全性校验</h2>
<p>为了安全起见，有人恶意调用你的脚本 url，可以将自己脚本服务的 api 的前缀设置为 token（token 没有人知道，所以也无法知道的 api）。vercel 平台支持通过 vercel.json 进行请求的重定向，可以通过正则表达式，将 <code>randomwdocd23123123[token 示例]/api</code> 转发到 <code>/api</code>。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-Json" data-lang="Json"><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">   <span class="nt">&#34;routes&#34;</span><span class="p">:[</span>
</span></span><span class="line"><span class="cl">      <span class="p">{</span>
</span></span><span class="line"><span class="cl">         <span class="nt">&#34;src&#34;</span><span class="p">:</span><span class="s2">&#34;/random/(?&lt;id&gt;[^/]*)/api/hello/&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">         <span class="nt">&#34;dest&#34;</span><span class="p">:</span><span class="s2">&#34;/api/hello.go?id=$id&#34;</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span>
</span></span><span class="line"><span class="cl">   <span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>这是利用了官方提供的重定向的特性，详细可以参考<a href="https://vercel.com/docs/project-configuration#">官网</a></p>
<h1 id="reference">reference</h1>
<p>1.<a href="https://www.marclittlemore.com/serverless-telegram-chatbot-vercel/">Build a serverless Telegram chatbot deployed using Vercel</a></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>基于 PostgreSQL 的群聊搜索实践</title>
      <link>https://anriclee.github.io/posts/pg/</link>
      <pubDate>Thu, 13 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>https://anriclee.github.io/posts/pg/</guid>
      <description>背景 2021年年初，探探上线了群聊功能，并且支持按照群名进行模糊搜索。
对于复杂场景的搜索，业界一般使用非常流行的 ElasticSearch。由于我们的群数据较少，截止到目前还没有达到千万级的量级，且搜索场景比较简单，而 PostgreSQL 对全文搜索又支持得比较好，所以选择了 PostgreSQL 来实现群搜索需求。 在使用 PostgreSQL 做群搜索的过程中，也经历了由简单到复杂的迭代过程，中间也踩了不少坑。 下面的几个例子说明了方案的演进过程和我们的优化思路，希望能够对大家有所帮助。
LIKE 模糊查询 提到模糊搜索，最简单的办法就是对搜索列进行 like 匹配： 在输入词的前后加上 % 即可,如下所示:
SELECT * FROM groups WHERE name LIKE &amp;#39;%探探%&amp;#39;; 这种方案可行是可行了，但是实现过于简单粗暴。对此方案进行测试：
建一张简单的表进行测试，表结构如下：
lixuehan=# \d groups; Table &amp;#34;public.groups&amp;#34; Column | Type | Collation | Nullable | Default --------+-----------------------+-----------+----------+------------------------------------ id | bigint | | not null | nextval(&amp;#39;groups_id_seq&amp;#39;::regclass) name | character varying(50) | | | Indexes: &amp;#34;groups_pkey&amp;#34; PRIMARY KEY, btree (id) 表中只有两列：主键 id 以及群名 name。</description>
      <content:encoded><![CDATA[<h2 id="背景">背景</h2>
<p>2021年年初，探探上线了群聊功能，并且支持按照群名进行模糊搜索。</p>
<p>对于复杂场景的搜索，业界一般使用非常流行的 ElasticSearch。由于我们的群数据较少，截止到目前还没有达到千万级的量级，且搜索场景比较简单，而 PostgreSQL 对全文搜索又支持得比较好，所以选择了 PostgreSQL 来实现群搜索需求。
在使用 PostgreSQL 做群搜索的过程中，也经历了由简单到复杂的迭代过程，中间也踩了不少坑。 下面的几个例子说明了方案的演进过程和我们的优化思路，希望能够对大家有所帮助。</p>
<h2 id="like-模糊查询">LIKE 模糊查询</h2>
<p>提到模糊搜索，最简单的办法就是对搜索列进行 like 匹配： 在输入词的前后加上 <code>%</code> 即可,如下所示:</p>
<pre tabindex="0"><code>SELECT * FROM groups WHERE name LIKE &#39;%探探%&#39;;
</code></pre><p>这种方案可行是可行了，但是实现过于简单粗暴。对此方案进行测试：</p>
<p>建一张简单的表进行测试，表结构如下：</p>
<pre tabindex="0"><code>lixuehan=# \d groups;
                                   Table &#34;public.groups&#34;
 Column |         Type          | Collation | Nullable |              Default
--------+-----------------------+-----------+----------+------------------------------------
 id     | bigint                |           | not null | nextval(&#39;groups_id_seq&#39;::regclass)
 name   | character varying(50) |           |          |
Indexes:
    &#34;groups_pkey&#34; PRIMARY KEY, btree (id)
</code></pre><p>表中只有两列：主键 <code>id</code> 以及群名 <code>name</code>。</p>
<pre tabindex="0"><code>create or replace function gen_hanzi(int) returns text as $$
declare
    res text;
begin
    if $1 &gt;=1 then
        select string_agg(chr(19968+(random()*20901)::int), &#39;&#39;) into res from generate_series(1,$1);
        return res;
    end if;
    return null;
end;
$$ language plpgsql strict;
</code></pre><p><code>gen_hanzi</code> 是一个随机生成汉字的函数，我们使用一个该函数构造 100w 条数据，插入到该表中。</p>
<pre tabindex="0"><code>lixuehan=# insert into groups(name) select gen_hanzi(20) from generate_series(1,1000000);
INSERT 0 1000000
lixuehan=# select count(*) from groups;
 count
--------
 1000000
(1 row)
</code></pre><p>现在开始对上表根据 <code>name</code> 列进行 like 搜索。</p>
<pre tabindex="0"><code>SELECT * FROM groups WHERE name LIKE &#39;%探探%&#39;;
</code></pre><p>查看其执行计划</p>
<pre tabindex="0"><code>lixuehan=# explain analyze select * from groups where name like &#39;%探探%&#39;;
                                                       QUERY PLAN
------------------------------------------------------------------------------------------------------------------------
 Gather  (cost=1000.00..20321.24 rows=110 width=69) (actual time=0.388..116.679 rows=1 loops=1)
   Workers Planned: 2
   Workers Launched: 2
   -&gt;  Parallel Seq Scan on groups  (cost=0.00..19310.24 rows=46 width=69) (actual time=64.666..101.982 rows=0 loops=3)
         Filter: ((name)::text ~~ &#39;%探探%&#39;::text)
         Rows Removed by Filter: 366671
 Planning Time: 0.182 ms
 Execution Time: 116.694 ms
</code></pre><p>搜索执行耗时接近 <code>117ms</code>，全表扫描，显然有优化空间。</p>
<h3 id="建-btree-索引">建 Btree 索引</h3>
<p>在 PostgreSQL 官方网站上看到了这样一句话：</p>
<blockquote>
<p>The optimizer can also use a B-tree index for queries involving the pattern matching operators LIKE and ~
if the pattern is a constant and is anchored to the beginning of the string —
for example, col LIKE &lsquo;foo%&rsquo; or col ~ &lsquo;^foo&rsquo;, <strong>but not col LIKE &lsquo;%bar&rsquo;</strong>.</p>
</blockquote>
<p>官方推荐的做法是给搜索列建立 btree 索引，但是不支持前模糊查询（为避免歧义，这里的「前模糊查询」指的是前缀不确定的查询，「后模糊查询」指的是后缀不确定的查询，后面不再赘述）。</p>
<p>于是，我们尝试对 <code>name</code> 列构建 <code>btree</code> 索引。</p>
<pre tabindex="0"><code>create index group_name_idx on groups using btree(name);
</code></pre><p>然后再对该表执行查询，分别执行前模糊、后模糊和两边均模糊三种：</p>
<pre tabindex="0"><code>lixuehan=# explain analyze select * from groups where name like &#39;%探探大群%&#39;;
                                                       QUERY PLAN
-------------------------------------------------------------------------------------------------------------------------
 Gather  (cost=1000.00..20321.24 rows=110 width=127) (actual time=0.158..108.548 rows=1 loops=1)
   Workers Planned: 2
   Workers Launched: 2
   -&gt;  Parallel Seq Scan on groups  (cost=0.00..19310.24 rows=46 width=127) (actual time=66.183..101.712 rows=0 loops=3)
         Filter: ((name)::text ~~ &#39;%探探大群%&#39;::text)
         Rows Removed by Filter: 366671
 Planning Time: 0.098 ms
 Execution Time: 108.756 ms
(8 rows)

lixuehan=# explain analyze select * from groups where name like &#39;探探大群%&#39;;
                                                         QUERY PLAN
----------------------------------------------------------------------------------------------------------------------------
 Index Scan using groups_name_idx on groups  (cost=0.55..8.57 rows=110 width=127) (actual time=0.810..0.811 rows=1 loops=1)
   Index Cond: (((name)::text &gt;= &#39;探探大群&#39;::text) AND ((name)::text &lt; &#39;探探大羥&#39;::text))
   Filter: ((name)::text ~~ &#39;探探大群%&#39;::text)
 Planning Time: 1.229 ms
 Execution Time: 0.829 ms
(5 rows)

lixuehan=# explain analyze select * from groups where name like &#39;%探探大群&#39;;
                                                       QUERY PLAN
------------------------------------------------------------------------------------------------------------------------
 Gather  (cost=1000.00..20321.24 rows=110 width=127) (actual time=0.161..104.288 rows=1 loops=1)
   Workers Planned: 2
   Workers Launched: 2
   -&gt;  Parallel Seq Scan on groups  (cost=0.00..19310.24 rows=46 width=127) (actual time=64.530..98.686 rows=0 loops=3)
         Filter: ((name)::text ~~ &#39;%探探大群&#39;::text)
         Rows Removed by Filter: 366671
 Planning Time: 0.094 ms
 Execution Time: 104.315 ms
(8 rows)
</code></pre><p>可以看到，<strong>只有在执行后模糊查询时</strong>，命中索引，耗时缩短到了 <code>0.829ms</code>。</p>
<p>不支持前模糊查询没有关系，再建一个反向索引即可：</p>
<pre tabindex="0"><code>CREATE INDEX ON groups(reverse(name));
</code></pre><p>执行搜索时，执行反向查询，如下：</p>
<pre tabindex="0"><code>select * from groups where reverse(name) like reverse(&#39;%探探&#39;);
</code></pre><p>查看其执行计划：</p>
<pre tabindex="0"><code>Bitmap Heap Scan on groups  (cost=292.93..10708.01 rows=5500 width=127)
   Filter: (reverse((name)::text) ~~ &#39;探探%&#39;::text)
   -&gt;  Bitmap Index Scan on groups_reverse_idx  (cost=0.00..291.55 rows=5500 width=0)
         Index Cond: ((reverse((name)::text) &gt;= &#39;探探&#39;::text) AND (reverse((name)::text) &lt; &#39;探掣&#39;::text))
(4 rows)
</code></pre><p>可以看到已经命中了 <code>groups_reverse_idx</code> 索引。</p>
<p>这样，在业务代码中最多执行两次，即可实现前后模糊搜索（虽然看起来比较笨，但是也勉强实现了需求）。但是接下来，遇到的问题让人感到头疼。</p>
<p>在执行简单测试时，发现我们的测试环境可以走索引，但是生产环境却不能！！！</p>
<p>在查询资料后，得知这种模糊查询命中索引的方案跟数据库的 <code>Locale</code> 设置有关系，而当时我们生产环境的设置和测试环境的 <code>Locale</code> 设置是不一样的。</p>
<p>可以执行下面的命令查询一个库的 <code>Locale</code> 设置。</p>
<pre tabindex="0"><code>lixuehan=# \l+ lixuehan
                                            List of databases
   Name   |  Owner   | Encoding | Collate | Ctype | Access privileges | Size  | Tablespace | Description
----------+----------+----------+---------+-------+-------------------+-------+------------+-------------
 lixuehan | lixuehan | UTF8     | C       | C     |                   | 28 MB | pg_default |
(1 row)
</code></pre><p>这里的 <code>Collate</code> 和 <code>Ctype</code> 就是跟 <code>Locale</code> 相关的两个参数，在 <code>Ctype</code> 为 <code>en_US.UTF-8</code> 时，直接对搜索列建 <code>Btree</code> 索引，无法实现预期效果。</p>
<p>上面我们用来举例的数据库，正好 <code>Ctype</code> 和 <code>Collate</code> 均为 <code>C</code>，是支持模糊搜索的。对于这两个参数的设置，官网有如下描述：</p>
<blockquote>
<p>Some locale categories must have their values fixed when the database is created.
You can use different settings for different databases, but <strong>once a database is created, you cannot change them for that database anymore</strong>.
LC_COLLATE and LC_CTYPE are these categories.</p>
</blockquote>
<p>这里说的很明白，一旦数据库被创建了，就不能更改其 <code>LC_COLLATE</code> 和 <code>LC_CTYPE</code> 设置了（这两个参数分别对应上面的 <code>Collate</code> 和 <code>Ctype</code>）。</p>
<p>为此，再建一个 <code>Locale</code> 非 <code>C</code> 的数据库，重复上面的查询。</p>
<pre tabindex="0"><code>create database lixuehan2 LC_COLLATE &#39;en_US.UTF-8&#39; LC_CTYPE &#39;en_US.UTF-8&#39; TEMPLATE template0;
</code></pre><pre tabindex="0"><code>lixuehan2=# explain analyze select * from groups where name like &#39;探%&#39;;
                                                      QUERY PLAN
-----------------------------------------------------------------------------------------------------------------------
 Gather  (cost=1000.00..20321.17 rows=110 width=69) (actual time=0.364..71.770 rows=59 loops=1)
   Workers Planned: 2
   Workers Launched: 2
   -&gt;  Parallel Seq Scan on groups  (cost=0.00..19310.17 rows=46 width=69) (actual time=1.583..58.687 rows=20 loops=3)
         Filter: ((name)::text ~~ &#39;探%&#39;::text)
         Rows Removed by Filter: 366647
 Planning Time: 0.225 ms
 Execution Time: 71.798 ms
(8 rows)
</code></pre><p>可以看到，执行计划已经变为全表扫描，无法达到预期效果。</p>
<p>那么 <code>Locale</code> 是什么？</p>
<p>维基百科给出的解释：</p>
<blockquote>
<p>区域设置（locale），也称作“本地化策略集”、“本地环境”，是表达程序用户地区方面的软件设定。不同系统、平台、与软件有不同的区域设置处理方式和不同的设置范围，但是一般区域设置最少也会包括语言和地区。操作系统的区域设置通常比较复杂。区域设置的内容包括：数据格式、货币金额格式、小数点符号、千分位符号、度量衡单位、通货符号、日期写法、日历类型、文字排序、姓名格式、地址等等。</p>
</blockquote>
<p>简单来说，就是一个与区域文化相关的内容显示及解析问题。</p>
<p>为什么 <code>LC_TYPE</code> 为 <code>en_US.UTF-8</code> 类型的 <code>Locale</code>，不能支持中文的 like 索引？</p>
<p>这里摘抄 PostgreSQL 官方给出的解释：</p>
<blockquote>
<p>On all platforms, the collations named default, C, and POSIX are available.
Additional collations may be available depending on operating system support.
The default collation selects the LC_COLLATE and LC_CTYPE values specified at database creation time.
The C and POSIX collations both specify “traditional C” behavior, in which only the ASCII letters “A” through “Z” are treated as letters, and sorting is done strictly by character code byte values.</p>
</blockquote>
<p>总结就是：在所有平台上，名为 <code>default</code>、<code>C</code> 和 <code>POSIX</code> 的排序规则都可用，其他的排序必须操作系统支持。数据库默认只支持 <code>C</code> 和 <code>POSIX</code> 排序，而其排序方式就是最简单的按照 <code>ASCII</code> 字母表进行排序。所以，如果将
<code>Locale</code> 设置为 <code>en_US.UTF-8</code>，底层操作系统不支持，数据库自然也不会支持按照这种编码排序了。</p>
<h2 id="gin-索引">GIN 索引</h2>
<p>实际上，使用 PostgreSQL 进行模糊搜索时，除了使用 Btree 索引，还可以使用 GIN 索引。</p>
<p>什么是 GIN 索引呢？</p>
<p>GIN，全称为通用倒排索引（Generalized Inverted Index）。倒排索引也被称为反向索引，被用来存储在全文搜索下某个单词在一个文档或者一组文档中的存储位置的映射。
也就是说，知道某个词，就可以知道这个词出现在文档的哪些位置。</p>
<p>在 GIN 中全文搜索的基本单元就是 <code>document</code>，在 GIN 中查询一个词，即查询出现这个词的所有 <code>document</code>。为了搜索方便，<code>document</code> 会被转化成一个特殊的类型：<code>tsvector</code>。</p>
<p><code>tsvector</code> 由 <code>lexemes</code>（语素） 和<code>lexemes</code> 出现在 <code>document</code> 中的位置组成。</p>
<p>这里出现的术语较多，举个例子就明白了：</p>
<pre tabindex="0"><code>postgres=# select to_tsvector(&#39;There was a crooked man, and he walked a crooked mile&#39;);

to_tsvector
-----------------------------------------
 &#39;crook&#39;:4,10 &#39;man&#39;:5 &#39;mile&#39;:11 &#39;walk&#39;:8
(1 row)
</code></pre><p>上面的查询利用 PostgreSQL 自带的 <code>to_tsvector</code> 函数将一句话转换为了多个 <code>tsvector</code>。</p>
<p>在上面的例子中，<code>'crook':4,10</code> 为第一个 <code>tsvector</code>，第一部分为语素：crook，第二部分为出现的位置：句中的第 <code>4</code> 个和第 <code>10</code> 个单词的位置（下标从 <code>1</code> 开始），以此类推。</p>
<p>这里的停用词（&ldquo;there&rdquo;, &ldquo;was&rdquo;, &ldquo;a&rdquo;, &ldquo;and&rdquo;, &ldquo;he&rdquo;）全部被去掉（因为这些词出现的频率太高了，对于搜索起到的作用非常有限）。</p>
<p>其实看到这里，大家已经明白，将所有<strong>待搜索内容</strong>转换为 <code>tsvector</code>，其实就是一个预处理的过程，单纯是为了后面执行搜索方便。</p>
<p>待搜索内容要处理，要匹配的搜索内容当然也需要处理。</p>
<p>在 PostgreSQL 中，<code>tsquery</code> 表示搜索词。一般而言，<code>tsquery</code> 由 <code>lexemes</code> 加上一些特殊符号组成，如下：</p>
<pre tabindex="0"><code>postgres=# select to_tsquery(&#39;man &amp; (walking | running)&#39;);

         to_tsquery
----------------------------
 &#39;man&#39; &amp; ( &#39;walk&#39; | &#39;run&#39; )
(1 row)
</code></pre><p>PostgreSQL 提供了丰富的关系符号，用于 tsquery 和 tsvector 的操作，这里仅列出其中一部分：</p>
<table>
<thead>
<tr>
<th>操作符</th>
<th>描述</th>
<th>例子</th>
</tr>
</thead>
<tbody>
<tr>
<td>@@</td>
<td>tsvector 匹配 tsquery</td>
<td>to_tsvector(&lsquo;fat cats ate rats&rsquo;) @@ to_tsquery(&lsquo;cat &amp; rat&rsquo;)</td>
</tr>
<tr>
<td>@&gt;</td>
<td>tsquery 包含另外一个 tsquery</td>
<td>&lsquo;cat&rsquo;::tsquery @&gt; &lsquo;cat &amp; rat&rsquo;::tsquery</td>
</tr>
<tr>
<td>&lt;@</td>
<td>tsquery 包含在另外一个 tsquery</td>
<td>&lsquo;cat&rsquo;::tsquery &lt;@ &lsquo;cat &amp; rat&rsquo;::tsquery</td>
</tr>
</tbody>
</table>
<p>对 GIN 索引更加详细的介绍，这里不再展开，只需要知道它是一个能够加快全文搜索的倒排索引即可。</p>
<p>我们马上对这个表建立 <code>GIN</code> 索引。</p>
<pre tabindex="0"><code>CREATE EXTENSION pg_trgm; -- 需要依赖这个扩展
CREATE INDEX gin_index ON groups USING gin(name gin_trgm_ops);
</code></pre><p>再次执行查询：</p>
<pre tabindex="0"><code>postgres=# explain analyze select * from groups where name like &#39;%探探大%&#39;;
                                                     QUERY PLAN
---------------------------------------------------------------------------------------------------------------------
 Bitmap Heap Scan on groups  (cost=28.77..403.03 rows=100 width=69) (actual time=0.142..0.171 rows=1 loops=1)
   Recheck Cond: ((name)::text ~~ &#39;%探探大%&#39;::text)
   Rows Removed by Index Recheck: 1
   Heap Blocks: exact=2
   -&gt;  Bitmap Index Scan on gin_index  (cost=0.00..28.75 rows=100 width=0) (actual time=0.129..0.130 rows=2 loops=1)
         Index Cond: ((name)::text ~~ &#39;%探探大%&#39;::text)
 Planning Time: 0.165 ms
 Execution Time: 0.202 ms
(8 rows)
</code></pre><p>可以看出，通过建立 GIN 索引，前后模糊查询均已经支持走索引，执行时间较短，无需执行正反两次查询。但是更换索引结构，还是不能解决对 <code>Locale</code> 的强依赖问题。</p>
<pre tabindex="0"><code>test=# explain analyze select * from groups where name like &#39;探探大%&#39;;
                                                           QUERY PLAN
--------------------------------------------------------------------------------------------------------------------------------
 Bitmap Heap Scan on groups  (cost=536.77..911.03 rows=100 width=69) (actual time=561.098..561.100 rows=0 loops=1)
   Recheck Cond: ((name)::text ~~ &#39;探探大%&#39;::text)
   Rows Removed by Index Recheck: 1000000
   Heap Blocks: exact=12346
   -&gt;  Bitmap Index Scan on gin_index  (cost=0.00..536.75 rows=100 width=0) (actual time=269.319..269.319 rows=1000000 loops=1)
         Index Cond: ((name)::text ~~ &#39;探探大%&#39;::text)
 Planning Time: 0.200 ms
 Execution Time: 561.157 ms
(8 rows)


test=# \l test
                        List of databases
 Name |  Owner   | Encoding | Collate | Ctype | Access privileges
------+----------+----------+---------+-------+-------------------
 test | postgres | UTF8     | C       | C     |
(1 row)
</code></pre><p>上面的例子说明：在 <code>LC_CTYPE</code> 为 <code>C</code> 时虽然走了索引，但是比全表查询还慢。再仔细看，大部分时间都耗在了 Recheck 上，说明，第一轮根据Bitmap 索引查询得到的结果，准确率很低。</p>
<p>前面的 Like 查询在 <code>LC_CTYPE</code> 不为 <code>C</code> 时不支持，这里的 GIN 索引当<code>LC_CTYPE</code> 为 <code>C</code> 时又比较慢，人生为何如此艰难？</p>
<p>问题有可能出现在了分词上。 好在 PostgreSQL 给出了一个调试函数 <code>show_trgm</code> 使用这个函数，可以测试分词结果。</p>
<pre tabindex="0"><code>test=# select show_trgm(&#39;探探大群&#39;);
 show_trgm
-----------
 {}
(1 row)

test=# select show_trgm(&#39;tantanda&#39;);
                show_trgm
-----------------------------------------
 {&#34;  t&#34;,&#34; ta&#34;,and,ant,&#34;da &#34;,nda,nta,tan}
(1 row)
</code></pre><p>再使用一个 <code>Locale</code> 为 <code>en_US.UTF-8</code> 的数据库执行分词：</p>
<pre tabindex="0"><code>postgres=&gt; \l+ postgres
                                                                      数据库列表
   名称   |  拥有者  | 字元编码 |  校对规则   |    Ctype    |       存取权限        |  大小  |   表空间   |                    描述
----------+----------+----------+-------------+-------------+-----------------------+--------+------------+--------------------------------------------
 postgres | postgres | UTF8     | en_US.UTF-8 | en_US.UTF-8 | =Tc/postgres         +| 224 MB | pg_default | default administrative connection database
          |          |          |             |             | postgres=CTc/postgres+|        |            |
          |          |          |             |             | lixuehan=CTc/postgres |        |            |
(1 行记录)


postgres=&gt; select show_trgm(&#39;探探大群&#39;);
                   show_trgm
------------------------------------------------
 {0x98caf4,0xe3fef2,0xfcd2fa,0xff676b,0x4cb10e}
</code></pre><p>虽然添加了 <code>pg_trgm</code> 扩展插件，但是在 <code>LC_CTYPE</code> 非 <code>C</code> 时，分词函数并没有对中文生效，查询时即使走了索引，但在返回数据时进行的 <code>Recheck</code> 操作，耗费了太多时间，导致查询速度变慢。</p>
<p>再回到前面，我们在创建 GIN 索引时，先使用了 <code>pg_trgm</code> 这个扩展插件，这个插件是个什么东东呢？</p>
<p>还是得查看 PostgreSQL 官方的介绍：</p>
<blockquote>
<p>The pg_trgm module provides functions and operators for determining the similarity of ASCII alphanumeric text based on trigram matching,
as well as index operator classes that support fast searching for similar strings.</p>
</blockquote>
<p><code>pg_trgm</code> 模块提供函数和操作符来测定字母，数字，文本基于三元模型匹配的相似性， 还有支持快速搜索相似字符串的索引操作符类。</p>
<p>打个比方<code>foo</code>的三元模型的集合为：</p>
<p>[][]f、[]fo、foo、oo[]</p>
<p>这里用 [] 表示空，也就是说 <code>pg_trgm</code> 将字符串拆解成三个字符一组，如果不满三个，则用空格填充。</p>
<p>那么问题来了，如果我使用了 <code>pg_trgm</code> 扩展插件，且 <code>LC_CTYPE</code> 为 <code>en_US.UTF-8</code> ，是不是查询效率就一定高呢？</p>
<p>不然。</p>
<p>且看下面三个例子：</p>
<pre tabindex="0"><code>postgres=# explain analyze select * from groups where name like &#39;%探探大%&#39;;
                                                     QUERY PLAN
---------------------------------------------------------------------------------------------------------------------
 Bitmap Heap Scan on groups  (cost=28.77..403.03 rows=100 width=69) (actual time=0.066..0.111 rows=1 loops=1)
   Recheck Cond: ((name)::text ~~ &#39;%探探大%&#39;::text)
   Rows Removed by Index Recheck: 1
   Heap Blocks: exact=2
   -&gt;  Bitmap Index Scan on gin_index  (cost=0.00..28.75 rows=100 width=0) (actual time=0.049..0.050 rows=2 loops=1)
         Index Cond: ((name)::text ~~ &#39;%探探大%&#39;::text)
 Planning Time: 0.213 ms
 Execution Time: 0.149 ms
(8 rows)

postgres=# explain analyze select * from groups where name like &#39;%探探%&#39;;
                                                       QUERY PLAN
-------------------------------------------------------------------------------------------------------------------------
 Gather  (cost=1000.00..18564.33 rows=100 width=69) (actual time=0.666..238.445 rows=1 loops=1)
   Workers Planned: 2
   Workers Launched: 2
   -&gt;  Parallel Seq Scan on groups  (cost=0.00..17554.33 rows=42 width=69) (actual time=146.700..225.407 rows=0 loops=3)
         Filter: ((name)::text ~~ &#39;%探探%&#39;::text)
         Rows Removed by Filter: 333333
 Planning Time: 0.152 ms
 Execution Time: 238.469 ms
(8 rows)

postgres=# explain analyze select * from groups where name like &#39;%探%&#39;;
                                                       QUERY PLAN
-------------------------------------------------------------------------------------------------------------------------
 Gather  (cost=1000.00..18564.33 rows=100 width=69) (actual time=0.427..224.734 rows=980 loops=1)
   Workers Planned: 2
   Workers Launched: 2
   -&gt;  Parallel Seq Scan on groups  (cost=0.00..17554.33 rows=42 width=69) (actual time=1.493..207.726 rows=327 loops=3)
         Filter: ((name)::text ~~ &#39;%探%&#39;::text)
         Rows Removed by Filter: 333007
 Planning Time: 0.235 ms
 Execution Time: 224.913 ms
(8 rows)
</code></pre><p>上面的例子中，分别对待搜索字数为 <code>3</code> 个、 <code>2</code> 个、 <code>1</code> 个三种情况进行测试，发现关键词很短的情况（1-2汉字）的情况下召回率很差，无法走索引，只能进行全表扫，查询时间超过了 <code>200ms</code>。</p>
<h2 id="业务分词">业务分词</h2>
<p>从前面分析可知，使用 PostgreSQL 自带分词扩展插件存在以下不足：</p>
<p>1.关键词很短的情况（1-2汉字）的情况下召回率很差，特别是只有一个字时，是无法走索引的，只能进行全表扫。</p>
<p>2.定制性太差，只能使用它自己定义的逻辑来定义字符串的相似度</p>
<p>3.对 <code>LC_CTYPE</code> 有特殊的要求，可移植性较差 ，默认的 <code>LC_CTYPE</code> 无法正确对中文进行分词。</p>
<p>于是，我们决定在业务中使用分词。</p>
<p><img loading="lazy" src="/posts/pg/imgs/business_cut_words.png" type="" alt="分词架构"  /></p>
<ul>
<li>分词：在维护阶段，每一个被模糊搜索的字段（例如应用名称），在<strong>业务代码中使用分词包</strong>加工处理成一系列关键词。</li>
<li>索引：在数据库中建立关键词到表记录的倒排索引</li>
<li>查询：<strong>将查询同样拆解为关键词</strong>，然后利用查询关键词通过倒排索引找出相关的记录来。</li>
</ul>
<p>所以，我们打算采用业务代码分词 + PG查询的方式进行：</p>
<p><img loading="lazy" src="/posts/pg/imgs/search_update.png" type="" alt="搜索和查询架构"  /></p>
<ul>
<li>在业务表中新增一列，专门用来存放搜索列的分词结果</li>
<li>更新或者新插入记录时，在业务代码中进行分词，将分词结果，以 <code>tsvector</code> 的形式存储到新增列中</li>
<li>执行查询时，同样使用业务代码对待搜索内容进行分词，转换为 <code>tsquery</code> 形式，与 <code>tsvector</code> 进行匹配</li>
</ul>
<p>这样的好处：分词方法可以完全按照我们自己的定制的方案进行，如果后面需要支持拼音搜索、拼音首字母搜索等其他方式，在 DB 层面不需要更改，只需要更改业务代码中的分词逻辑即可。</p>
<h3 id="分词方案">分词方案</h3>
<p>常见的分词模式，主要分为：全模式、精确模式和单字模式三种。</p>
<p>以对「我来到了北京清华大学」这句话为例：</p>
<pre tabindex="0"><code>
【全模式】: 我/ 来到/ 北京/ 清华/ 清华大学/ 华大/ 大学

【精确模式】: 我/ 来到/ 北京/ 清华大学

【单字模式】：我/ 来/ 到/ 北/ 京/ 清/ 华/ 大/ 学

【全模式+精确模式+单字模式】：我/ 来到/ 北京/ 清华/ 清华大学/ 华大/ 大学/ 我/ 来/ 到/ 北/ 京/ 清/ 华/ 大/ 学
</code></pre><p>上面的第四种模式，是在群聊业务中使用到的模式，在下面会介绍到。</p>
<p>群聊业务中根据业务使用场景的不同，采用了不同的分词模式进行：</p>
<p>在新增群或者群名变更时，由于对于群名要尽可能列举出来每一种分词的可能，所以采用了「全模式+精确模式+单字模式」结合的思路进行。</p>
<p>比如群名：「爱宠物的单身男女们」</p>
<p>使用分词包进行分词后，结果为：「爱、宠物、单身、男女」</p>
<p>这时，如果输入「女」进行查询，则由于在插入群数据时，没有对该群名分出来「女」这个语素，所以是无法查询出来的。</p>
<p>针对此缺陷，所以本次采用第四种的<strong>订制模式</strong>：「爱」「宠」「物」「的」「单」「身」「男」「女」「们」「宠物」「单身」「男女」。这样基本就把所有可能的模式尽可能列举出来了。</p>
<p>搜索群时对于用户输入的字符串采用了「分词模式」进行。</p>
<p>比如用户输入「女神经」，如果按照「全模式+分词模式」，结果就会为：「女」「神」「经」「神经」。</p>
<p>这样就会把所有只包含「女」或者「神」字的记录也查询出来，而只包含「神」的记录大概率是用户不想搜出来的，如果返回这些记录会让用户感觉莫名其妙，用户体验较差。</p>
<p>如果只采用「分词模式」，则会只搜索「女」或者「神经」，在体验上较好一些，匹配效率更高。</p>
<h3 id="分词包">分词包</h3>
<p>目前使用比较多的分词包主要有：gojieba 、 jiebago、sego、gse。</p>
<p>给定相同词典，大小为 9.2MB，让这四种分词包分别加载后，分析其指标（使用 pprof 方法分析）。</p>
<p>由于我们业务场景中使用的是对短句切分（不超过14个字），这几个包官方给出的分词效率都是 KB/s 级别，对于我们的使用场景，性能绰绰有余，所以我们重点放在了内存占用指标的对比上。</p>
<p>执行下面命令，查看这四个分词包内存情况：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="k">go</span> <span class="nx">tool</span> <span class="nx">pprof</span> <span class="o">-</span><span class="nx">inuse_space</span> <span class="nx">http</span><span class="p">:</span><span class="c1">//127.0.0.1:6060/debug/pprof/heap
</span></span></span></code></pre></div><ol>
<li>
<p>gse 包</p>
<pre tabindex="0"><code>(pprof) top
Showing nodes accounting for 116.65MB, 100% of 116.65MB total
Showing top 10 nodes out of 19
      flat  flat%   sum%        cum   cum%
   50.04MB 42.90% 42.90%    50.04MB 42.90%  github.com/go-ego/cedar.(*Cedar).addBlock
   33.11MB 28.38% 71.28%    83.15MB 71.28%  github.com/go-ego/gse.(*Dictionary).addToken
   28.50MB 24.43% 95.71%    28.50MB 24.43%  github.com/go-ego/gse.(*Segmenter).SplitTextToWords
       3MB  2.57% 98.29%   116.65MB   100%  github.com/go-ego/gse.(*Segmenter).Reader
       2MB  1.71%   100%        2MB  1.71%  fmt.(*ss).convertString
         0     0%   100%        2MB  1.71%  fmt.(*ss).doScan
         0     0%   100%        2MB  1.71%  fmt.(*ss).scanOne
         0     0%   100%        2MB  1.71%  fmt.Fscanln
         0     0%   100%    50.04MB 42.90%  github.com/go-ego/cedar.(*Cedar).Insert
         0     0%   100%    50.04MB 42.90%  github.com/go-ego/cedar.(*Cedar).findPlaces
</code></pre><p>内存占用为 <code>116.65MB</code>。</p>
</li>
<li>
<p>sego 包</p>
<pre tabindex="0"><code>Type: inuse_space
Time: May 17, 2021 at 11:43am (CST)
Entering interactive mode (type &#34;help&#34; for commands, &#34;o&#34; for options)
(pprof) top
Showing nodes accounting for 122.61MB, 99.59% of 123.11MB total
Dropped 3 nodes (cum &lt;= 0.62MB)
Showing top 10 nodes out of 16
      flat  flat%   sum%        cum   cum%
   41.39MB 33.62% 33.62%    78.60MB 63.85%  github.com/huichen/sego.(*Dictionary).addToken
   36.71MB 29.82% 63.44%    36.71MB 29.82%  github.com/adamzy/cedar-go.(*cedar).addBlock
      33MB 26.81% 90.25%       33MB 26.81%  github.com/huichen/sego.splitTextToWords
    8.50MB  6.90% 97.16%   123.11MB   100%  github.com/huichen/sego.(*Segmenter).LoadDictionary
       3MB  2.44% 99.59%        3MB  2.44%  fmt.(*ss).convertString
         0     0% 99.59%        3MB  2.44%  fmt.(*ss).doScan
         0     0% 99.59%        3MB  2.44%  fmt.(*ss).scanOne
         0     0% 99.59%        3MB  2.44%  fmt.Fscanln
         0     0% 99.59%    36.71MB 29.82%  github.com/adamzy/cedar-go.(*Cedar).Insert
         0     0% 99.59%    36.71MB 29.82%  github.com/adamzy/cedar-go.(*cedar).findPlaces
</code></pre><p>内存占用 <code>123.11MB</code>。</p>
</li>
<li>
<p>jiebago</p>
<pre tabindex="0"><code>Type: inuse_space
Time: May 17, 2021 at 11:38am (CST)
Entering interactive mode (type &#34;help&#34; for commands, &#34;o&#34; for options)
(pprof) top
Showing nodes accounting for 25.30MB, 100% of 25.30MB total
Showing top 10 nodes out of 11
      flat  flat%   sum%        cum   cum%
   21.72MB 85.84% 85.84%    21.72MB 85.84%  github.com/wangbin/jiebago.(*Dictionary).addToken
    2.58MB 10.21% 96.05%     2.58MB 10.21%  github.com/wangbin/jiebago/finalseg.init.0
       1MB  3.95%   100%        1MB  3.95%  bufio.(*Scanner).Text
         0     0%   100%    21.72MB 85.84%  github.com/wangbin/jiebago.(*Dictionary).Load
         0     0%   100%    21.72MB 85.84%  github.com/wangbin/jiebago.(*Dictionary).loadDictionary
         0     0%   100%    21.72MB 85.84%  github.com/wangbin/jiebago.(*Segmenter).LoadDictionary
         0     0%   100%    21.72MB 85.84%  github.com/wangbin/jiebago/dictionary.LoadDictionary
         0     0%   100%        1MB  3.95%  github.com/wangbin/jiebago/dictionary.loadDictionary.func1
         0     0%   100%    21.72MB 85.84%  my-project/src/tokens/jiebago.init.0
         0     0%   100%    24.30MB 96.05%  runtime.doInit
</code></pre><p>内存占用 <code>25.30MB</code>。</p>
</li>
<li>
<p>gojieba</p>
<pre tabindex="0"><code>Type: inuse_space
Time: May 17, 2021 at 11:42am (CST)
Entering interactive mode (type &#34;help&#34; for commands, &#34;o&#34; for options)
(pprof) top
Showing nodes accounting for 520.04kB, 100% of 520.04kB total
      flat  flat%   sum%        cum   cum%
  520.04kB   100%   100%   520.04kB   100%  runtime/pprof.writeHeapInternal
         0     0%   100%   520.04kB   100%  net/http.(*ServeMux).ServeHTTP
         0     0%   100%   520.04kB   100%  net/http.(*conn).serve
         0     0%   100%   520.04kB   100%  net/http.HandlerFunc.ServeHTTP
         0     0%   100%   520.04kB   100%  net/http.serverHandler.ServeHTTP
         0     0%   100%   520.04kB   100%  net/http/pprof.Index
         0     0%   100%   520.04kB   100%  net/http/pprof.handler.ServeHTTP
         0     0%   100%   520.04kB   100%  runtime/pprof.(*Profile).WriteTo
         0     0%   100%   520.04kB   100%  runtime/pprof.writeHeap
</code></pre><p>总共占用内存约为 <code>520.04kB</code>。</p>
</li>
</ol>
<p>在占用内存方面：gojieba &lt; jiebago &lt; gse &lt; sego。</p>
<p>除此之外，也对比了一些其他方面的指标：</p>
<table>
<thead>
<tr>
<th>包名</th>
<th>维护情况（最近一次提交时间）</th>
<th>start 数</th>
<th>contributor 数</th>
<th>自带分词库大小</th>
<th>不足</th>
<th>亮点</th>
</tr>
</thead>
<tbody>
<tr>
<td>gojieba</td>
<td>2020年1月</td>
<td>1.4k</td>
<td>11</td>
<td>11M</td>
<td>1.不支持 mac 开发环境交叉编译 2.有issues提到在并发情况下会panic，亲测无此问题 3.底层使用 C++ 实现分词算法，通过 cgo 调用实现，测试环境由于缺少 g++ 执行文件，构建失败，对于环境依赖性较高。</td>
<td>号称是国内使用人数最多的 go 语言分词库</td>
</tr>
<tr>
<td>jiebago</td>
<td>2015年5月</td>
<td>358</td>
<td>1</td>
<td>5.1M</td>
<td>维护活跃度低，基本不维护了。</td>
<td></td>
</tr>
<tr>
<td>sego</td>
<td>2018年6月</td>
<td>1.5k</td>
<td>6</td>
<td>8.6M</td>
<td>仓库中给出的demo分词效果较差（“中华人民共和国”分为了7个字），代码风格较差，log.fatalf panic 满天飞</td>
<td>作者为前 Google 大佬，对 go 和分词熟悉</td>
</tr>
<tr>
<td>gse</td>
<td>2021年3月</td>
<td>1.6k</td>
<td>4</td>
<td>14M</td>
<td>加载自带的分词库占用内存较大。</td>
<td>代码风格较好，注释较为详尽</td>
</tr>
</tbody>
</table>
<p>综合前面的对照表，可知每种包都有各自的优缺点，代码质量也良莠不齐。</p>
<p>维护情况：jiebago &lt; sego &lt; gojieba &lt; gse</p>
<p>star 数：jiebago &lt; gojieba &lt; sego &lt; gse</p>
<p>综合考虑以上因素，选择了对于代码更具掌控性的 gse 作为分词包，虽然内存占用较大，但是如果单独抽象出来一个公共服务，专门提供分词能力，不影响核心服务即可。</p>
<h2 id="倒排">倒排</h2>
<p>如前所述，我们再业务表中新增一列存储分词结果：<code>group_name_tokens</code>。</p>
<p>PostgreSQL 官方文档推荐两种方法建立索引：</p>
<p>1）直接对 <code>group_name_tokens</code> 建立函数索引，比如：</p>
<pre tabindex="0"><code>CREATE INDEX group_idx ON groups USING GIN (to_tsvector(config_name, body));--to_tsvector 是PG内置的函数
</code></pre><p>2）直接将该列设置为 <code>tsvector</code> 类型，直接对 <code>tsvector</code> 类型列建立索引。</p>
<pre tabindex="0"><code>ALTER TABLE groups ADD column group_name_tokens tsvector;
</code></pre><p>我们选择方案2，出于以下考虑：</p>
<p>方案1，建立索引更简单一些，占用磁盘空间更小，因为 tsvector 并没有显式存储，但是每次查询都需要重新执行计算 <code>to_tsvector</code> 值，速度较慢;</p>
<p>方案2，利用索引查询时，无需指定全文索引的配置（全文索引有一些跟 <code>Locale</code> 相关的配置），另外，由于在验证索引匹配时，无需重新计算 <code>to_tsvector</code> 值，所以查询速度更快。</p>
<p>在群聊业务场景下，考虑到群的数量可控，所以占用空间不会增加太多，同时用户对于搜索速度的体验要求更高，所以采用了方案2。</p>
<p>如果要对搜索结果按照相似度排序呢？</p>
<h3 id="similarity">similarity</h3>
<p>这个是在 <code>pg_trgm</code> 扩展中包含的函数，其对中文分词支持不佳，所以业务中不采用。</p>
<h3 id="最小编辑距离">最小编辑距离</h3>
<p>最小编辑距离，需要使用到 PostgreSQL 的扩展：</p>
<pre tabindex="0"><code>CREATE EXTENSION fuzzystrmatch;---依赖该扩展为搜索结果排序
</code></pre><p>levenshtein 函数的一些相关 API：</p>
<pre tabindex="0"><code>levenshtein(text source, text target, int ins_cost, int del_cost, int sub_cost) returns int
levenshtein(text source, text target) returns int
levenshtein_less_equal(text source, text target, int ins_cost, int del_cost, int sub_cost, int max_d) returns int
levenshtein_less_equal(text source, text target, int max_d) returns int
</code></pre><p>官方文档对 <code>source</code>  和  <code>target</code> 参数给出限制：不能超过 <code>255</code> 字节（由于群名称有长度限制，故适合我们的业务使用场景）。</p>
<p><code>cost</code> 参数分别指定了对于一个字符的插入、删除和代替的代价，个人理解，一定程度上就是字符串的这三种改变带来的权重。</p>
<p>分别举几个例子就明白了：</p>
<ol>
<li>
<p>插入</p>
<p><code>GUMBO</code> 和 <code>GUMBOL</code>，后者相比前者，等价于插入了一个 <code>L</code> 字符。所以，影响最终结果的，只有 <code>ins_cost</code> 参数。</p>
<pre tabindex="0"><code>--- 设置为 0，表示插入新字符带来的代价不影响
lixuehan=# SELECT levenshtein(&#39;GUMBO&#39;, &#39;GUMBOL&#39;,0,1,1);
 levenshtein
-------------
           0
(1 row)

--- 设置为 1，表示插入新字符带来的代价为 1
lixuehan=# SELECT levenshtein(&#39;GUMBO&#39;, &#39;GUMBOL&#39;,1,1,1);
 levenshtein
-------------
           1
(1 row)
</code></pre></li>
<li>
<p>删除</p>
<p><code>GUMBO</code> 和 <code>GUMO</code>，后者相比前者，等价于删除了一个 <code>B</code> 字符。所以，影响最终比较结果的只有 <code>del_cost</code> 参数。</p>
<pre tabindex="0"><code>--- 设置为 0，表示插入新字符带来的代价不影响
lixuehan=# SELECT levenshtein(&#39;GUMBO&#39;, &#39;GUMO&#39;,1,0,1);
 levenshtein
-------------
           0
(1 row)

--- 设置为 1，表示插入新字符带来的代价为 1
lixuehan=# SELECT levenshtein(&#39;GUMBO&#39;, &#39;GUMO&#39;,1,1,1);
 levenshtein
-------------
           1
(1 row)
</code></pre></li>
<li>
<p>代替</p>
<p><code>GUMBO</code> 和 <code>GUMLO</code>，后者相比前者，等价于将 <code>B</code> 字符替换为 <code>L</code> 字符。所以，影响最终比较结果的只有 <code>sub_cost</code> 参数。</p>
<pre tabindex="0"><code>--- 设置为 0，表示插入新字符带来的代价不影响
lixuehan=# SELECT levenshtein(&#39;GUMBO&#39;, &#39;GUMLO&#39;,1,1,0);
 levenshtein
-------------
           0
(1 row)

--- 设置为 1，表示插入新字符带来的代价为 1
lixuehan=# SELECT levenshtein(&#39;GUMBO&#39;, &#39;GUMLO&#39;,1,1,1);
 levenshtein
-------------
           1
(1 row)
</code></pre></li>
</ol>
<p>在实际的使用中，我们可以通过确定字符串这三种不同改变带来的权重来影响实际的比较结果。</p>
<p><code>levenshtein_less_equal</code> 函数是一个加速版的 <code>levenshtein</code>。如果 <code>levenshtein</code> 距离大于 <code>max_id</code> ，则返回 <code>levenshtein</code> 距离值，反之，则返回 <code>max_id+1</code>。</p>
<pre tabindex="0"><code>--- levenshtein 距离 ---
lixuehan=# select levenshtein(&#39;extensive&#39;, &#39;exhaustive&#39;);
 levenshtein
-------------
           4
(1 row)

--- max_id 为 2，时返回 3 ---
lixuehan=# SELECT levenshtein_less_equal(&#39;extensive&#39;, &#39;exhaustive&#39;,2);
 levenshtein_less_equal
------------------------
                      3
(1 row)

--- max_id 为 1，时返回 2 ---
lixuehan=# SELECT levenshtein_less_equal(&#39;extensive&#39;, &#39;exhaustive&#39;,1);
 levenshtein_less_equal
------------------------
                      2
(1 row)

--- max_id 大于 levenshtein 值时，返回真正的 levenshtein 距离 ---
lixuehan=# SELECT levenshtein_less_equal(&#39;extensive&#39;, &#39;exhaustive&#39;,7);
 levenshtein_less_equal
------------------------
                      4
(1 row)
</code></pre><p>在我们的群搜索业务场景中，采取了简单的第二种 api ：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="nf">levenshtein</span><span class="p">(</span><span class="n">text</span> <span class="n">source</span><span class="p">,</span> <span class="n">text</span> <span class="n">target</span><span class="p">)</span> <span class="n">returns</span> <span class="kt">int</span>
</span></span></code></pre></div><p>这种情况下，三种case带来的影响都默认是 1.</p>
<p>更多介绍参见 <a href="https://www.postgresql.org/docs/9.1/fuzzystrmatch.html">官方文档</a>。</p>
<p>使用方式比较直观：</p>
<pre tabindex="0"><code>SELECT id,levenshtein(name,?) AS distance FROM groups WHERE group_name_tokens @@ to_tsquery(&#39;探探&#39;) ORDER BY distance ASC
</code></pre><h2 id="上线优化效果">上线优化效果</h2>
<p>利用分词+倒排的方案，实现了搜索功能与 PostgreSQL 的 <code>Locale_Ctype</code> 彻底解耦，同时提供了相似度排名特性，同时加快了搜索的速度，提升了性能，下面两张图就是上线前后的对比：</p>
<p><img loading="lazy" src="/posts/pg/imgs/compare.png" type="" alt=""  /></p>
<p>上线前后对比</p>
<p>优化上线前，搜索查询最长耗时 <code>22.2ms</code>，最短耗时 <code>440us</code>，平均耗时：<code>6.6ms</code>。</p>
<p>优化上线后，最短耗时：<code>456us</code>，最长耗时：<code>14ms</code>，平均耗时：<code>1.7ms</code>。</p>
<p>与之前的 Like 查询相比，最长耗时比原来少了 <code>2ms</code>，平均耗时缩短为原来的 <code>1/4</code>，提升效果显著。</p>
<h2 id="最后">最后</h2>
<p>下面是在实现需求时的一些参考链接，有兴趣可以点击链接详读，文章中有错误之处，恳请大家批评指针。</p>
<ol>
<li><a href="https://github.com/digoal/blog/blob/master/201704/20170426_01.md">https://github.com/digoal/blog/blob/master/201704/20170426_01.md</a></li>
<li><a href="https://www.postgresql.org/docs/13/locale.html">https://www.postgresql.org/docs/13/locale.html</a></li>
<li><a href="http://pigsty.cc/zh/blog/2021/03/05/pg%E4%B8%AD%E7%9A%84%E6%9C%AC%E5%9C%B0%E5%8C%96%E6%8E%92%E5%BA%8F%E8%A7%84%E5%88%99/">http://pigsty.cc/zh/blog/2021/03/05/pg中的本地化排序规则/</a></li>
<li><a href="https://postgrespro.com/blog/pgsql/4261647">Indexes in PostgreSQL</a></li>
<li><a href="https://postgrespro.com/blog/pgsql/4261647">https://postgrespro.com/blog/pgsql/4261647</a></li>
</ol>
]]></content:encoded>
    </item>
    
    <item>
      <title>Icons</title>
      <link>https://anriclee.github.io/docs/icons/</link>
      <pubDate>Wed, 20 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://anriclee.github.io/docs/icons/</guid>
      <description>Explain how to use icons in PaperModX</description>
      <content:encoded><![CDATA[<h2 id="social-icons">Social Icons</h2>
<p>Go to <a href="icons_preview">Icons Preview</a> to see a complete list of icons</p>
<p>Usage :</p>
<pre tabindex="0"><code>socialIcons:
    - name: &#34;kofi&#34;
        url: &#34;https://kofi.com&#34;
    - name: &#34;twitter&#34;
        url: &#34;https://twitter.com&#34;
</code></pre><hr>
<h2 id="share-icons">Share Icons</h2>
<table>
<thead>
<tr>
<th>No.</th>
<th>Platform</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td><code>twitter</code> (also generates hash tags from tags linked with post)</td>
</tr>
<tr>
<td>2</td>
<td><code>linkedin</code></td>
</tr>
<tr>
<td>3</td>
<td><code>reddit</code></td>
</tr>
<tr>
<td>4</td>
<td><code>facebook</code></td>
</tr>
<tr>
<td>5</td>
<td><code>whatsapp</code></td>
</tr>
<tr>
<td>6</td>
<td><code>telegram</code></td>
</tr>
</tbody>
</table>
<p>Usage:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yml" data-lang="yml"><span class="line"><span class="cl"><span class="nt">params</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">ShowShareButtons</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span></code></pre></div>]]></content:encoded>
    </item>
    
    <item>
      <title>Installation | Update</title>
      <link>https://anriclee.github.io/docs/installation/</link>
      <pubDate>Wed, 20 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://anriclee.github.io/docs/installation/</guid>
      <description>Read Install and Update instructions here</description>
      <content:encoded><![CDATA[<h2 id="intro">Intro</h2>
<ul>
<li><strong>We&rsquo;ll be using <code>yml/yaml</code> format for all examples down below, I recommend using <code>yml</code> over <code>toml</code> as it is easier to read.</strong></li>
<li>You can find any <a href="https://www.google.com/search?q=yml+to+toml">YML to TOML</a> converters if necessary.</li>
</ul>
<hr>
<h2 id="guide">Guide</h2>
<p>Follow <a href="https://gohugo.io/getting-started/quick-start/">Quick Start</a> guide to setup hugo and create a new site.</p>
<blockquote>
<p>Note: Use -f to select yml format</p>
<p><code>hugo new site &lt;name of site&gt; -f yml</code></p>
</blockquote>
<p>Make sure you install latest version of <strong><code>hugo(&gt;=0.83.0)</code></strong>.</p>
<p>After you have created a new site, at <a href="https://gohugo.io/getting-started/quick-start/#step-3-add-a-theme">Step 3</a> follow the steps:</p>
<h3 id="method-1">Method 1</h3>
<p>Inside the folder of your Hugo site, run:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">git clone https://github.com/reorx/hugo-PaperModX themes/PaperModX --depth<span class="o">=</span><span class="m">1</span>
</span></span></code></pre></div><p><strong>Note</strong>: You may use <code> --branch v5.0</code> to end of above command if you want to stick to specific release.</p>
<blockquote>
<p>Updating theme :</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="nb">cd</span> themes/PaperModX
</span></span><span class="line"><span class="cl">git pull
</span></span></code></pre></div></blockquote>
<h3 id="method-2">Method 2</h3>
<p>You can use as <a href="https://www.atlassian.com/git/tutorials/git-submodule">submodule</a> with</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">git submodule add https://github.com/reorx/hugo-PaperModX.git themes/PaperModX --depth<span class="o">=</span><span class="m">1</span>
</span></span><span class="line"><span class="cl">git submodule update --init --recursive <span class="c1"># needed when you reclone your repo (submodules may not get cloned automatically)</span>
</span></span></code></pre></div><p><strong>Note</strong>: You may use <code> --branch v5.0</code> to end of above command if you want to stick to specific release.</p>
<blockquote>
<p>Updating theme :</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">git submodule update --remote --merge
</span></span></code></pre></div></blockquote>
<h3 id="method-3">Method 3</h3>
<p>Or you can Download as Zip from Github Page and extract in your themes directory</p>
<p>Direct Links:</p>
<ul>
<li><a href="https://github.com/reorx/hugo-PaperModX/archive/master.zip">Master Branch (Latest)</a></li>
<li><a href="https://github.com/reorx/hugo-PaperModX/archive/v5.0.zip">v5.0</a></li>
<li><a href="https://github.com/reorx/hugo-PaperModX/archive/v4.0.zip">v4.0</a></li>
<li><a href="https://github.com/reorx/hugo-PaperModX/archive/v3.0.zip">v3.0</a></li>
<li><a href="https://github.com/reorx/hugo-PaperModX/archive/v2.0.zip">v2.0</a></li>
<li><a href="https://github.com/reorx/hugo-PaperModX/archive/v1.0.zip">v1.0</a></li>
</ul>
<h3 id="finally-">Finally &hellip;</h3>
<p>Add in <code>config.yml</code>:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yml" data-lang="yml"><span class="line"><span class="cl"><span class="nt">theme</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;PaperModX&#34;</span><span class="w">
</span></span></span></code></pre></div><h3 id="method-4">Method 4</h3>
<ul>
<li>
<p>Install <a href="https://go.dev/doc/install">Go programming language</a> in your operating system.</p>
</li>
<li>
<p>Intialize your own hugo mod</p>
</li>
</ul>
<pre tabindex="0"><code>hugo mod init YOUR_OWN_GIT_REPOSITORY
</code></pre><ul>
<li>Add PaperModX in your <code>config.yml</code> file</li>
</ul>
<pre tabindex="0"><code>module:
  imports:
  - path: github.com/reorx/hugo-PaperModX
</code></pre><ul>
<li>Update theme</li>
</ul>
<pre tabindex="0"><code>hugo mod get -u
</code></pre><hr>
<h2 id="quick-links">Quick Links</h2>
<ul>
<li>
<h3 id="papermod---featuresfeatures"><a href="../features">Papermod - Features</a></h3>
</li>
<li>
<h3 id="papermod---faqsfaq"><a href="../faq">Papermod - FAQs</a></h3>
</li>
<li>
<h3 id="papermod---variablesvariables"><a href="../variables">Papermod - Variables</a></h3>
</li>
<li>
<h3 id="papermod---iconsicons"><a href="../icons">Papermod - Icons</a></h3>
</li>
<li>
<h3 id="changeloghttpsgithubcomreorxhugo-papermodxreleases"><a href="https://github.com/reorx/hugo-PaperModX/releases">ChangeLog</a></h3>
</li>
</ul>
<hr>
<h2 id="sample-configyml">Sample <code>config.yml</code></h2>
<blockquote>
<p><strong>Example Site Structure is present here</strong>: <a href="https://github.com/reorx/hugo-PaperModX/tree/exampleSite/">exampleSite</a></p>
</blockquote>
<p><strong>Use appropriately</strong></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yml" data-lang="yml"><span class="line"><span class="cl"><span class="nt">baseURL</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;https://examplesite.com/&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">title</span><span class="p">:</span><span class="w"> </span><span class="l">ExampleSite</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">paginate</span><span class="p">:</span><span class="w"> </span><span class="m">5</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">theme</span><span class="p">:</span><span class="w"> </span><span class="l">PaperModX</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">enableRobotsTXT</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">buildDrafts</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">buildFuture</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">buildExpired</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">pygmentsUseClasses</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">googleAnalytics</span><span class="p">:</span><span class="w"> </span><span class="l">UA-123-45</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">minify</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">disableXML</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">minifyOutput</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">params</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">env</span><span class="p">:</span><span class="w"> </span><span class="l">production</span><span class="w"> </span><span class="c"># to enable google analytics, opengraph, twitter-cards and schema.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">title</span><span class="p">:</span><span class="w"> </span><span class="l">ExampleSite</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">description</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;ExampleSite description&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">keywords</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="l">Blog, Portfolio, PaperModX]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">author</span><span class="p">:</span><span class="w"> </span><span class="l">Me</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># author: [&#34;Me&#34;, &#34;You&#34;] # multiple authors</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">images</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s2">&#34;&lt;link or path of image for opengraph, twitter-cards&gt;&#34;</span><span class="p">]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">DateFormat</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;January 2, 2006&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">defaultTheme</span><span class="p">:</span><span class="w"> </span><span class="l">auto</span><span class="w"> </span><span class="c"># dark, light</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">disableThemeToggle</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">ShowReadingTime</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">ShowShareButtons</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">ShowPostNavLinks</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">ShowBreadCrumbs</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">ShowCodeCopyButtons</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">disableSpecial1stPost</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">disableScrollToTop</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">comments</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">hidemeta</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">hideSummary</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">showtoc</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">tocopen</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">assets</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c"># disableFingerprinting: true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">favicon</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;&lt;link / abs url&gt;&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">favicon16x16</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;&lt;link / abs url&gt;&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">favicon32x32</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;&lt;link / abs url&gt;&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">apple_touch_icon</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;&lt;link / abs url&gt;&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">safari_pinned_tab</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;&lt;link / abs url&gt;&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">label</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">text</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;Home&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">icon</span><span class="p">:</span><span class="w"> </span><span class="l">/apple-touch-icon.png</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">iconHeight</span><span class="p">:</span><span class="w"> </span><span class="m">35</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># profile-mode</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">profileMode</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">enabled</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="w"> </span><span class="c"># needs to be explicitly set</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">title</span><span class="p">:</span><span class="w"> </span><span class="l">ExampleSite</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">subtitle</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;This is subtitle&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">imageUrl</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;&lt;img location&gt;&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">imageWidth</span><span class="p">:</span><span class="w"> </span><span class="m">120</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">imageHeight</span><span class="p">:</span><span class="w"> </span><span class="m">120</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">imageTitle</span><span class="p">:</span><span class="w"> </span><span class="l">my image</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">buttons</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Posts</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span><span class="nt">url</span><span class="p">:</span><span class="w"> </span><span class="l">posts</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Tags</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span><span class="nt">url</span><span class="p">:</span><span class="w"> </span><span class="l">tags</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># home-info mode</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">homeInfoParams</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">Title</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;Hi there \U0001F44B&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">Content</span><span class="p">:</span><span class="w"> </span><span class="l">Welcome to my blog</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">socialIcons</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">twitter</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">url</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;https://twitter.com/&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">stackoverflow</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">url</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;https://stackoverflow.com&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">github</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">url</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;https://github.com/&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">analytics</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">google</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">SiteVerificationTag</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;XYZabc&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">bing</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">SiteVerificationTag</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;XYZabc&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">yandex</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">SiteVerificationTag</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;XYZabc&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">cover</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">hidden</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w"> </span><span class="c"># hide everywhere but not in structured data</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">hiddenInList</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w"> </span><span class="c"># hide on list pages and home</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">hiddenInSingle</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w"> </span><span class="c"># hide on single page</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">editPost</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">URL</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;https://github.com/&lt;path_to_repo&gt;/content&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">Text</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;Suggest Changes&#34;</span><span class="w"> </span><span class="c"># edit text</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">appendFilePath</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w"> </span><span class="c"># to append file path to Edit link</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># for search</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># https://fusejs.io/api/options.html</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">fuseOpts</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">isCaseSensitive</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">shouldSort</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">location</span><span class="p">:</span><span class="w"> </span><span class="m">0</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">distance</span><span class="p">:</span><span class="w"> </span><span class="m">1000</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">threshold</span><span class="p">:</span><span class="w"> </span><span class="m">0.4</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">minMatchCharLength</span><span class="p">:</span><span class="w"> </span><span class="m">0</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">keys</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s2">&#34;title&#34;</span><span class="p">,</span><span class="w"> </span><span class="s2">&#34;permalink&#34;</span><span class="p">,</span><span class="w"> </span><span class="s2">&#34;summary&#34;</span><span class="p">,</span><span class="w"> </span><span class="s2">&#34;content&#34;</span><span class="p">]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">menu</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">main</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- <span class="nt">identifier</span><span class="p">:</span><span class="w"> </span><span class="l">categories</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">categories</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">url</span><span class="p">:</span><span class="w"> </span><span class="l">/categories/</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">weight</span><span class="p">:</span><span class="w"> </span><span class="m">10</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- <span class="nt">identifier</span><span class="p">:</span><span class="w"> </span><span class="l">tags</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">tags</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">url</span><span class="p">:</span><span class="w"> </span><span class="l">/tags/</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">weight</span><span class="p">:</span><span class="w"> </span><span class="m">20</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- <span class="nt">identifier</span><span class="p">:</span><span class="w"> </span><span class="l">example</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">example.org</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">url</span><span class="p">:</span><span class="w"> </span><span class="l">https://example.org</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">weight</span><span class="p">:</span><span class="w"> </span><span class="m">30</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># Read: https://github.com/reorx/hugo-PaperModX/wiki/FAQs#using-hugos-syntax-highlighter-chroma</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># pygmentsUseClasses: true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># markup:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c">#     highlight:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c">#         # anchorLineNos: true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c">#         codeFences: true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c">#         guessSyntax: true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c">#         lineNos: true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c">#         style: monokai</span><span class="w">
</span></span></span></code></pre></div><hr>
<h2 id="sample-pagemd">Sample <code>Page.md</code></h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yml" data-lang="yml"><span class="line"><span class="cl"><span class="nn">---</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">title</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;My 1st post&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">date</span><span class="p">:</span><span class="w"> </span><span class="ld">2020-09-15T11:30:03</span><span class="m">+00</span><span class="p">:</span><span class="m">00</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># weight: 1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># aliases: [&#34;/first&#34;]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">tags</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s2">&#34;first&#34;</span><span class="p">]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">author</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;Me&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># author: [&#34;Me&#34;, &#34;You&#34;] # multiple authors</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">showToc</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">TocOpen</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">draft</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">hidemeta</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">comments</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">description</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;Desc Text.&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">canonicalURL</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;https://canonical.url/to/page&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">disableShare</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">hideSummary</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">searchHidden</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">ShowReadingTime</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">ShowBreadCrumbs</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">ShowPostNavLinks</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">cover</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">image</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;&lt;image path/url&gt;&#34;</span><span class="w"> </span><span class="c"># image path/url</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">alt</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;&lt;alt text&gt;&#34;</span><span class="w"> </span><span class="c"># alt text</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">caption</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;&lt;text&gt;&#34;</span><span class="w"> </span><span class="c"># display caption under cover</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">relative</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="w"> </span><span class="c"># when using page bundles set this to true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">hidden</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w"> </span><span class="c"># only hide on current single page</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">editPost</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">URL</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;https://github.com/&lt;path_to_repo&gt;/content&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">Text</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;Suggest Changes&#34;</span><span class="w"> </span><span class="c"># edit text</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">appendFilePath</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w"> </span><span class="c"># to append file path to Edit link</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nn">---</span><span class="w">
</span></span></span></code></pre></div><p>You can use it by creating <code>archetypes/post.md</code></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">hugo new --kind post &lt;name&gt;
</span></span></code></pre></div><hr>
]]></content:encoded>
    </item>
    
    <item>
      <title>PaperMod Features</title>
      <link>https://anriclee.github.io/docs/features/</link>
      <pubDate>Wed, 20 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://anriclee.github.io/docs/features/</guid>
      <description>Learn About All Features in original PaperMod</description>
      <content:encoded><![CDATA[<blockquote>
<p>source: <a href="https://adityatelange.github.io/hugo-PaperMod/posts/papermod/papermod-features/">https://adityatelange.github.io/hugo-PaperMod/posts/papermod/papermod-features/</a></p>
</blockquote>
<h3 id="intro">Intro</h3>
<ul>
<li>
<p><strong>We&rsquo;ll be using <code>yml/yaml</code> format for all examples down below, I recommend using <code>yml</code> over <code>toml</code> as it is easier to read.</strong></p>
</li>
<li>
<p>You can find any <a href="https://www.google.com/search?q=yml+to+toml">YML to TOML</a> converters if necessary.</p>
</li>
</ul>
<hr>
<h3 id="assets-jscss">Assets (js/css)</h3>
<p>The following is enabled by default</p>
<ul>
<li><a href="https://gohugo.io/hugo-pipes/minification/">minification</a> - makes the assets size smallest as possible.</li>
<li><a href="https://gohugo.io/hugo-pipes/bundling/">bundling</a> - bundles all the styles in one single asset</li>
<li><a href="https://gohugo.io/hugo-pipes/fingerprint/">fingerprint/integrity</a> check.</li>
</ul>
<hr>
<h3 id="default-theme-lightdarkauto">Default Theme light/dark/auto</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yml" data-lang="yml"><span class="line"><span class="cl"><span class="nt">params</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># defaultTheme: light</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># defaultTheme: dark</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">defaultTheme</span><span class="p">:</span><span class="w"> </span><span class="l">auto</span><span class="w"> </span><span class="c"># to switch between dark or light according to browser theme</span><span class="w">
</span></span></span></code></pre></div></details>
<hr>
<h3 id="theme-switch-toggle-enabled-by-default">Theme Switch Toggle (enabled by default)</h3>
<p>Shows icon besides title of page to change theme</p>
<p>To disable it :</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yml" data-lang="yml"><span class="line"><span class="cl"><span class="nt">disableThemeToggle</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span></code></pre></div><p>You can refer following table for better understanding&hellip;</p>
<table>
<thead>
<tr>
<th><code>defaultTheme</code></th>
<th><code>disableThemeToggle</code></th>
<th>checks local storage?</th>
<th>checks system theme?</th>
<th>Info</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>auto</code></td>
<td>true</td>
<td>No</td>
<td>Yes</td>
<td>only system theme</td>
</tr>
<tr>
<td></td>
<td>false</td>
<td>Yes (if not-&gt;2)</td>
<td>Yes (2)</td>
<td><em>switch present</em></td>
</tr>
<tr>
<td><code>dark</code></td>
<td>true</td>
<td>No</td>
<td>No</td>
<td>force dark only</td>
</tr>
<tr>
<td></td>
<td>false</td>
<td>Yes</td>
<td>No</td>
<td><em>switch present</em></td>
</tr>
<tr>
<td><code>light</code></td>
<td>true</td>
<td>No</td>
<td>No</td>
<td>force light only</td>
</tr>
<tr>
<td></td>
<td>false</td>
<td>Yes</td>
<td>No</td>
<td><em>switch present</em></td>
</tr>
</tbody>
</table>
<hr>
<h3 id="archives-layout">Archives Layout</h3>
<p>Create a page with <code>archive.md</code> in <code>content</code> directory with following content</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">.
</span></span><span class="line"><span class="cl">├── config.yml
</span></span><span class="line"><span class="cl">├── content/
</span></span><span class="line"><span class="cl">│   ├── archives.md   &lt;--- Create archive.md here
</span></span><span class="line"><span class="cl">│   └── posts/
</span></span><span class="line"><span class="cl">├── static/
</span></span><span class="line"><span class="cl">└── themes/
</span></span><span class="line"><span class="cl">    └── PaperModX/
</span></span></code></pre></div><p>and add the following to it</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yml" data-lang="yml"><span class="line"><span class="cl"><span class="nn">---</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">title</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;Archive&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">layout</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;archives&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">url</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;/archives/&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">summary</span><span class="p">:</span><span class="w"> </span><span class="l">archives</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nn">---</span><span class="w">
</span></span></span></code></pre></div><p><strong>Note:</strong> Archives Layout does not support Multilingual Month Translations.</p>
<hr>
<h3 id="regular-mode-default-mode">Regular Mode (default-mode)</h3>
<p><img loading="lazy" src="/docs/features/images/regular.jpg" type="" alt="regular"  /></p>
<hr>
<h3 id="home-info-mode">Home-Info Mode</h3>
<p><img loading="lazy" src="/docs/features/images/homeinfo.jpg" type="" alt="homeinfo"  /></p>
<p>Use 1st entry as some Information</p>
<p>add following to config file</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yml" data-lang="yml"><span class="line"><span class="cl"><span class="nt">params</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">homeInfoParams</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">Title</span><span class="p">:</span><span class="w"> </span><span class="l">Hi there wave</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">Content</span><span class="p">:</span><span class="w"> </span><span class="l">Can be Info, links, about...</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">socialIcons</span><span class="p">:</span><span class="w"> </span><span class="c"># optional</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;&lt;platform&gt;&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">url</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;&lt;link&gt;&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;&lt;platform 2&gt;&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">url</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;&lt;link2&gt;&#34;</span><span class="w">
</span></span></span></code></pre></div><hr>
<h3 id="profile-mode">Profile Mode</h3>
<p><img loading="lazy" src="/docs/features/images/profile.jpg" type="" alt="profile"  /></p>
<p>Shows Index/Home page as Full Page with Social Links and Image</p>
<p>add following to config file</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yml" data-lang="yml"><span class="line"><span class="cl"><span class="nt">params</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">profileMode</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">enabled</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">title</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;&lt;Title&gt;&#34;</span><span class="w"> </span><span class="c"># optional default will be site title</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">subtitle</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;This is subtitle&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">imageUrl</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;&lt;image link&gt;&#34;</span><span class="w"> </span><span class="c"># optional</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">imageTitle</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;&lt;title of image as alt&gt;&#34;</span><span class="w"> </span><span class="c"># optional</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">imageWidth</span><span class="p">:</span><span class="w"> </span><span class="m">120</span><span class="w"> </span><span class="c"># custom size</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">imageHeight</span><span class="p">:</span><span class="w"> </span><span class="m">120</span><span class="w"> </span><span class="c"># custom size</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">buttons</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Archive</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="nt">url</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;/archive&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Github</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="nt">url</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;https://github.com/&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">socialIcons</span><span class="p">:</span><span class="w"> </span><span class="c"># optional</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;&lt;platform&gt;&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">url</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;&lt;link&gt;&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;&lt;platform 2&gt;&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">url</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;&lt;link2&gt;&#34;</span><span class="w">
</span></span></span></code></pre></div><hr>
<h3 id="search-page">Search Page</h3>
<p>PaperModX uses <a href="https://fusejs.io/getting-started/different-builds.html#explanation-of-different-builds">Fuse.js Basic</a> for seach functionality</p>
<p>Add the following to site config, <code>config.yml</code></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yml" data-lang="yml"><span class="line"><span class="cl"><span class="nt">outputs</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">home</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- <span class="l">HTML</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- <span class="l">RSS</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- <span class="l">JSON</span><span class="w"> </span><span class="c"># is necessary</span><span class="w">
</span></span></span></code></pre></div><p>Create a page with <code>search.md</code> in <code>content</code> directory with following content</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yml" data-lang="yml"><span class="line"><span class="cl"><span class="nn">---</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">title</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;Search&#34;</span><span class="w"> </span><span class="c"># in any language you want</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">layout</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;search&#34;</span><span class="w"> </span><span class="c"># is necessary</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># url: &#34;/archive&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># description: &#34;Description for Search&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">summary</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;search&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nn">---</span><span class="w">
</span></span></span></code></pre></div><p>To hide a particular page from being searched, add it in post&rsquo;s fron&rsquo;t matter</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yml" data-lang="yml"><span class="line"><span class="cl"><span class="nn">---</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">searchHidden</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span></code></pre></div><blockquote>
<p>Search Page also has Key bindings:</p>
<ul>
<li>Arrow keys to move up/down the list</li>
<li>Enter key (return) or Right Arrow key to Go to highlighted page</li>
<li>Escape key to clear searchbox and results</li>
</ul>
</blockquote>
<p>For Multilingual use <code>search.&lt;lang&gt;.md</code> ex. <code>search.es.md</code>.</p>
<p><strong>Note:</strong> Search will work only on current language, user is currently on !</p>
<p><strong>Customizing Fusejs Options</strong></p>
<p>Refer <a href="https://fusejs.io/api/options.html">https://fusejs.io/api/options.html</a> for Options, Add those as shown below.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yml" data-lang="yml"><span class="line"><span class="cl"><span class="nt">params</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">fuseOpts</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">isCaseSensitive</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">shouldSort</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">location</span><span class="p">:</span><span class="w"> </span><span class="m">0</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">distance</span><span class="p">:</span><span class="w"> </span><span class="m">1000</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">threshold</span><span class="p">:</span><span class="w"> </span><span class="m">0.4</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">minMatchCharLength</span><span class="p">:</span><span class="w"> </span><span class="m">0</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">keys</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s2">&#34;title&#34;</span><span class="p">,</span><span class="w"> </span><span class="s2">&#34;permalink&#34;</span><span class="p">,</span><span class="w"> </span><span class="s2">&#34;summary&#34;</span><span class="p">,</span><span class="w"> </span><span class="s2">&#34;content&#34;</span><span class="p">]</span><span class="w">
</span></span></span></code></pre></div><hr>
<h3 id="draft-page-indication">Draft Page indication</h3>
<p>adds <code>[draft]</code> mark to indicate draft pages.</p>
<hr>
<h3 id="post-cover-image">Post Cover Image</h3>
<p>In post&rsquo;s page-variables add :</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yml" data-lang="yml"><span class="line"><span class="cl"><span class="nt">cover</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">image</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;&lt;image path/url&gt;&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># can also paste direct link from external site</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># ex. https://i.ibb.co/K0HVPBd/paper-mod-profilemode.png</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">alt</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;&lt;alt text&gt;&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">caption</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;&lt;text&gt;&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">relative</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="w"> </span><span class="c"># To use relative path for cover image, used in hugo Page-bundles</span><span class="w">
</span></span></span></code></pre></div><p>When you include images in the <a href="https://gohugo.io/content-management/page-bundles/">Page Bundle</a>, multiple sizes of the image will automatically be provided using the HTML5 <code>srcset</code> field.</p>
<p>To reduce generation time and size of the site, you can disable this feature using</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yml" data-lang="yml"><span class="line"><span class="cl"><span class="nt">params</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">cover</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">responsiveImages</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="w">
</span></span></span></code></pre></div><p>To enable hyperlinks to the full image size on post pages, use</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yml" data-lang="yml"><span class="line"><span class="cl"><span class="nt">params</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">cover</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">linkFullImages</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span></code></pre></div><hr>
<h3 id="share-buttons-on-post">Share Buttons on post</h3>
<p>Displays Share Buttons at Bottom of each post</p>
<p>to show share buttons add</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yml" data-lang="yml"><span class="line"><span class="cl"><span class="nt">params</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">ShowShareButtons</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span></code></pre></div><hr>
<h3 id="show-post-reading-time">Show post reading time</h3>
<p>Displays Reading Time (the estimated time, in minutes, it takes to read the content.)</p>
<p>To show reading time add</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yml" data-lang="yml"><span class="line"><span class="cl"><span class="nt">Params</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">ShowReadingTime</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span></code></pre></div><hr>
<h3 id="show-table-of-contents-toc-on-blog-post">Show Table of Contents (Toc) on blog post</h3>
<p>Displays ToC on blog-pages</p>
<p>To show ToC add following to page-variables</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yml" data-lang="yml"><span class="line"><span class="cl"><span class="nt">ShowToc</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span></code></pre></div><p>To keep Toc Open <strong>by default</strong> on a post add following to page-variables:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yml" data-lang="yml"><span class="line"><span class="cl"><span class="nt">TocOpen</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span></code></pre></div><hr>
<h3 id="breadcrumb-navigation">BreadCrumb Navigation</h3>
<p>Adds BreadCrumb Navigation above Post&rsquo;s Title to show subsections and Navigation to Home</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yml" data-lang="yml"><span class="line"><span class="cl"><span class="nt">params</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">ShowBreadCrumbs</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span></code></pre></div><p>Can be diabled for particular page&rsquo;s front-matter</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yml" data-lang="yml"><span class="line"><span class="cl"><span class="nn">---</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">ShowBreadCrumbs</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nn">---</span><span class="w">
</span></span></span></code></pre></div><hr>
<h3 id="edit-link-for-posts">Edit Link for Posts</h3>
<p>Add a button to suggest changes by using the file path of the post to link to a edit destination.</p>
<p>For site config use:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yml" data-lang="yml"><span class="line"><span class="cl"><span class="nt">Params</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">editPost</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">URL</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;https://github.com/&lt;path_to_repo&gt;/content&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">Text</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;Suggest Changes&#34;</span><span class="w"> </span><span class="c"># edit text</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">appendFilePath</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w"> </span><span class="c"># to append file path to Edit link</span><span class="w">
</span></span></span></code></pre></div><p>Can be modified for individual pages</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yml" data-lang="yml"><span class="line"><span class="cl"><span class="nn">---</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">editPost</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">URL</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;https://github.com/&lt;path_to_repo&gt;/content&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">Text</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;Suggest Changes&#34;</span><span class="w"> </span><span class="c"># edit text</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">appendFilePath</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w"> </span><span class="c"># to append file path to Edit link</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nn">---</span><span class="w">
</span></span></span></code></pre></div><p>The example above would yield the following link for the post file <code>posts/post-name.md</code>:
<a href="https://github.com/">https://github.com/</a>&lt;path_to_repo&gt;/content/posts/post-name.md</p>
<table>
<thead>
<tr>
<th>Parameter</th>
<th>Required</th>
<th>Default Value</th>
</tr>
</thead>
<tbody>
<tr>
<td>editPost.URL</td>
<td>true</td>
<td>-</td>
</tr>
<tr>
<td>editPost.appendFilePath</td>
<td>false</td>
<td>false</td>
</tr>
<tr>
<td>editPost.Text</td>
<td>false</td>
<td>&ldquo;Edit&rdquo;</td>
</tr>
</tbody>
</table>
<p>Since the link generated is a regular HTML anchor tag <code>&lt;a href=...&gt;</code>, you can
also use other URL schemas like <code>mailto://</code>, e.g.
<code>URL: &quot;mailto://mail@example.com?subject=Suggesting changes for &quot;</code></p>
<hr>
<h3 id="other-posts-suggestion-below-a-post">Other Posts suggestion below a post</h3>
<p>Adds a Previous / Next post suggestion under a single post</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yml" data-lang="yml"><span class="line"><span class="cl"><span class="nt">params</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">ShowPostNavLinks</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span></code></pre></div><hr>
<h3 id="multiple-authors">Multiple Authors</h3>
<p>To Use multiple authors for a post, in post-variables:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yml" data-lang="yml"><span class="line"><span class="cl"><span class="nn">---</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">author</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s2">&#34;Me&#34;</span><span class="p">,</span><span class="w"> </span><span class="s2">&#34;You&#34;</span><span class="p">]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nn">---</span><span class="w">
</span></span></span></code></pre></div><p>To use Multiple Authors Site-wide, in <code>config.yml</code>:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yml" data-lang="yml"><span class="line"><span class="cl"><span class="nt">params</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">author</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s2">&#34;Me&#34;</span><span class="p">,</span><span class="w"> </span><span class="s2">&#34;You&#34;</span><span class="p">]</span><span class="w">
</span></span></span></code></pre></div><hr>
<h3 id="comments">Comments</h3>
<p>to add comments, create a html file</p>
<p><code>layouts/partials/comments.html</code></p>
<p>and paste code provided by your comments provider</p>
<p>also in config add this</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yml" data-lang="yml"><span class="line"><span class="cl"><span class="nt">params</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">comments</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span></code></pre></div><p>read more about this <a href="https://gohugo.io/content-management/comments/">hugo-comments</a></p>
<hr>
<h3 id="accesskeys">AccessKeys</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">c - ToC Open/Close
</span></span><span class="line"><span class="cl">g - Go To Top
</span></span><span class="line"><span class="cl">h - Home (according to current lang)
</span></span><span class="line"><span class="cl">t - Theme toggle
</span></span><span class="line"><span class="cl">/ - Jumps to search page if in menu
</span></span></code></pre></div><p><a href="https://www.w3schools.com/tags/att_global_accesskey.asp">What&rsquo;s AccessKeys ?</a></p>
<hr>
<h3 id="enhanced-seo">Enhanced SEO</h3>
<p><strong>Enabled only when <code>env: production</code></strong></p>
<ul>
<li><a href="https://support.google.com/webmasters/answer/7506797?hl=en">Rich Results/Snippets Support</a></li>
</ul>
<h4 id="twitter-cards-support">Twitter Cards Support</h4>
<ul>
<li>The Twitter Cards metadata, except <code>twitter:image</code> should not require
additional configuration, since it is generated from metadata that
you should already have (for instance the page title and description).</li>
<li>The <code>twitter:image</code> uses the <a href="#post-cover-image">Post Cover Image</a>, if present.</li>
<li>In the absence of a cover images, the first image from the <code>images</code>
frontmatter (a list) is used.
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">images</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="l">image_01.png</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="l">image_02.png</span><span class="w">
</span></span></span></code></pre></div></li>
<li>Finally, if neither of those are provided, <code>twitter:image</code> comes from the first
<a href="https://gohugo.io/content-management/page-bundles/">Page Bundle</a>
image with <code>feature</code> in the name, with a fallback to the first image with
<code>cover</code> or <code>thumbnail</code> in the name.</li>
</ul>
<h4 id="opengraph-support">OpenGraph support</h4>
<ul>
<li>The OpenGraph metadata, except <code>og:image</code> should not require
additional configuration, since it is generated from metadata that
you should already have (for instance the page title and description).</li>
<li>The <code>og:image</code> uses the <a href="#post-cover-image">Post Cover Image</a>, if present.</li>
<li>In the absence of a cover images, the first image from the <code>images</code>
frontmatter (a list) is used.
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">images</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="l">image_01.png</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="l">image_02.png</span><span class="w">
</span></span></span></code></pre></div></li>
<li>Finally, if neither of those are provided, <code>og:image</code> comes from the first
<a href="https://gohugo.io/content-management/page-bundles/">Page Bundle</a>
image with <code>feature</code> in the name, with a fallback to the first image with
<code>cover</code> or <code>thumbnail</code> in the name.</li>
<li>For pages, you can also add audio (using frontmatter <code>audio: filename.ext</code>) and/or
videos.
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">videos</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="l">filename01.mov</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="l">filename02.avi</span><span class="w">
</span></span></span></code></pre></div></li>
</ul>
<hr>
<h3 id="multilingual-support">Multilingual Support</h3>
<hr>
<h3 id="misc">Misc</h3>
<h4 id="scroll-bar-themed-by-default">Scroll-Bar themed (by default)</h4>
<h4 id="smooth-scroll-between-in-page-links-by-default">Smooth Scroll between in-page links (by default)</h4>
<h4 id="scroll-to-top-button-by-default">Scroll-to-Top Button (by default)</h4>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">Displays a Scroll-to-Top button in right-bottom corner
</span></span></code></pre></div><h4 id="google-analytics-integration">Google Analytics integration</h4>
<h4 id="syntax-highlighting">Syntax highlighting</h4>
<h4 id="rss-feeds">RSS feeds</h4>
]]></content:encoded>
    </item>
    
    <item>
      <title>Hugo 中的命令行模式</title>
      <link>https://anriclee.github.io/posts/hugo_cmd_pattern/</link>
      <pubDate>Fri, 26 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://anriclee.github.io/posts/hugo_cmd_pattern/</guid>
      <description>最近在用 hugo 构建了个人博客之后，便有兴趣想研究下其源码。但是源码的体量之大，逻辑之复杂出乎我的意料。不过好在源码的结构比较清晰，有许多地方值得借鉴。
比如它的程序入口，非常简洁：
func main() { resp := commands.Execute(os.Args[1:]) if resp.Err != nil { if resp.IsUserError() { resp.Cmd.Println(&amp;#34;&amp;#34;) resp.Cmd.Println(resp.Cmd.UsageString()) } os.Exit(-1) } } 它将所有根据命令行参数传入的指令统一封装到 commands 包中。后面有新命令需求时，只需要新建一个 cmd 文件即可。
它是怎么做到的呢？
简而言之，就是在程序入口处将所有的命令类汇总，然后再根据输入参数args，决定要执行哪个cmd，看似增加了代码的复杂度，但是对于后续命令的扩展显得非常方便。
hugo 中使用了 builder 模式将所有的命令汇总，我这里简单起见，只初始化了一个数组，主要是体会其开闭原则的思想即可。
Talk is cheap, show me the code
借鉴它的思路，我写了一个简化版，可以参看，代码链接.</description>
      <content:encoded><![CDATA[<p>最近在用 hugo 构建了个人博客之后，便有兴趣想研究下其源码。但是源码的体量之大，逻辑之复杂出乎我的意料。不过好在源码的结构比较清晰，有许多地方值得借鉴。</p>
<p>比如它的程序入口，非常简洁：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-Golang" data-lang="Golang"><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">resp</span> <span class="o">:=</span> <span class="nx">commands</span><span class="p">.</span><span class="nf">Execute</span><span class="p">(</span><span class="nx">os</span><span class="p">.</span><span class="nx">Args</span><span class="p">[</span><span class="mi">1</span><span class="p">:])</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">resp</span><span class="p">.</span><span class="nx">Err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">resp</span><span class="p">.</span><span class="nf">IsUserError</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">resp</span><span class="p">.</span><span class="nx">Cmd</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="nx">resp</span><span class="p">.</span><span class="nx">Cmd</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">resp</span><span class="p">.</span><span class="nx">Cmd</span><span class="p">.</span><span class="nf">UsageString</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="nx">os</span><span class="p">.</span><span class="nf">Exit</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>它将所有根据命令行参数传入的指令统一封装到 <code>commands</code> 包中。后面有新命令需求时，只需要新建一个 cmd 文件即可。</p>
<p>它是怎么做到的呢？</p>
<p>简而言之，就是在程序入口处将所有的命令类汇总，然后再根据输入参数<code>args</code>，决定要执行哪个<code>cmd</code>，看似增加了代码的复杂度，但是对于后续命令的扩展显得非常方便。</p>
<p>hugo 中使用了 builder 模式将所有的命令汇总，我这里简单起见，只初始化了一个数组，主要是体会其开闭原则的思想即可。</p>
<blockquote>
<p>Talk is cheap, show me the code</p>
</blockquote>
<p>借鉴它的思路，我写了一个简化版，可以参看，<a href="https://github.com/anriclee/GoPatterns/tree/main/cmdpattern">代码链接</a>.</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Math Typesetting</title>
      <link>https://anriclee.github.io/docs/math-typesetting/</link>
      <pubDate>Fri, 08 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://anriclee.github.io/docs/math-typesetting/</guid>
      <description>A brief guide to setup KaTeX</description>
      <content:encoded><![CDATA[<p>Mathematical notation in a Hugo project can be enabled by using third party JavaScript libraries.</p>
<p>In this example we will be using <a href="https://katex.org/">KaTeX</a></p>
<ul>
<li>Create a partial under <code>/layouts/partials/math.html</code></li>
<li>Within this partial reference the <a href="https://katex.org/docs/autorender.html">Auto-render Extension</a> or host these scripts locally.</li>
<li>Include the partial in your templates (<a href="../faq/#custom-head--footer"><code>extend_head.html</code></a>) like so:</li>
<li>refer <a href="https://github.com/adityatelange/hugo-PaperMod/issues/236">ISSUE #236</a></li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="o">{{</span> <span class="k">if</span> or .Params.math .Site.Params.math <span class="o">}}</span>
</span></span><span class="line"><span class="cl"><span class="o">{{</span> partial <span class="s2">&#34;math.html&#34;</span> . <span class="o">}}</span>
</span></span><span class="line"><span class="cl"><span class="o">{{</span> end <span class="o">}}</span>
</span></span></code></pre></div><ul>
<li>To enable KaTex globally set the parameter <code>math</code> to <code>true</code> in a project&rsquo;s configuration</li>
<li>To enable KaTex on a per page basis include the parameter <code>math: true</code> in content files</li>
</ul>
<p><strong>Note:</strong> Use the online reference of <a href="https://katex.org/docs/supported.html">Supported TeX Functions</a></p>



<!-- KaTeX -->
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/katex@0.11.1/dist/katex.min.css" integrity="sha384-zB1R0rpPzHqg7Kpt0Aljp8JPLqbXI3bhnPWROx27a9N0Ll6ZP/+DiW/UqRcLbRjq" crossorigin="anonymous">
<script defer src="https://cdn.jsdelivr.net/npm/katex@0.11.1/dist/katex.min.js" integrity="sha384-y23I5Q6l+B6vatafAwxRu/0oK/79VlbSz7Q9aiSZUvyWYIYsd+qj+o24G5ZU2zJz" crossorigin="anonymous"></script>
<script defer src="https://cdn.jsdelivr.net/npm/katex@0.11.1/dist/contrib/auto-render.min.js" integrity="sha384-kWPLUVMOks5AQFrykwIup5lo0m3iMkkHrD0uJ4H5cjeGihAutqP0yW0J6dpFiVkI" crossorigin="anonymous" onload="renderMathInElement(document.body);"></script>


<h3 id="examples">Examples</h3>


<p>
Inline math: \(\varphi = \dfrac{1+\sqrt5}{2}= 1.6180339887…\)
</p>

<p>Block math:</p>
<p>$$
\varphi = 1+\frac{1} {1+\frac{1} {1+\frac{1} {1+\cdots} } }
$$</p>]]></content:encoded>
    </item>
    
    <item>
      <title>Emoji Support</title>
      <link>https://anriclee.github.io/docs/emoji-support/</link>
      <pubDate>Tue, 05 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://anriclee.github.io/docs/emoji-support/</guid>
      <description>Guide to emoji usage in Hugo</description>
      <content:encoded><![CDATA[<p>Emoji can be enabled in a Hugo project in a number of ways.</p>
<p>The <a href="https://gohugo.io/functions/emojify/"><code>emojify</code></a> function can be called directly in templates or <a href="https://gohugo.io/templates/shortcode-templates/#inline-shortcodes">Inline Shortcodes</a>.</p>
<p>To enable emoji globally, set <code>enableEmoji</code> to <code>true</code> in your site&rsquo;s <a href="https://gohugo.io/getting-started/configuration/">configuration</a> and then you can type emoji shorthand codes directly in content files; e.g.</p>
<p><span class="nowrap"><span class="emojify">🙈</span> <code>🙈</code></span>  <span class="nowrap"><span class="emojify">🙉</span> <code>🙉</code></span>  <span class="nowrap"><span class="emojify">🙊</span> <code>🙊</code></span></p>
<br>
<p>The <a href="http://www.emoji-cheat-sheet.com/">Emoji cheat sheet</a> is a useful reference for emoji shorthand codes.</p>
<hr>
<p><strong>N.B.</strong> The above steps enable Unicode Standard emoji characters and sequences in Hugo, however the rendering of these glyphs depends on the browser and the platform. To style the emoji you can either use a third party emoji font or a font stack; e.g.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl">.emoji {
</span></span><span class="line"><span class="cl">font-family: Apple Color Emoji, Segoe UI Emoji, NotoColorEmoji, Segoe UI Symbol, Android Emoji, EmojiSymbols;
</span></span><span class="line"><span class="cl">}</span></span></code></pre></div>


<style>
.emojify {
	font-family: Apple Color Emoji, Segoe UI Emoji, NotoColorEmoji, Segoe UI Symbol, Android Emoji, EmojiSymbols;
	font-size: 2rem;
	vertical-align: middle;
}
@media screen and (max-width:650px) {
  .nowrap {
    display: block;
    margin: 25px 0;
  }
}
</style>]]></content:encoded>
    </item>
    
  </channel>
</rss>
