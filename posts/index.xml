<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Posts on ReadByWord</title>
    <link>https://anriclee.github.io/posts/</link>
    <description>Recent content in Posts on ReadByWord</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sat, 02 Sep 2023 23:12:31 +0800</lastBuildDate><atom:link href="https://anriclee.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>[译] Spring IOC 容器</title>
      <link>https://anriclee.github.io/posts/springframework/core/the_ioc_container/container_and_beans/</link>
      <pubDate>Sat, 02 Sep 2023 23:12:31 +0800</pubDate>
      
      <guid>https://anriclee.github.io/posts/springframework/core/the_ioc_container/container_and_beans/</guid>
      <description>Spring IOC 和 bean 的简介 本章涵盖了 SpringFramework 中的控制反转原则（Ioc）的实现。IoC 也被称为依赖注入（DI）。它是这样的一种过程，在此期间对象仅通过构造函数参数、工厂方法的参数或者当对象实例被构造后或者通过工厂方法返回时在它上面设置的属性定义自己的依赖（即对象必须合作的其他对象）。
当容器创建这些 bean 后，再注入这些依赖。
这个过程本质上与bean 通过使用直接的类构造函数进行直接实例化或者通过类似 Service Locator模式来寻找依赖的位置是相反的（这也是 IoC 名字的由来）。
org.springframework.beans 和 org.springframework.context 包是 SpringFramework IoC 容器的基石。BeanFactory 接口提供了一种更先进的能够控制人已类型对象的配置机制。ApplicationContext 是 BeanFactory 的子接口。它增加了下面的特性：
与 Spring 的 AOP 特性更容易整合 消息资源处理（在国际化场景的使用） 事件发布 例如用于 Web 应用的 WebApplicationContext 应用层特定的上下文 总而言之，BeanFactory 提供了配置的框架和基本的功能。ApplicationContext 增加了更多的企业特定的功能。ApplicationContext 完全是 BeanFactory 的超集。在本章关于 Spring IoC 容器做专门描述时会用到。想要获取更多的关于使用 ApplicationContext 而非 BeanFactory 的信息，参见介绍 BeanFactory API 的部分。
在 Spring 中，作为你应用基石同时可以被 Spring IoC 容器所操控的对象就被称之为 bean。bean 就是被 Spring IoC 容器实例化、组装和设置的对象。否则，一个 bean 就是你应用程序中诸多对象中的一个。 Beans 以及他们依赖关系，反映在容器使用的配置元数据中。</description>
      <content:encoded><![CDATA[<h1 id="spring-ioc-和-bean-的简介">Spring IOC 和 bean 的简介</h1>
<p>本章涵盖了 SpringFramework 中的控制反转原则（Ioc）的实现。IoC 也被称为依赖注入（DI）。它是这样的一种过程，在此期间对象仅通过构造函数参数、工厂方法的参数或者当对象实例被构造后或者通过工厂方法返回时在它上面设置的属性定义自己的依赖（即对象必须合作的其他对象）。</p>
<p>当容器创建这些 bean 后，再注入这些依赖。</p>
<p>这个过程本质上与bean 通过使用直接的类构造函数进行直接实例化或者通过类似 Service Locator模式来寻找依赖的位置是相反的（这也是 IoC 名字的由来）。</p>
<p><code>org.springframework.beans</code> 和 <code>org.springframework.context</code> 包是 SpringFramework IoC 容器的基石。<code>BeanFactory</code> 接口提供了一种更先进的能够控制人已类型对象的配置机制。<code>ApplicationContext</code> 是 <code>BeanFactory</code> 的子接口。它增加了下面的特性：</p>
<ul>
<li>与 Spring 的 AOP 特性更容易整合</li>
<li>消息资源处理（在国际化场景的使用）</li>
<li>事件发布</li>
<li>例如用于 Web 应用的 <code>WebApplicationContext</code> 应用层特定的上下文</li>
</ul>
<p>总而言之，<code>BeanFactory</code> 提供了配置的框架和基本的功能。<code>ApplicationContext</code> 增加了更多的企业特定的功能。<code>ApplicationContext</code> 完全是 <code>BeanFactory</code> 的超集。在本章关于 Spring IoC 容器做专门描述时会用到。想要获取更多的关于使用 <code>ApplicationContext</code> 而非 <code>BeanFactory</code> 的信息，参见介绍 <a href="https://docs.spring.io/spring-framework/reference/core/beans/beanfactory.html">BeanFactory</a> API 的部分。</p>
<p>在 Spring 中，作为你应用基石同时可以被 Spring IoC 容器所操控的对象就被称之为 bean。bean 就是被 Spring IoC 容器实例化、组装和设置的对象。否则，一个 bean 就是你应用程序中诸多对象中的一个。 Beans 以及他们依赖关系，反映在容器使用的配置元数据中。</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>[译] 容器概述</title>
      <link>https://anriclee.github.io/posts/springframework/core/the_ioc_container/container_overview/</link>
      <pubDate>Sat, 02 Sep 2023 23:12:31 +0800</pubDate>
      
      <guid>https://anriclee.github.io/posts/springframework/core/the_ioc_container/container_overview/</guid>
      <description>容器概述 org.springframework.context.ApplicationContext 接口代表了 Spring IoC 容器，它主要负责通过读取配置文件对 bean 进行实例化、配置和组装。 容器通过读取配置元数据来获知要实例化、配置和组装那些对象。配置的元数据一般为 XML、Java 注解和 Java 代码的形式，它让你能够表达组成你应用程序的对象以及对象之间的丰富的相互依赖关系。
Spring 提供了 ApplicationContext 接口的若干实现。在单体应用中，创建一个 ClassPathXmlApplicationContext 或者 FileSystemXmlApplicationContext 是很常见的。虽然 XML 是定义配置元数据的传统形式，但是你还可以通过在 XML 文件里面进行声明配置来告诉容器对于 Java 注解或者Java代码格式的支持。
在大多数的应用场景中，并不需要显式的代码来实例化 Spring IoC 容器。例如，在 Web 应用的场景中，在 web.xml 文件中仅用简单的 8 行代码左右的样板 Web XML 描述符即可满足需要（参考 Convenient ApplicationContext Instantiation for Web Applications）。如果你使 Eclipse 中的 Spring 工具（在 Eclipse 开发环境中），你可以通过几下鼠标点击或者按键的敲击就能轻松创建这样一个样板配置文件。
下图展示了关于 Spring 工作机制的一个全局视角。在 ApplicationContext 被创建和初始化后，你的应用类和配置元数据已经捆绑在一起了，这样一来，你就有一个充分配置并且可执行的系统或者应用程序。
配置元数据 如上图所示，Spring Ioc 容器接收到一种格式的配置元数据。这个配置元数据代表了，作为一个应用开发者你告诉 Spring 容器在应用程序中，如何实例化、配置和组装对象。
传统的配置元数据是一种简单并且符合直觉的 XML 形式，在本章的大部分地方，也用此来表达关键的概念和 Spring IoC 容器的特性。
基于 XML 的元数据不是配置元数据的唯一允许的形式。Spring IoC 容器自身与配置元数据实际上是什么格式完全解耦。目前许多开发者在应用程序中选择基于Java 的配置。</description>
      <content:encoded><![CDATA[<h1 id="容器概述">容器概述</h1>
<p><code>org.springframework.context.ApplicationContext</code> 接口代表了 Spring IoC 容器，它主要负责通过读取配置文件对 bean 进行实例化、配置和组装。
容器通过读取配置元数据来获知要实例化、配置和组装那些对象。配置的元数据一般为 XML、Java 注解和 Java 代码的形式，它让你能够表达组成你应用程序的对象以及对象之间的丰富的相互依赖关系。</p>
<p>Spring 提供了 <code>ApplicationContext</code> 接口的若干实现。在单体应用中，创建一个 <code>ClassPathXmlApplicationContext</code> 或者 <code>FileSystemXmlApplicationContext</code> 是很常见的。虽然 XML 是定义配置元数据的传统形式，但是你还可以通过在 XML 文件里面进行声明配置来告诉容器对于 Java 注解或者Java代码格式的支持。</p>
<p>在大多数的应用场景中，并不需要显式的代码来实例化 Spring IoC 容器。例如，在 Web 应用的场景中，在 <code>web.xml</code> 文件中仅用简单的 8 行代码左右的样板 Web XML 描述符即可满足需要（参考 <a href="https://docs.spring.io/spring-framework/reference/core/beans/context-introduction.html#context-create">Convenient ApplicationContext Instantiation for Web Applications</a>）。如果你使 Eclipse 中的 Spring 工具（在 Eclipse 开发环境中），你可以通过几下鼠标点击或者按键的敲击就能轻松创建这样一个样板配置文件。</p>
<p>下图展示了关于 Spring 工作机制的一个全局视角。在 <code>ApplicationContext</code> 被创建和初始化后，你的应用类和配置元数据已经捆绑在一起了，这样一来，你就有一个充分配置并且可执行的系统或者应用程序。</p>
<p><img loading="lazy" src="/posts/springframework/core/the_ioc_container/container_overview/imgs/ioc.png" type="" alt="Spring"  /></p>
<h1 id="配置元数据">配置元数据</h1>
<p>如上图所示，Spring Ioc 容器接收到一种格式的配置元数据。这个配置元数据代表了，作为一个应用开发者你告诉 Spring 容器在应用程序中，如何实例化、配置和组装对象。</p>
<p>传统的配置元数据是一种简单并且符合直觉的 XML 形式，在本章的大部分地方，也用此来表达关键的概念和 Spring IoC 容器的特性。</p>
<blockquote>
<p>基于 XML 的元数据不是配置元数据的唯一允许的形式。Spring IoC 容器自身与配置元数据实际上是什么格式完全解耦。目前许多开发者在应用程序中选择<a href="https://docs.spring.io/spring-framework/reference/core/beans/java.html">基于Java 的配置</a>。</p>
</blockquote>
<p>在 Spring 容器中使用其他格式的配置元数据，可参考：</p>
<ul>
<li><a href="https://docs.spring.io/spring-framework/reference/core/beans/annotation-config.html">基于注解的配置</a>：通过基于注解的配置元数据定义 beans</li>
<li><a href="https://docs.spring.io/spring-framework/reference/core/beans/java.html">基于Java的配置</a>：通过使用 Java 而不是 XML 文件来定义你应用类之外的 beans。使用这些特性可以参考 <a href="https://docs.spring.io/spring-framework/docs/6.0.11/javadoc-api/org/springframework/context/annotation/Configuration.html">@Configuration</a>, <a href="https://docs.spring.io/spring-framework/docs/6.0.11/javadoc-api/org/springframework/context/annotation/Bean.html">@Bean</a>, <a href="https://docs.spring.io/spring-framework/docs/6.0.11/javadoc-api/org/springframework/context/annotation/Import.html">@Import</a>, <a href="https://docs.spring.io/spring-framework/docs/6.0.11/javadoc-api/org/springframework/context/annotation/DependsOn.html">@DependsOn</a> 注解。</li>
</ul>
<p>Spring 的配置由至少一个，通常为1个以上容器可以操作的 bean 组成。基于 XML 的配置元数据，配置顶部根元素 <beans/> 里面的 <bean/> 元素。Java 配置通常在一个 @Configuration 类里面使用 @Bean 注解方法。</p>
<p>这些 bean 的定义与组成你应用的实际对象相对应。通常地，你需要定义服务层对象，持久化层对象例如仓库或者数据接入对象（DAOs），例如 Web Controller 的表现层对象，例如一个 JPA EntityManagerFactory 的基础层对象，JMS 队列等等。通常不在容器里面对一个领域层对象进行精细化配置，因为创建和加载领域对象，通常是存储层和业务层的逻辑。</p>
<p>下面的例子，展示了基于 XML 的配置元数据的基本结构：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-XML" data-lang="XML"><span class="line"><span class="cl"><span class="cp">&lt;?xml version=&#34;1.0&#34; encoding=&#34;UTF-8&#34;?&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;beans</span> <span class="na">xmlns=</span><span class="s">&#34;http://www.springframework.org/schema/beans&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="na">xmlns:xsi=</span><span class="s">&#34;http://www.w3.org/2001/XMLSchema-instance&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="na">xsi:schemaLocation=</span><span class="s">&#34;http://www.springframework.org/schema/beans
</span></span></span><span class="line"><span class="cl"><span class="s">		https://www.springframework.org/schema/beans/spring-beans.xsd&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&#34;...&#34;</span> <span class="na">class=</span><span class="s">&#34;...&#34;</span><span class="nt">&gt;</span> [1][2]
</span></span><span class="line"><span class="cl">		<span class="c">&lt;!-- collaborators and configuration for this bean go here --&gt;</span>
</span></span><span class="line"><span class="cl">	<span class="nt">&lt;/bean&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&#34;...&#34;</span> <span class="na">class=</span><span class="s">&#34;...&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">		<span class="c">&lt;!-- collaborators and configuration for this bean go here --&gt;</span>
</span></span><span class="line"><span class="cl">	<span class="nt">&lt;/bean&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c">&lt;!-- more bean definitions go here --&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/beans&gt;</span>
</span></span></code></pre></div><p>[1]：id 属性唯一标识一个独立的 bean 定义
[2]：class 属性定义了 bean的类型，并且使用类的全限定名</p>
<p>id 属性的值可以被用来引用互相协作的对象。引用协作的对象的 XML并不在此例中，参考<a href="https://docs.spring.io/spring-framework/reference/core/beans/dependencies.html">依赖</a>部分获取更多的信息。</p>
<h1 id="初始化一个容器">初始化一个容器</h1>
<p>提供给 <code>ApplicationContext</code> 构造器的位置路径是一些表示资源的字符串，这些字符串可以让容器从各种外部资源加载配置元数据，例如本地文件系统，Java 类路径等等。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-Java" data-lang="Java"><span class="line"><span class="cl"><span class="n">ApplicationContext</span> <span class="n">context</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ClassPathXmlApplicationContext</span><span class="o">(</span><span class="s">&#34;services.xml&#34;</span><span class="o">,</span> <span class="s">&#34;daos.xml&#34;</span><span class="o">);</span>
</span></span></code></pre></div><p>在你了解了 Spring 的 IoC 容器后，你也许想对 Spring 的“资源：抽象了解更多，这提供了一种方便的从 URI 语法标识中读取输入流的机制。特别是 Resource 路径用于构建应用的上下文。</p>
<p>下面的例子展示了服务层的对象(services.xml)的配置文件：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-XML" data-lang="XML"><span class="line"><span class="cl"><span class="cp">&lt;?xml version=&#34;1.0&#34; encoding=&#34;UTF-8&#34;?&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;beans</span> <span class="na">xmlns=</span><span class="s">&#34;http://www.springframework.org/schema/beans&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="na">xmlns:xsi=</span><span class="s">&#34;http://www.w3.org/2001/XMLSchema-instance&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="na">xsi:schemaLocation=</span><span class="s">&#34;http://www.springframework.org/schema/beans
</span></span></span><span class="line"><span class="cl"><span class="s">		https://www.springframework.org/schema/beans/spring-beans.xsd&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c">&lt;!-- services --&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&#34;petStore&#34;</span> <span class="na">class=</span><span class="s">&#34;org.springframework.samples.jpetstore.services.PetStoreServiceImpl&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">		<span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&#34;accountDao&#34;</span> <span class="na">ref=</span><span class="s">&#34;accountDao&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">		<span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&#34;itemDao&#34;</span> <span class="na">ref=</span><span class="s">&#34;itemDao&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">		<span class="c">&lt;!-- additional collaborators and configuration for this bean go here --&gt;</span>
</span></span><span class="line"><span class="cl">	<span class="nt">&lt;/bean&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c">&lt;!-- more bean definitions for services go here --&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/beans&gt;</span>
</span></span></code></pre></div><p>下面的例子展示了数据接入层(daos.xml)文件：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-XML" data-lang="XML"><span class="line"><span class="cl"><span class="cp">&lt;?xml version=&#34;1.0&#34; encoding=&#34;UTF-8&#34;?&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;beans</span> <span class="na">xmlns=</span><span class="s">&#34;http://www.springframework.org/schema/beans&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="na">xmlns:xsi=</span><span class="s">&#34;http://www.w3.org/2001/XMLSchema-instance&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="na">xsi:schemaLocation=</span><span class="s">&#34;http://www.springframework.org/schema/beans
</span></span></span><span class="line"><span class="cl"><span class="s">		https://www.springframework.org/schema/beans/spring-beans.xsd&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&#34;accountDao&#34;</span>
</span></span><span class="line"><span class="cl">		<span class="na">class=</span><span class="s">&#34;org.springframework.samples.jpetstore.dao.jpa.JpaAccountDao&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">		<span class="c">&lt;!-- additional collaborators and configuration for this bean go here --&gt;</span>
</span></span><span class="line"><span class="cl">	<span class="nt">&lt;/bean&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&#34;itemDao&#34;</span> <span class="na">class=</span><span class="s">&#34;org.springframework.samples.jpetstore.dao.jpa.JpaItemDao&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">		<span class="c">&lt;!-- additional collaborators and configuration for this bean go here --&gt;</span>
</span></span><span class="line"><span class="cl">	<span class="nt">&lt;/bean&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c">&lt;!-- more bean definitions for data access objects go here --&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/beans&gt;</span>
</span></span></code></pre></div><p>在上面的例子中，服务层由 <code>PetStoreServiceImpl</code> 类和两种类型分别为 <code>JpaAccountDao</code> 和 <code>JpaItemDao</code>(基于JPA对象关系映射标准) 的数据接入对象。<code>property name</code> 元素引用 JavaBean 属性的名字，<code>ref</code> 元素引用另外一个 bean 定义的名字。<code>id</code> 和 <code>ref</code> 元素之间的联系，表达了两个互相协作对象之间的依赖关系。想了解更多配置对象依赖的细节，参考 <a href="https://docs.spring.io/spring-framework/reference/core/beans/dependencies.html">依赖</a>。</p>
<p>TO BE CONTINUED &hellip;..</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>[译] SpringFramework 文档</title>
      <link>https://anriclee.github.io/posts/springframework/directory/</link>
      <pubDate>Sat, 02 Sep 2023 11:46:07 +0800</pubDate>
      
      <guid>https://anriclee.github.io/posts/springframework/directory/</guid>
      <description>概述 历史，设计哲学，反馈，开始
核心 IoC容器，事件，资源，i18n，验证，数据绑定，类型转换，SpEL，AOP，AOT
测试 对象 Mock，测试上下文框架，Spring MVC 测试，Web 测试客户端
数据接入 事务，DAO 支持，JDBC，R2DBC，O/R 映射，XML 编码
Web Servlet SpringMVC,WebSocket,SockJS,STOMP 通信
Web 响应式 Spring WebFlux, WebClient, WebSocket, RSocket.
[集成] REST 客户端, JMS, JCA, JMX, Email, 任务, 调度, 缓存, 可见性.
语言 Kotlin, Groovy, Dynamic 语言.
附录 Spring 属性</description>
      <content:encoded><![CDATA[<ul>
<li>
<p><a href="Overview">概述</a> 历史，设计哲学，反馈，开始</p>
</li>
<li>
<p><a href="">核心</a> IoC容器，事件，资源，i18n，验证，数据绑定，类型转换，SpEL，AOP，AOT</p>
</li>
<li>
<p><a href="">测试</a> 对象 Mock，测试上下文框架，Spring MVC 测试，Web 测试客户端</p>
</li>
<li>
<p><a href="">数据接入</a> 事务，DAO 支持，JDBC，R2DBC，O/R 映射，XML 编码</p>
</li>
<li>
<p><a href="">Web Servlet</a> SpringMVC,WebSocket,SockJS,STOMP 通信</p>
</li>
<li>
<p><a href="">Web 响应式</a> Spring WebFlux, WebClient, WebSocket, RSocket.</p>
</li>
<li>
<p>[集成] REST 客户端, JMS, JCA, JMX, Email, 任务, 调度, 缓存, 可见性.</p>
</li>
<li>
<p><a href="">语言</a> Kotlin, Groovy, Dynamic 语言.</p>
</li>
<li>
<p><a href="">附录</a> Spring 属性</p>
</li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>[译] SpringFramework 概述</title>
      <link>https://anriclee.github.io/posts/springframework/overview/</link>
      <pubDate>Sat, 02 Sep 2023 11:46:07 +0800</pubDate>
      
      <guid>https://anriclee.github.io/posts/springframework/overview/</guid>
      <description>概述 Spring 使得创建 Java 企业级应用更加容易。它提供了你在企业环境下拥抱 Java 语言所需要的一切，支持 JVM 平台上的 Groovy 和 Kotlin 作为备选语言，并且提供了根据应用程序的需求创建多种架构的灵活性。从 SpringFramework 6.0 开始，Spring 需要 Java 17 以上的版本。
Spring 支持广泛的应用场景。在一个大型企业里，应用程序经常会存在很长时间，并且必须运行在一个开发者不能控制升级周期的 JDK 和应用服务器上。 另外一些可能会作为一个内嵌服务器的单独 jar 包，运行在一个云环境里，还有一些可能是一个不需要服务器的独立应用程序（例如批处理或者集成处理工作）。
Spring 是开源的。它有一个庞大而活跃的社群，基于各种实际用例，提供持续反馈。这也帮助了 Spring 在相当长一段时间内成功发展。。
当我们在谈 Spring 时我们在谈什么 “Spring” 这个术语在不同的语境下有着不同的含义。它可以用来表示 SpringFramework 这个项目自身，一切都是从这里开始的（-译者按：梦开始的地方）。随着时间的推移，又构建了一些以 SpringFramework 为基础的 Spring 项目。大部分情况下，当人们谈论 Spring，他们的意思是 Spring 整个系列（-译者按：俗称全家桶）。本参考文档只针对这个基础进行介绍：SpringFramework 本身。
SpringFramework 被分成不同的模块。应用程序可以根据他们所需要的模块进行选择。这些模块中处于核心的是 core container，包括配置模型和依赖注入机制。除此之外，SpringFramework 还对于不同应用架构提供基础支持，包括消息传递、事务以及持久化和 web。它同时也包含了基于 Servlet 的 SpringMVC web 框架以及Spring WebFlux 响应式web框架。
关于这些模块需要注意的是：
Spring 的框架，允许部署到 JDK 9 的模块路径（&amp;ldquo;Jigsaw&amp;rdquo;）。对于在支持 “Jigsaw” 的应用程序中的使用，Spring Framework 5 的 jar 包里面，携带了 “Automatic-Module-Name” 的 manifest entries，它定义了稳定的语言级别模块名（例如：“spring.</description>
      <content:encoded><![CDATA[<h1 id="概述">概述</h1>
<p>Spring 使得创建 Java 企业级应用更加容易。它提供了你在企业环境下拥抱 Java 语言所需要的一切，支持 JVM 平台上的 Groovy 和 Kotlin 作为备选语言，并且提供了根据应用程序的需求创建多种架构的灵活性。从 SpringFramework 6.0 开始，Spring 需要 Java 17 以上的版本。</p>
<p>Spring 支持广泛的应用场景。在一个大型企业里，应用程序经常会存在很长时间，并且必须运行在一个开发者不能控制升级周期的 JDK 和应用服务器上。
另外一些可能会作为一个内嵌服务器的单独 jar 包，运行在一个云环境里，还有一些可能是一个不需要服务器的独立应用程序（例如批处理或者集成处理工作）。</p>
<p>Spring 是开源的。它有一个庞大而活跃的社群，基于各种实际用例，提供持续反馈。这也帮助了 Spring 在相当长一段时间内成功发展。。</p>
<h1 id="当我们在谈-spring-时我们在谈什么">当我们在谈 Spring 时我们在谈什么</h1>
<p>“Spring” 这个术语在不同的语境下有着不同的含义。它可以用来表示 SpringFramework 这个项目自身，一切都是从这里开始的（-译者按：梦开始的地方）。随着时间的推移，又构建了一些以 SpringFramework 为基础的 Spring 项目。大部分情况下，当人们谈论 Spring，他们的意思是 Spring 整个系列（-译者按：俗称全家桶）。本参考文档只针对这个基础进行介绍：SpringFramework 本身。</p>
<p>SpringFramework 被分成不同的模块。应用程序可以根据他们所需要的模块进行选择。这些模块中处于核心的是 core container，包括配置模型和依赖注入机制。除此之外，SpringFramework 还对于不同应用架构提供基础支持，包括消息传递、事务以及持久化和 web。它同时也包含了基于 Servlet 的 SpringMVC web 框架以及Spring WebFlux 响应式web框架。</p>
<p>关于这些模块需要注意的是：</p>
<p>Spring 的框架，允许部署到 JDK 9 的模块路径（&ldquo;Jigsaw&rdquo;）。对于在支持 “Jigsaw” 的应用程序中的使用，Spring Framework 5 的 jar 包里面，携带了 “Automatic-Module-Name” 的 manifest entries，它定义了稳定的语言级别模块名（例如：“spring.core”，“spring.context” 等等），它与 jar 的 artifact 名字独立（ 这些 jar 遵循同样的模式，例如 “spring-core” 和 “spring-context”。 “-” 代替 “.”</p>
<blockquote>
<p>译者按：本人对于 Jigsaw 不太熟悉，等后面熟悉了，再过来修正这一段的翻译。目前，是不知道这段说了什么的。</p>
</blockquote>
<p>当然，Spring 框架中的 jar 包，在 JDK 9 和 JDK 9+ 的 classpath 中，可以继续正常工作。</p>
<h1 id="spring-和-spring-framework-的历史">Spring 和 Spring Framework 的历史</h1>
<p>在 2003 年，为了应对 J2EE 早期规范的复杂性，Spring 应运而生。
虽然一些人认为 Java EE 和他的现代继承者 Jakarta EE 与 Spring 势不两立，但是他们实际上是互为补充的。
Spring 的编程模型不会拥抱 Jakarta EE 平台的规范，相反，它从传统的 EE 的笼罩下面，精心挑选了一些规范，并与之整合：</p>
<ul>
<li>
<p>Servlet API (JSR 340)</p>
</li>
<li>
<p>WebSocket API (JSR 356)</p>
</li>
<li>
<p>Concurrency Utilities (JSR 236)</p>
</li>
<li>
<p>JSON Binding API (JSR 367)</p>
</li>
<li>
<p>Bean Validation (JSR 303)</p>
</li>
<li>
<p>JPA (JSR 338)</p>
</li>
<li>
<p>JMS (JSR 914)</p>
</li>
<li>
<p>如果有必要的话，还有 JTA/JCA 用于事务协商的设置</p>
</li>
</ul>
<p>SpringFramework 还支持应用开发者使用依赖注入规范（JSR 330）和通用注解规范（JSR 250），代替 SpringFramework 提供的 Spring 规范机制。最初，他们都是基于 javax 包的。</p>
<blockquote>
<p>译者按：自由即长久。</p>
</blockquote>
<p>SpringFramework 6.0 里，Spring 已经升级到 Jakarta EE 9（例如：Servlet 5.0+，JPA 3.0+），基于 Jakarta 名称空间，而非传统的 javax 包。
从 EE 9 开始到现在已经支持的 EE 10，Spring 准备对 Jakarta EE 接口的进一步发展提供开箱即用的支持。</p>
<p>SpringFramework 6.0 已经完全兼容 Tomcat 10.1，Jetty 11 和 Undertow 2.3 作为 web 服务器，这其中也抱愧 Hibernate ORM 6.1.</p>
<p>随着时间的推移，Java/Jakarta EE 在应用开发中的角色在不断演进。在 J2EE 和 Spring 的早期，应用被创建后，部署到一个应用服务器上。</p>
<p>今天，在 Spring Boot 的帮助下，应用可以以一种 devops 和云友好的方式创建，内嵌 Servlet 容器，并且易于修改。从 SpringFramework 5 开始，WebFlux 应用甚至不直接使用 Servlet API 就可以在非 Servlet 的服务器上运行起来（例如 Netty）</p>
<p>Spring 持续创新和演进。除了 SpringFramework 之外，还有很多项目，例如 Spring Boot，Spring Security，Spring Data，Spring Cloud，Spring Batch。
值得记住的是：每一个项目都有它自己的源码仓库，问题追踪和发版节奏。可以在 <a href="https://spring.io/projects">spring.io/projects</a> 看到 Spring 项目的完整清单。</p>
<h1 id="设计哲学">设计哲学</h1>
<p>当你了解一个框架时，重要的不是知道它做了什么而是它遵循什么样的准则。SpringFramework 的指导准则如下：</p>
<ul>
<li>在每一个级别上提供选择。Spring 可以让你尽可能晚地推迟做出设计决策。比如，你可以在不更改代码的情况下，改变你的持久化方案。对于其他的基础设施问题，整合其他第三方的 API，这一点同样适用。</li>
<li>兼容并包。Spring 拥抱灵活性，并不介意事情是怎么被完成的。它提供了在不同观念下的诸多需要。</li>
<li>保持较强的向后兼容性。Spring 的演进经过精心管理，在版本之间，几乎没有特别大的变化。Spring 精心挑选 JDK 版本号范围以及第三方库，以方便维护依赖于 Spring 的应用以及库。</li>
<li>精心设计 API。Spring 团队投入了较多的时间和精力设计 API，目的是让 API 更加符合直觉，可以使用很多年，跨越多个版本。</li>
<li>对代码质量设置较高的标准。SpringFramework 重点强调有意义的、及时、精确的 javadoc。它是为数不多的声称拥有干净的代码架构且在不同的包之间没有循环引用的项目之一。</li>
</ul>
<h1 id="开始">开始</h1>
<p>如果你刚开始接触 Spring，你也许会从创建一个基于 SpringBoot 应用开始使用 SpringFramework。SpringBoot 提供了一个快速（固定）的方式来创建可部署生产环境的基于 Spring 的应用。它基于 SpringFramework，喜欢约定优于配置的风格，设计它就是为了让你能够尽可能快地启动和运行。</p>
<p>你可以使用<a href="https://start.spring.io/">start.spring.io</a>来生成一个基本的项目，或者遵循<a href="https://spring.io/guides">&ldquo;Getting Started&rdquo; 指南</a> 例如 <a href="https://spring.io/guides/gs/rest-service/">Getting Started Building a RESTful Web Service</a>。</p>
<p>这些指南都是任务导向且易于理解的，他们中的大部分是基于 SpringBoot。它同时也涵盖了 Spring 产品中的其他项目，这些你可能会在解决某个具体的问题时会使用到。</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>聊点什么</title>
      <link>https://anriclee.github.io/posts/essays/saysomething/</link>
      <pubDate>Wed, 30 Aug 2023 23:26:45 +0800</pubDate>
      
      <guid>https://anriclee.github.io/posts/essays/saysomething/</guid>
      <description>谈心的文章好久没有写了，初秋的夜晚，键盘的敲击声格外响亮，一时竟然不知道从哪儿说起。我从今年开始，格外的怀旧起来。不只是怀念那个青春的八十年代，质朴的九十年代，而且竟然怀念起仿佛刚刚过去的两千年。也许是现在回看，带着滤镜和光影的原因吧。但我着实相信，过去确实比现在更加美丽一些。试问，现在还有什么歌曲能像过去的八九十年代扣人心弦，还有谁能写出像罗大佑那样充满人文情怀的歌词？我不是一个保守的人，现在的歌曲我也会经常听，但摇滚光是呐喊、嘶吼没有反思，民谣只有情绪没有韵味，流行歌曲更是惨不忍听。现在一首歌有四句比较朗朗上口一些，就能风靡一时，然后人们快速遗忘，寻找下一个。人们没法不遗忘，因为实在没有什么好怀念的。
人们在路上疯狂且快速的奔跑着，前面有人但凡有一点点挡道，便会怒从心头起。也许在快速奔跑中，人们才来不及为过去伤怀，风驰电掣，麻木一生。
如果我也这样，多好！
可是，我偏偏要将步伐放慢，歪着头想想，于是总感觉自己是个慢半拍的人。
今年一整年，几乎没有在公众号上发表任何文章，我想找个没人的地方，倾吐一下自己的想法。
失落与大门 今年是让我特别失落的一年，特别失落。
还有几年，就到传说中的中年危机了。坦白说，我直到今年才有些许明白，中年危机的真实含义。
所谓中年危机，并不单单是一个经济的问题，而是方方面面。
这个尴尬的年纪，朋友帮不上你，于是友情危机；妻子不理解你，于是婚姻危机；父母埋怨你，于是亲情危机。各方面的危机，想汹涌的几股暗流，汇集而来，向涉世未深的你迎面击来。
这个年纪，看似血气方刚，实则是最脆弱的年纪，没有经验的积淀，没有人脉的积淀，只有你自己硬抗，像不喝药，凭借自己的身体素质对抗一场重感冒。
扛过去，就会好很多。后面遇到再多糟心事，有了前面的抗体，总是会好过一些。
呵，男人四十！
今年的夏天格外热，但是在每次下班骑车回家的路上，听着歌，经常感觉浑身一阵冷战。也许是突然被某句歌词所触动，伤怀往事、怀疑信念。
于是有一阵子，我囤了很多书。最明显的变化是，我开始看外国小说了，以前硬着头皮两次入门、两次放弃的《安娜卡列尼娜》，这次竟然能够看的津津有味，甚至有时候，会有冲动，买下托尔斯泰的《战争与和平》这部据说很冗长的巨著一看。
年龄大了，学会妥协了。年少时，看那些翻译过来的腔调，就是不喜欢看不下去，我从来不理解为什么要冗长的心理描写，为什么人物的每一句台词，中间都要被“xxx说”拦腰斩为两截，如此种种。
今年突然明白了，这就是文化差异，不同地区的表达习惯，是会有不同的，不只是语汇的区分。我们应该注重的是书里面的所蕴含的光辉思想以及作者倾注的满腔热情。我们在《史记-项羽本纪》里面看不到一句项羽的心理描写，仅凭几句念白，几句描写，一个英雄就这样被人千年。
所以，中国会有山水画，笔墨留白，却依然已经满怀，而西方的工笔画、油画也依然是情绪饱满的。
留白也有水货，浓墨重彩也有精品。
这么想着，一道艺术的大门就这样为我敞开。
思想越包容，视野越广阔。有些时候，就是需要换一个视角和思维的转变。
AI 与艺术 AI 是今年的热词，仿佛一夜之间，什么都可以用 AI 做了。
就在这孤独的一年，我的阅读量和艺术视角，刻意地伸长，触及到了我之前出于懒惰不会触及的地方。就凭我简单的探索，我就知道 AI 根本没戏，虽然，我是一个技术人，但是我从来不认为 AI 能够写出那些不朽的作品，能够勾勒出那些美妙的线条。
很简单，因为 AI 不是人，没有意识和灵魂。
不是人，所以不会像人一样犯错，与此同时，也缺少了很多偶然。须知，很多艺术就是来源于偶然的灵光一现。
当然，还有一个重要的因素，就是伟大的读者催生伟大的作品，我们很难想象，被 AI 和短视频喂饱的读者们会有什么眼光去苛求那些内容的生产者。
想来也荒唐，到底是谁训练了谁？
将来的市场，AI 肯定是能挤掉一部分人的作品的。那些平庸的、毫无新意和灵魂的作品，会被 AI 取而代之。这或许倒是一个良币驱逐劣币的过程。
试看当今的歌坛，有多惨不忍睹就知道，科技能帮助人在艺术道路上走一段路，可是，剩下的路还是要靠人类自己走。
这是人类的宿命。
AI 也没有用。
也许，将来 AI 可能会突然大爆发，像人一样有了意识，但也是需要和人一样有痛苦的经历的。这样，AI 既有了人的意识，又有了人的经历和痛苦，那就是人类无疑了。
也许是 AI 被我们人类同化了吧？不知道是否可以当成人类的一场惨胜。
人文与科技 自己今年的时间，比往年多了一些，想做的事情太多，结果现在一件事也没有做成。自己不甘于只做一个消费者，也想做一个内容的生产者。
但生成什么内容，却让自己又一次开始了犹豫和纠结。
也许，这也是我的宿命，我注定会饿死在人文与科技的十字路口。
人文类的内容，是我的兴趣所在，但是目前的境况很是不尽人意，言论管控空前，万马齐喑。再加上饭圈文化和粉丝量的有限和题材内容的饱和，很难找到一个切入口完成一些看似“伟大”的事情。
科技类的内容，也是我想做的，看起来比人文的圈子要简单一些，但是，也比较枯燥一些，而且，自己驾驭起来，并不如人文类的容易一些，粉丝量的成长幅度，肯定比不上人文类的 up 主，毕竟大家都想在下班后，躺在床上，听听历史的八卦，谁会主动坐在桌前，听你分享一些你自己以为讲的很明白的原理和架构？
但是，自己毕竟是吃技术这碗饭的，而且自己在今年换工作之后，看到身边有的人无知的像一头猪一样，不禁觉得可笑之余，转念一想，自己是否在另一些人的眼里，也无知得可笑呢？于是，我立志，要把自己的技术短板填补上，尽量不看起来像一头猪。
综合起来，貌似技术up这条路，自己会走得更踏实一些，而且人文类的内容，要想做得出彩，关键在于自己阅历的积淀和对世情的理解。同样是看《潜伏》，有的人能分析地头头是道，非经一番历练之人，不可懂其中深味也。
希望与失望 当蜘蛛网无情地查封了我的炉台，
当灰烬的余烟叹息着贫困的悲哀，
我依然固执地铺平失望的灰烬，
用美丽的雪花写下：相信未来。</description>
      <content:encoded><![CDATA[<p>谈心的文章好久没有写了，初秋的夜晚，键盘的敲击声格外响亮，一时竟然不知道从哪儿说起。我从今年开始，格外的怀旧起来。不只是怀念那个青春的八十年代，质朴的九十年代，而且竟然怀念起仿佛刚刚过去的两千年。也许是现在回看，带着滤镜和光影的原因吧。但我着实相信，过去确实比现在更加美丽一些。试问，现在还有什么歌曲能像过去的八九十年代扣人心弦，还有谁能写出像罗大佑那样充满人文情怀的歌词？我不是一个保守的人，现在的歌曲我也会经常听，但摇滚光是呐喊、嘶吼没有反思，民谣只有情绪没有韵味，流行歌曲更是惨不忍听。现在一首歌有四句比较朗朗上口一些，就能风靡一时，然后人们快速遗忘，寻找下一个。人们没法不遗忘，因为实在没有什么好怀念的。</p>
<p>人们在路上疯狂且快速的奔跑着，前面有人但凡有一点点挡道，便会怒从心头起。也许在快速奔跑中，人们才来不及为过去伤怀，风驰电掣，麻木一生。</p>
<p>如果我也这样，多好！</p>
<p>可是，我偏偏要将步伐放慢，歪着头想想，于是总感觉自己是个慢半拍的人。</p>
<p>今年一整年，几乎没有在公众号上发表任何文章，我想找个没人的地方，倾吐一下自己的想法。</p>
<h1 id="失落与大门">失落与大门</h1>
<p>今年是让我特别失落的一年，特别失落。</p>
<p>还有几年，就到传说中的中年危机了。坦白说，我直到今年才有些许明白，中年危机的真实含义。</p>
<p>所谓中年危机，并不单单是一个经济的问题，而是方方面面。</p>
<p>这个尴尬的年纪，朋友帮不上你，于是友情危机；妻子不理解你，于是婚姻危机；父母埋怨你，于是亲情危机。各方面的危机，想汹涌的几股暗流，汇集而来，向涉世未深的你迎面击来。</p>
<p>这个年纪，看似血气方刚，实则是最脆弱的年纪，没有经验的积淀，没有人脉的积淀，只有你自己硬抗，像不喝药，凭借自己的身体素质对抗一场重感冒。</p>
<p>扛过去，就会好很多。后面遇到再多糟心事，有了前面的抗体，总是会好过一些。</p>
<p>呵，男人四十！</p>
<p>今年的夏天格外热，但是在每次下班骑车回家的路上，听着歌，经常感觉浑身一阵冷战。也许是突然被某句歌词所触动，伤怀往事、怀疑信念。</p>
<p>于是有一阵子，我囤了很多书。最明显的变化是，我开始看外国小说了，以前硬着头皮两次入门、两次放弃的《安娜卡列尼娜》，这次竟然能够看的津津有味，甚至有时候，会有冲动，买下托尔斯泰的《战争与和平》这部据说很冗长的巨著一看。</p>
<p>年龄大了，学会妥协了。年少时，看那些翻译过来的腔调，就是不喜欢看不下去，我从来不理解为什么要冗长的心理描写，为什么人物的每一句台词，中间都要被“xxx说”拦腰斩为两截，如此种种。</p>
<p>今年突然明白了，这就是文化差异，不同地区的表达习惯，是会有不同的，不只是语汇的区分。我们应该注重的是书里面的所蕴含的光辉思想以及作者倾注的满腔热情。我们在《史记-项羽本纪》里面看不到一句项羽的心理描写，仅凭几句念白，几句描写，一个英雄就这样被人千年。</p>
<p>所以，中国会有山水画，笔墨留白，却依然已经满怀，而西方的工笔画、油画也依然是情绪饱满的。</p>
<p>留白也有水货，浓墨重彩也有精品。</p>
<p>这么想着，一道艺术的大门就这样为我敞开。</p>
<p>思想越包容，视野越广阔。有些时候，就是需要换一个视角和思维的转变。</p>
<h1 id="ai-与艺术">AI 与艺术</h1>
<p>AI 是今年的热词，仿佛一夜之间，什么都可以用 AI 做了。</p>
<p>就在这孤独的一年，我的阅读量和艺术视角，刻意地伸长，触及到了我之前出于懒惰不会触及的地方。就凭我简单的探索，我就知道 AI 根本没戏，虽然，我是一个技术人，但是我从来不认为 AI 能够写出那些不朽的作品，能够勾勒出那些美妙的线条。</p>
<p>很简单，因为 AI 不是人，没有意识和灵魂。</p>
<p>不是人，所以不会像人一样犯错，与此同时，也缺少了很多偶然。须知，很多艺术就是来源于偶然的灵光一现。</p>
<p>当然，还有一个重要的因素，就是伟大的读者催生伟大的作品，我们很难想象，被 AI 和短视频喂饱的读者们会有什么眼光去苛求那些内容的生产者。</p>
<p>想来也荒唐，到底是谁训练了谁？</p>
<p>将来的市场，AI 肯定是能挤掉一部分人的作品的。那些平庸的、毫无新意和灵魂的作品，会被 AI 取而代之。这或许倒是一个良币驱逐劣币的过程。</p>
<p>试看当今的歌坛，有多惨不忍睹就知道，科技能帮助人在艺术道路上走一段路，可是，剩下的路还是要靠人类自己走。</p>
<p>这是人类的宿命。</p>
<p>AI 也没有用。</p>
<p>也许，将来 AI 可能会突然大爆发，像人一样有了意识，但也是需要和人一样有痛苦的经历的。这样，AI 既有了人的意识，又有了人的经历和痛苦，那就是人类无疑了。</p>
<p>也许是 AI 被我们人类同化了吧？不知道是否可以当成人类的一场惨胜。</p>
<h1 id="人文与科技">人文与科技</h1>
<p>自己今年的时间，比往年多了一些，想做的事情太多，结果现在一件事也没有做成。自己不甘于只做一个消费者，也想做一个内容的生产者。</p>
<p>但生成什么内容，却让自己又一次开始了犹豫和纠结。</p>
<p>也许，这也是我的宿命，我注定会饿死在人文与科技的十字路口。</p>
<p>人文类的内容，是我的兴趣所在，但是目前的境况很是不尽人意，言论管控空前，万马齐喑。再加上饭圈文化和粉丝量的有限和题材内容的饱和，很难找到一个切入口完成一些看似“伟大”的事情。</p>
<p>科技类的内容，也是我想做的，看起来比人文的圈子要简单一些，但是，也比较枯燥一些，而且，自己驾驭起来，并不如人文类的容易一些，粉丝量的成长幅度，肯定比不上人文类的 up 主，毕竟大家都想在下班后，躺在床上，听听历史的八卦，谁会主动坐在桌前，听你分享一些你自己以为讲的很明白的原理和架构？</p>
<p>但是，自己毕竟是吃技术这碗饭的，而且自己在今年换工作之后，看到身边有的人无知的像一头猪一样，不禁觉得可笑之余，转念一想，自己是否在另一些人的眼里，也无知得可笑呢？于是，我立志，要把自己的技术短板填补上，尽量不看起来像一头猪。</p>
<p>综合起来，貌似技术up这条路，自己会走得更踏实一些，而且人文类的内容，要想做得出彩，关键在于自己阅历的积淀和对世情的理解。同样是看《潜伏》，有的人能分析地头头是道，非经一番历练之人，不可懂其中深味也。</p>
<h1 id="希望与失望">希望与失望</h1>
<blockquote>
<p>当蜘蛛网无情地查封了我的炉台，</p>
<p>当灰烬的余烟叹息着贫困的悲哀，</p>
<p>我依然固执地铺平失望的灰烬，</p>
<p>用美丽的雪花写下：相信未来。</p>
<p>当我的紫葡萄化为深秋的露水，</p>
<p>当我的鲜花依偎在别人的情怀，</p>
<p>我依然固执地用凝霜的枯藤，</p>
<p>在凄凉的大地上写下：相信未来。</p>
<p>我要用手指那涌向天边的排浪，</p>
<p>我要用手掌那托起太阳的大海，</p>
<p>摇曳着曙光那支温暖漂亮的笔杆，</p>
<p>用孩子的笔体写下：相信未来。</p>
<p>我之所以坚定地相信未来，</p>
<p>是我相信未来人们的眼睛——她有拨开历史风尘的睫毛，</p>
<p>她有看透岁月篇章的瞳孔。</p>
<p>不管人们对于我们腐烂的皮肉，</p>
<p>那些迷途的惆怅，失败的苦痛，</p>
<p>是寄予感动的热泪，深切的同情，</p>
<p>还是给以轻蔑的微笑，辛辣的嘲讽。</p>
<p>我坚信人们对于我们的脊骨，</p>
<p>那无数次地探索、迷途、失败和成功，</p>
<p>一定会给予热情、客观、公正的评定，</p>
<p>是的，我焦急地等待着他们的评定。</p>
<p>朋友，坚定地相信未来吧，</p>
<p>相信不屈不挠的努力，</p>
<p>相信战胜死亡的年轻，</p>
<p>相信未来，热爱生命。</p>
<p>—————————— 食指《相信未来》</p>
</blockquote>
<p>诗人食指，在那个黑暗的年代，竟然依然能写出来如此光明的诗；我们当今，虽然也在往更糟的方向狂奔，但是至少目前还比那个年代强一些。
或许，我们应该用饱含热泪的眼睛，永远期待未来。</p>
<p>2023 年 8 月 31 日夜。</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>《金瓶梅》</title>
      <link>https://anriclee.github.io/posts/gold_bottle/1/</link>
      <pubDate>Sun, 07 May 2023 23:38:33 +0800</pubDate>
      
      <guid>https://anriclee.github.io/posts/gold_bottle/1/</guid>
      <description>碎碎念。</description>
      <content:encoded><![CDATA[<p>碎碎念。</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>《红楼梦》碎碎念</title>
      <link>https://anriclee.github.io/posts/stone/summary/</link>
      <pubDate>Sun, 07 May 2023 23:15:53 +0800</pubDate>
      
      <guid>https://anriclee.github.io/posts/stone/summary/</guid>
      <description>个人读《红楼梦》之所感所思，想到哪儿，写到哪儿，不拘章法，也无体系，不求闻达，但求深思。</description>
      <content:encoded><![CDATA[<p>个人读《红楼梦》之所感所思，想到哪儿，写到哪儿，不拘章法，也无体系，不求闻达，但求深思。</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Telegram bot 入门实践</title>
      <link>https://anriclee.github.io/posts/telegram_bot/</link>
      <pubDate>Sat, 11 Jun 2022 11:43:42 +0800</pubDate>
      
      <guid>https://anriclee.github.io/posts/telegram_bot/</guid>
      <description>什么是 Bot Bot 的概念在官网的介绍稍微有点繁琐和复杂，详细可以了解官网介绍，
简单来说，bot 就是你在 telegram 中的一个特殊账号，你申请了 bot，这个 bot 就是你的代理人，你发号施令到 bot，bot 会响应你的指令，仅此而已。
申请 bot 需要找 BotFather（名字起的很形象），具体过程官网说的比较详细，此处不赘言。但是需要强调的一点是，bot 仅仅是你的代理人而已，真正执行你指令的是你自己部署的脚本，如果你不部署自己的脚本，在 bot 中输入指令，是没有任何响应的。
你、bot和你部署的脚本关系如下:
脚本 上面说过了，bot 只是你在 telegram 的一个代理，真正干活的是你的脚本。既然自己写脚本，就会存在两个问题：接受指令、做出响应。
接受指令 对于如何让脚本接受指令，官方提供了两种思路：推模式 、拉模式。
拉模式 这种模式，官方不太推荐。简单而言，就是自己部署一个脚本，不断执行 get 请求，获取自己 bot 的更新信息，就好比一个仆人一直在问你：
有没有需要我做的？
有没有需要我做的？
有没有需要我做的？
询问的方式也比较简单：
curl -X GET https://api.telegram.org/bot[token]/getUpdates 这里的 token，就是上面申请 bot 完毕后，得到的 token， 出于脱敏，我使用 [token] 代替，下同。这种方法比较笨拙，轮询的频次太高和太低都不行，而且你在 bot 中发布一条指令后，可能并不能够马上得到执行，会有延迟。
这种方式的好处是：可以让 bot 启在本地，不需要部署到服务器上，因为 telegram 不知道你的存在，他也不需要知道你的存在。
推模式 这种方式是官方比较推荐的一种方式，这种类似事件驱动的原理。只有有任务了，才会通知脚本去做。但前提是：在向 bot 发号施令前，需要在 bot 中注册一个 callback url。
bot 在接受你的指令后，会调用此 url，通知你的脚本，让他执行任务。
注册方式也比较简单：</description>
      <content:encoded><![CDATA[<h1 id="什么是-bot">什么是 Bot</h1>
<p>Bot 的概念在官网的介绍稍微有点繁琐和复杂，详细可以了解<a href="https://core.telegram.org/bots">官网介绍</a>，</p>
<p>简单来说，bot 就是你在 telegram 中的一个特殊账号，你申请了 bot，这个 bot 就是你的代理人，你发号施令到 bot，bot 会响应你的指令，仅此而已。</p>
<p>申请 bot 需要找 BotFather（名字起的很形象），具体过程官网说的比较详细，此处不赘言。但是需要强调的一点是，bot 仅仅是你的代理人而已，真正执行你指令的是你自己部署的脚本，如果你不部署自己的脚本，在 bot 中输入指令，是没有任何响应的。</p>
<p>你、bot和你部署的脚本关系如下:</p>
<p>
  <img loading="lazy" src="https://raw.githubusercontent.com/anriclee/diagramStorage/master/telegram.drawio.png" alt="&amp;ldquo;你、bot和你部署的脚本&amp;rdquo;"  /></p>
<h1 id="脚本">脚本</h1>
<p>上面说过了，bot 只是你在 telegram 的一个代理，真正干活的是你的脚本。既然自己写脚本，就会存在两个问题：接受指令、做出响应。</p>
<h2 id="接受指令">接受指令</h2>
<p>对于如何让脚本接受指令，官方提供了两种思路：推模式 、拉模式。</p>
<ul>
<li>拉模式</li>
</ul>
<p>这种模式，官方不太推荐。简单而言，就是自己部署一个脚本，不断执行 get 请求，获取自己 bot 的更新信息，就好比一个仆人一直在问你：</p>
<p>有没有需要我做的？</p>
<p>有没有需要我做的？</p>
<p>有没有需要我做的？</p>
<p>询问的方式也比较简单：</p>
<pre tabindex="0"><code>curl -X GET https://api.telegram.org/bot[token]/getUpdates
</code></pre><p>这里的 token，就是上面申请 bot 完毕后，得到的 token， 出于脱敏，我使用 [token] 代替，下同。这种方法比较笨拙，轮询的频次太高和太低都不行，而且你在 bot 中发布一条指令后，可能并不能够马上得到执行，会有延迟。</p>
<p>这种方式的好处是：可以让 bot 启在本地，不需要部署到服务器上，因为 telegram 不知道你的存在，他也不需要知道你的存在。</p>
<ul>
<li>推模式</li>
</ul>
<p>这种方式是官方比较推荐的一种方式，这种类似事件驱动的原理。只有有任务了，才会通知脚本去做。但前提是：在向 bot 发号施令前，需要在 bot 中注册一个 callback url。</p>
<p>bot 在接受你的指令后，会调用此 url，通知你的脚本，让他执行任务。</p>
<p>注册方式也比较简单：</p>
<pre tabindex="0"><code>curl -X POST https://api.telegram.org/bot[token]/setWebhook -H &#34;Content-type: application/json&#34; -d &#39;{&#34;url&#34;: &#34;[YOUR_URL]&#34;}
</code></pre><p>使用这种方式，会比上一种稍微麻烦一点，需要你部署的服务能够支持 https（这也是为了安全起见）。</p>
<h3 id="响应指令">响应指令</h3>
<p>收到 telegram 的指令后，如何发送消息到 telegram 频道呢？笔者对 golang 较为熟悉，所以采用了 golang 的方式进行响应。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-Golang" data-lang="Golang"><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">Handler</span><span class="p">(</span><span class="nx">w</span> <span class="nx">http</span><span class="p">.</span><span class="nx">ResponseWriter</span><span class="p">,</span> <span class="nx">r</span> <span class="o">*</span><span class="nx">http</span><span class="p">.</span><span class="nx">Request</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">err</span> <span class="o">:=</span> <span class="nx">r</span><span class="p">.</span><span class="nf">ParseForm</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">log</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;parse form values failed:%+v&#34;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">body</span><span class="p">,</span> <span class="nx">_</span> <span class="o">:=</span> <span class="nx">r</span><span class="p">.</span><span class="nf">GetBody</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="nx">bytes</span><span class="p">,</span> <span class="nx">_</span> <span class="o">:=</span> <span class="nx">io</span><span class="p">.</span><span class="nf">ReadAll</span><span class="p">(</span><span class="nx">body</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">msg</span> <span class="o">:=</span> <span class="nb">string</span><span class="p">(</span><span class="nx">bytes</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// ...... 读取到 query 参数和 body 后，可以进行各种逻辑操作
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Fprintf</span><span class="p">(</span><span class="nx">w</span><span class="p">,</span> <span class="s">&#34;result:&#34;</span><span class="o">+</span><span class="nx">content</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>上面的代码使用到了一个<a href="https://github.com/go-telegram-bot-api/telegram-bot-api">开源库</a>，他替我们封装好了api（当然也可以自己按照 telegram 的协议组装消息）。</p>
<h2 id="部署脚本">部署脚本</h2>
<p>现在有了 bot，也有了响应 bot 的脚本逻辑，只剩部署脚本到服务器了。我们当然不能仅仅为了响应一条指令租一个个人服务器吧（土豪除外）。</p>
<p>笔者用的是 Vercel 平台，使用 Vercel 部署 ServeLess 的 Function 还是比较方便的，部署过程，跟随步骤指导一步一步来比较容易。</p>
<p><a href="https://vercel.com/">https://vercel.com/</a></p>
<p>部署好之后，可以先在本地执行下 curl 请求，测试没问题后，将该 url 设置为 telegram bot 的 callback 函数即可。</p>
<h2 id="使用">使用</h2>
<p>学会一个东西的主要方法，就是疯狂的使用它。本人出入办公单位，都需要扫门禁二维码，不胜其烦，需要关注微信小程序，然后点击门禁二维码，全程既慢且麻烦。</p>
<p>在一次偶然抓包之后，发现获取二维码的请求是一个简单的 http post 请求，且密码为明文。</p>
<p>这次体验到了 Serveless 的方便，出于 bot 练习之故，可以将该请求封装到 script 中，部署到 vercel 平台上，在 telegram 申请一个门禁机器人，打开之后，发送指令到 script，script 发起 post 调用，获取到结果后，渲染为二维码即可。</p>
<p>渲染二维码使用到的<a href="https://github.com/skip2/go-qrcode">开源包</a></p>
<h2 id="请求安全性校验">请求安全性校验</h2>
<p>为了安全起见，有人恶意调用你的脚本 url，可以将自己脚本服务的 api 的前缀设置为 token（token 没有人知道，所以也无法知道的 api）。vercel 平台支持通过 vercel.json 进行请求的重定向，可以通过正则表达式，将 <code>randomwdocd23123123[token 示例]/api</code> 转发到 <code>/api</code>。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-Json" data-lang="Json"><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">   <span class="nt">&#34;routes&#34;</span><span class="p">:[</span>
</span></span><span class="line"><span class="cl">      <span class="p">{</span>
</span></span><span class="line"><span class="cl">         <span class="nt">&#34;src&#34;</span><span class="p">:</span><span class="s2">&#34;/random/(?&lt;id&gt;[^/]*)/api/hello/&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">         <span class="nt">&#34;dest&#34;</span><span class="p">:</span><span class="s2">&#34;/api/hello.go?id=$id&#34;</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span>
</span></span><span class="line"><span class="cl">   <span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>这是利用了官方提供的重定向的特性，详细可以参考<a href="https://vercel.com/docs/project-configuration#">官网</a></p>
<h1 id="reference">reference</h1>
<p>1.<a href="https://www.marclittlemore.com/serverless-telegram-chatbot-vercel/">Build a serverless Telegram chatbot deployed using Vercel</a></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>基于 PostgreSQL 的群聊搜索实践</title>
      <link>https://anriclee.github.io/posts/pg/</link>
      <pubDate>Thu, 13 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>https://anriclee.github.io/posts/pg/</guid>
      <description>背景 2021年年初，探探上线了群聊功能，并且支持按照群名进行模糊搜索。
对于复杂场景的搜索，业界一般使用非常流行的 ElasticSearch。由于我们的群数据较少，截止到目前还没有达到千万级的量级，且搜索场景比较简单，而 PostgreSQL 对全文搜索又支持得比较好，所以选择了 PostgreSQL 来实现群搜索需求。 在使用 PostgreSQL 做群搜索的过程中，也经历了由简单到复杂的迭代过程，中间也踩了不少坑。 下面的几个例子说明了方案的演进过程和我们的优化思路，希望能够对大家有所帮助。
LIKE 模糊查询 提到模糊搜索，最简单的办法就是对搜索列进行 like 匹配： 在输入词的前后加上 % 即可,如下所示:
SELECT * FROM groups WHERE name LIKE &amp;#39;%探探%&amp;#39;; 这种方案可行是可行了，但是实现过于简单粗暴。对此方案进行测试：
建一张简单的表进行测试，表结构如下：
lixuehan=# \d groups; Table &amp;#34;public.groups&amp;#34; Column | Type | Collation | Nullable | Default --------+-----------------------+-----------+----------+------------------------------------ id | bigint | | not null | nextval(&amp;#39;groups_id_seq&amp;#39;::regclass) name | character varying(50) | | | Indexes: &amp;#34;groups_pkey&amp;#34; PRIMARY KEY, btree (id) 表中只有两列：主键 id 以及群名 name。</description>
      <content:encoded><![CDATA[<h2 id="背景">背景</h2>
<p>2021年年初，探探上线了群聊功能，并且支持按照群名进行模糊搜索。</p>
<p>对于复杂场景的搜索，业界一般使用非常流行的 ElasticSearch。由于我们的群数据较少，截止到目前还没有达到千万级的量级，且搜索场景比较简单，而 PostgreSQL 对全文搜索又支持得比较好，所以选择了 PostgreSQL 来实现群搜索需求。
在使用 PostgreSQL 做群搜索的过程中，也经历了由简单到复杂的迭代过程，中间也踩了不少坑。 下面的几个例子说明了方案的演进过程和我们的优化思路，希望能够对大家有所帮助。</p>
<h2 id="like-模糊查询">LIKE 模糊查询</h2>
<p>提到模糊搜索，最简单的办法就是对搜索列进行 like 匹配： 在输入词的前后加上 <code>%</code> 即可,如下所示:</p>
<pre tabindex="0"><code>SELECT * FROM groups WHERE name LIKE &#39;%探探%&#39;;
</code></pre><p>这种方案可行是可行了，但是实现过于简单粗暴。对此方案进行测试：</p>
<p>建一张简单的表进行测试，表结构如下：</p>
<pre tabindex="0"><code>lixuehan=# \d groups;
                                   Table &#34;public.groups&#34;
 Column |         Type          | Collation | Nullable |              Default
--------+-----------------------+-----------+----------+------------------------------------
 id     | bigint                |           | not null | nextval(&#39;groups_id_seq&#39;::regclass)
 name   | character varying(50) |           |          |
Indexes:
    &#34;groups_pkey&#34; PRIMARY KEY, btree (id)
</code></pre><p>表中只有两列：主键 <code>id</code> 以及群名 <code>name</code>。</p>
<pre tabindex="0"><code>create or replace function gen_hanzi(int) returns text as $$
declare
    res text;
begin
    if $1 &gt;=1 then
        select string_agg(chr(19968+(random()*20901)::int), &#39;&#39;) into res from generate_series(1,$1);
        return res;
    end if;
    return null;
end;
$$ language plpgsql strict;
</code></pre><p><code>gen_hanzi</code> 是一个随机生成汉字的函数，我们使用一个该函数构造 100w 条数据，插入到该表中。</p>
<pre tabindex="0"><code>lixuehan=# insert into groups(name) select gen_hanzi(20) from generate_series(1,1000000);
INSERT 0 1000000
lixuehan=# select count(*) from groups;
 count
--------
 1000000
(1 row)
</code></pre><p>现在开始对上表根据 <code>name</code> 列进行 like 搜索。</p>
<pre tabindex="0"><code>SELECT * FROM groups WHERE name LIKE &#39;%探探%&#39;;
</code></pre><p>查看其执行计划</p>
<pre tabindex="0"><code>lixuehan=# explain analyze select * from groups where name like &#39;%探探%&#39;;
                                                       QUERY PLAN
------------------------------------------------------------------------------------------------------------------------
 Gather  (cost=1000.00..20321.24 rows=110 width=69) (actual time=0.388..116.679 rows=1 loops=1)
   Workers Planned: 2
   Workers Launched: 2
   -&gt;  Parallel Seq Scan on groups  (cost=0.00..19310.24 rows=46 width=69) (actual time=64.666..101.982 rows=0 loops=3)
         Filter: ((name)::text ~~ &#39;%探探%&#39;::text)
         Rows Removed by Filter: 366671
 Planning Time: 0.182 ms
 Execution Time: 116.694 ms
</code></pre><p>搜索执行耗时接近 <code>117ms</code>，全表扫描，显然有优化空间。</p>
<h3 id="建-btree-索引">建 Btree 索引</h3>
<p>在 PostgreSQL 官方网站上看到了这样一句话：</p>
<blockquote>
<p>The optimizer can also use a B-tree index for queries involving the pattern matching operators LIKE and ~
if the pattern is a constant and is anchored to the beginning of the string —
for example, col LIKE &lsquo;foo%&rsquo; or col ~ &lsquo;^foo&rsquo;, <strong>but not col LIKE &lsquo;%bar&rsquo;</strong>.</p>
</blockquote>
<p>官方推荐的做法是给搜索列建立 btree 索引，但是不支持前模糊查询（为避免歧义，这里的「前模糊查询」指的是前缀不确定的查询，「后模糊查询」指的是后缀不确定的查询，后面不再赘述）。</p>
<p>于是，我们尝试对 <code>name</code> 列构建 <code>btree</code> 索引。</p>
<pre tabindex="0"><code>create index group_name_idx on groups using btree(name);
</code></pre><p>然后再对该表执行查询，分别执行前模糊、后模糊和两边均模糊三种：</p>
<pre tabindex="0"><code>lixuehan=# explain analyze select * from groups where name like &#39;%探探大群%&#39;;
                                                       QUERY PLAN
-------------------------------------------------------------------------------------------------------------------------
 Gather  (cost=1000.00..20321.24 rows=110 width=127) (actual time=0.158..108.548 rows=1 loops=1)
   Workers Planned: 2
   Workers Launched: 2
   -&gt;  Parallel Seq Scan on groups  (cost=0.00..19310.24 rows=46 width=127) (actual time=66.183..101.712 rows=0 loops=3)
         Filter: ((name)::text ~~ &#39;%探探大群%&#39;::text)
         Rows Removed by Filter: 366671
 Planning Time: 0.098 ms
 Execution Time: 108.756 ms
(8 rows)

lixuehan=# explain analyze select * from groups where name like &#39;探探大群%&#39;;
                                                         QUERY PLAN
----------------------------------------------------------------------------------------------------------------------------
 Index Scan using groups_name_idx on groups  (cost=0.55..8.57 rows=110 width=127) (actual time=0.810..0.811 rows=1 loops=1)
   Index Cond: (((name)::text &gt;= &#39;探探大群&#39;::text) AND ((name)::text &lt; &#39;探探大羥&#39;::text))
   Filter: ((name)::text ~~ &#39;探探大群%&#39;::text)
 Planning Time: 1.229 ms
 Execution Time: 0.829 ms
(5 rows)

lixuehan=# explain analyze select * from groups where name like &#39;%探探大群&#39;;
                                                       QUERY PLAN
------------------------------------------------------------------------------------------------------------------------
 Gather  (cost=1000.00..20321.24 rows=110 width=127) (actual time=0.161..104.288 rows=1 loops=1)
   Workers Planned: 2
   Workers Launched: 2
   -&gt;  Parallel Seq Scan on groups  (cost=0.00..19310.24 rows=46 width=127) (actual time=64.530..98.686 rows=0 loops=3)
         Filter: ((name)::text ~~ &#39;%探探大群&#39;::text)
         Rows Removed by Filter: 366671
 Planning Time: 0.094 ms
 Execution Time: 104.315 ms
(8 rows)
</code></pre><p>可以看到，<strong>只有在执行后模糊查询时</strong>，命中索引，耗时缩短到了 <code>0.829ms</code>。</p>
<p>不支持前模糊查询没有关系，再建一个反向索引即可：</p>
<pre tabindex="0"><code>CREATE INDEX ON groups(reverse(name));
</code></pre><p>执行搜索时，执行反向查询，如下：</p>
<pre tabindex="0"><code>select * from groups where reverse(name) like reverse(&#39;%探探&#39;);
</code></pre><p>查看其执行计划：</p>
<pre tabindex="0"><code>Bitmap Heap Scan on groups  (cost=292.93..10708.01 rows=5500 width=127)
   Filter: (reverse((name)::text) ~~ &#39;探探%&#39;::text)
   -&gt;  Bitmap Index Scan on groups_reverse_idx  (cost=0.00..291.55 rows=5500 width=0)
         Index Cond: ((reverse((name)::text) &gt;= &#39;探探&#39;::text) AND (reverse((name)::text) &lt; &#39;探掣&#39;::text))
(4 rows)
</code></pre><p>可以看到已经命中了 <code>groups_reverse_idx</code> 索引。</p>
<p>这样，在业务代码中最多执行两次，即可实现前后模糊搜索（虽然看起来比较笨，但是也勉强实现了需求）。但是接下来，遇到的问题让人感到头疼。</p>
<p>在执行简单测试时，发现我们的测试环境可以走索引，但是生产环境却不能！！！</p>
<p>在查询资料后，得知这种模糊查询命中索引的方案跟数据库的 <code>Locale</code> 设置有关系，而当时我们生产环境的设置和测试环境的 <code>Locale</code> 设置是不一样的。</p>
<p>可以执行下面的命令查询一个库的 <code>Locale</code> 设置。</p>
<pre tabindex="0"><code>lixuehan=# \l+ lixuehan
                                            List of databases
   Name   |  Owner   | Encoding | Collate | Ctype | Access privileges | Size  | Tablespace | Description
----------+----------+----------+---------+-------+-------------------+-------+------------+-------------
 lixuehan | lixuehan | UTF8     | C       | C     |                   | 28 MB | pg_default |
(1 row)
</code></pre><p>这里的 <code>Collate</code> 和 <code>Ctype</code> 就是跟 <code>Locale</code> 相关的两个参数，在 <code>Ctype</code> 为 <code>en_US.UTF-8</code> 时，直接对搜索列建 <code>Btree</code> 索引，无法实现预期效果。</p>
<p>上面我们用来举例的数据库，正好 <code>Ctype</code> 和 <code>Collate</code> 均为 <code>C</code>，是支持模糊搜索的。对于这两个参数的设置，官网有如下描述：</p>
<blockquote>
<p>Some locale categories must have their values fixed when the database is created.
You can use different settings for different databases, but <strong>once a database is created, you cannot change them for that database anymore</strong>.
LC_COLLATE and LC_CTYPE are these categories.</p>
</blockquote>
<p>这里说的很明白，一旦数据库被创建了，就不能更改其 <code>LC_COLLATE</code> 和 <code>LC_CTYPE</code> 设置了（这两个参数分别对应上面的 <code>Collate</code> 和 <code>Ctype</code>）。</p>
<p>为此，再建一个 <code>Locale</code> 非 <code>C</code> 的数据库，重复上面的查询。</p>
<pre tabindex="0"><code>create database lixuehan2 LC_COLLATE &#39;en_US.UTF-8&#39; LC_CTYPE &#39;en_US.UTF-8&#39; TEMPLATE template0;
</code></pre><pre tabindex="0"><code>lixuehan2=# explain analyze select * from groups where name like &#39;探%&#39;;
                                                      QUERY PLAN
-----------------------------------------------------------------------------------------------------------------------
 Gather  (cost=1000.00..20321.17 rows=110 width=69) (actual time=0.364..71.770 rows=59 loops=1)
   Workers Planned: 2
   Workers Launched: 2
   -&gt;  Parallel Seq Scan on groups  (cost=0.00..19310.17 rows=46 width=69) (actual time=1.583..58.687 rows=20 loops=3)
         Filter: ((name)::text ~~ &#39;探%&#39;::text)
         Rows Removed by Filter: 366647
 Planning Time: 0.225 ms
 Execution Time: 71.798 ms
(8 rows)
</code></pre><p>可以看到，执行计划已经变为全表扫描，无法达到预期效果。</p>
<p>那么 <code>Locale</code> 是什么？</p>
<p>维基百科给出的解释：</p>
<blockquote>
<p>区域设置（locale），也称作“本地化策略集”、“本地环境”，是表达程序用户地区方面的软件设定。不同系统、平台、与软件有不同的区域设置处理方式和不同的设置范围，但是一般区域设置最少也会包括语言和地区。操作系统的区域设置通常比较复杂。区域设置的内容包括：数据格式、货币金额格式、小数点符号、千分位符号、度量衡单位、通货符号、日期写法、日历类型、文字排序、姓名格式、地址等等。</p>
</blockquote>
<p>简单来说，就是一个与区域文化相关的内容显示及解析问题。</p>
<p>为什么 <code>LC_TYPE</code> 为 <code>en_US.UTF-8</code> 类型的 <code>Locale</code>，不能支持中文的 like 索引？</p>
<p>这里摘抄 PostgreSQL 官方给出的解释：</p>
<blockquote>
<p>On all platforms, the collations named default, C, and POSIX are available.
Additional collations may be available depending on operating system support.
The default collation selects the LC_COLLATE and LC_CTYPE values specified at database creation time.
The C and POSIX collations both specify “traditional C” behavior, in which only the ASCII letters “A” through “Z” are treated as letters, and sorting is done strictly by character code byte values.</p>
</blockquote>
<p>总结就是：在所有平台上，名为 <code>default</code>、<code>C</code> 和 <code>POSIX</code> 的排序规则都可用，其他的排序必须操作系统支持。数据库默认只支持 <code>C</code> 和 <code>POSIX</code> 排序，而其排序方式就是最简单的按照 <code>ASCII</code> 字母表进行排序。所以，如果将
<code>Locale</code> 设置为 <code>en_US.UTF-8</code>，底层操作系统不支持，数据库自然也不会支持按照这种编码排序了。</p>
<h2 id="gin-索引">GIN 索引</h2>
<p>实际上，使用 PostgreSQL 进行模糊搜索时，除了使用 Btree 索引，还可以使用 GIN 索引。</p>
<p>什么是 GIN 索引呢？</p>
<p>GIN，全称为通用倒排索引（Generalized Inverted Index）。倒排索引也被称为反向索引，被用来存储在全文搜索下某个单词在一个文档或者一组文档中的存储位置的映射。
也就是说，知道某个词，就可以知道这个词出现在文档的哪些位置。</p>
<p>在 GIN 中全文搜索的基本单元就是 <code>document</code>，在 GIN 中查询一个词，即查询出现这个词的所有 <code>document</code>。为了搜索方便，<code>document</code> 会被转化成一个特殊的类型：<code>tsvector</code>。</p>
<p><code>tsvector</code> 由 <code>lexemes</code>（语素） 和<code>lexemes</code> 出现在 <code>document</code> 中的位置组成。</p>
<p>这里出现的术语较多，举个例子就明白了：</p>
<pre tabindex="0"><code>postgres=# select to_tsvector(&#39;There was a crooked man, and he walked a crooked mile&#39;);

to_tsvector
-----------------------------------------
 &#39;crook&#39;:4,10 &#39;man&#39;:5 &#39;mile&#39;:11 &#39;walk&#39;:8
(1 row)
</code></pre><p>上面的查询利用 PostgreSQL 自带的 <code>to_tsvector</code> 函数将一句话转换为了多个 <code>tsvector</code>。</p>
<p>在上面的例子中，<code>'crook':4,10</code> 为第一个 <code>tsvector</code>，第一部分为语素：crook，第二部分为出现的位置：句中的第 <code>4</code> 个和第 <code>10</code> 个单词的位置（下标从 <code>1</code> 开始），以此类推。</p>
<p>这里的停用词（&ldquo;there&rdquo;, &ldquo;was&rdquo;, &ldquo;a&rdquo;, &ldquo;and&rdquo;, &ldquo;he&rdquo;）全部被去掉（因为这些词出现的频率太高了，对于搜索起到的作用非常有限）。</p>
<p>其实看到这里，大家已经明白，将所有<strong>待搜索内容</strong>转换为 <code>tsvector</code>，其实就是一个预处理的过程，单纯是为了后面执行搜索方便。</p>
<p>待搜索内容要处理，要匹配的搜索内容当然也需要处理。</p>
<p>在 PostgreSQL 中，<code>tsquery</code> 表示搜索词。一般而言，<code>tsquery</code> 由 <code>lexemes</code> 加上一些特殊符号组成，如下：</p>
<pre tabindex="0"><code>postgres=# select to_tsquery(&#39;man &amp; (walking | running)&#39;);

         to_tsquery
----------------------------
 &#39;man&#39; &amp; ( &#39;walk&#39; | &#39;run&#39; )
(1 row)
</code></pre><p>PostgreSQL 提供了丰富的关系符号，用于 tsquery 和 tsvector 的操作，这里仅列出其中一部分：</p>
<table>
<thead>
<tr>
<th>操作符</th>
<th>描述</th>
<th>例子</th>
</tr>
</thead>
<tbody>
<tr>
<td>@@</td>
<td>tsvector 匹配 tsquery</td>
<td>to_tsvector(&lsquo;fat cats ate rats&rsquo;) @@ to_tsquery(&lsquo;cat &amp; rat&rsquo;)</td>
</tr>
<tr>
<td>@&gt;</td>
<td>tsquery 包含另外一个 tsquery</td>
<td>&lsquo;cat&rsquo;::tsquery @&gt; &lsquo;cat &amp; rat&rsquo;::tsquery</td>
</tr>
<tr>
<td>&lt;@</td>
<td>tsquery 包含在另外一个 tsquery</td>
<td>&lsquo;cat&rsquo;::tsquery &lt;@ &lsquo;cat &amp; rat&rsquo;::tsquery</td>
</tr>
</tbody>
</table>
<p>对 GIN 索引更加详细的介绍，这里不再展开，只需要知道它是一个能够加快全文搜索的倒排索引即可。</p>
<p>我们马上对这个表建立 <code>GIN</code> 索引。</p>
<pre tabindex="0"><code>CREATE EXTENSION pg_trgm; -- 需要依赖这个扩展
CREATE INDEX gin_index ON groups USING gin(name gin_trgm_ops);
</code></pre><p>再次执行查询：</p>
<pre tabindex="0"><code>postgres=# explain analyze select * from groups where name like &#39;%探探大%&#39;;
                                                     QUERY PLAN
---------------------------------------------------------------------------------------------------------------------
 Bitmap Heap Scan on groups  (cost=28.77..403.03 rows=100 width=69) (actual time=0.142..0.171 rows=1 loops=1)
   Recheck Cond: ((name)::text ~~ &#39;%探探大%&#39;::text)
   Rows Removed by Index Recheck: 1
   Heap Blocks: exact=2
   -&gt;  Bitmap Index Scan on gin_index  (cost=0.00..28.75 rows=100 width=0) (actual time=0.129..0.130 rows=2 loops=1)
         Index Cond: ((name)::text ~~ &#39;%探探大%&#39;::text)
 Planning Time: 0.165 ms
 Execution Time: 0.202 ms
(8 rows)
</code></pre><p>可以看出，通过建立 GIN 索引，前后模糊查询均已经支持走索引，执行时间较短，无需执行正反两次查询。但是更换索引结构，还是不能解决对 <code>Locale</code> 的强依赖问题。</p>
<pre tabindex="0"><code>test=# explain analyze select * from groups where name like &#39;探探大%&#39;;
                                                           QUERY PLAN
--------------------------------------------------------------------------------------------------------------------------------
 Bitmap Heap Scan on groups  (cost=536.77..911.03 rows=100 width=69) (actual time=561.098..561.100 rows=0 loops=1)
   Recheck Cond: ((name)::text ~~ &#39;探探大%&#39;::text)
   Rows Removed by Index Recheck: 1000000
   Heap Blocks: exact=12346
   -&gt;  Bitmap Index Scan on gin_index  (cost=0.00..536.75 rows=100 width=0) (actual time=269.319..269.319 rows=1000000 loops=1)
         Index Cond: ((name)::text ~~ &#39;探探大%&#39;::text)
 Planning Time: 0.200 ms
 Execution Time: 561.157 ms
(8 rows)


test=# \l test
                        List of databases
 Name |  Owner   | Encoding | Collate | Ctype | Access privileges
------+----------+----------+---------+-------+-------------------
 test | postgres | UTF8     | C       | C     |
(1 row)
</code></pre><p>上面的例子说明：在 <code>LC_CTYPE</code> 为 <code>C</code> 时虽然走了索引，但是比全表查询还慢。再仔细看，大部分时间都耗在了 Recheck 上，说明，第一轮根据Bitmap 索引查询得到的结果，准确率很低。</p>
<p>前面的 Like 查询在 <code>LC_CTYPE</code> 不为 <code>C</code> 时不支持，这里的 GIN 索引当<code>LC_CTYPE</code> 为 <code>C</code> 时又比较慢，人生为何如此艰难？</p>
<p>问题有可能出现在了分词上。 好在 PostgreSQL 给出了一个调试函数 <code>show_trgm</code> 使用这个函数，可以测试分词结果。</p>
<pre tabindex="0"><code>test=# select show_trgm(&#39;探探大群&#39;);
 show_trgm
-----------
 {}
(1 row)

test=# select show_trgm(&#39;tantanda&#39;);
                show_trgm
-----------------------------------------
 {&#34;  t&#34;,&#34; ta&#34;,and,ant,&#34;da &#34;,nda,nta,tan}
(1 row)
</code></pre><p>再使用一个 <code>Locale</code> 为 <code>en_US.UTF-8</code> 的数据库执行分词：</p>
<pre tabindex="0"><code>postgres=&gt; \l+ postgres
                                                                      数据库列表
   名称   |  拥有者  | 字元编码 |  校对规则   |    Ctype    |       存取权限        |  大小  |   表空间   |                    描述
----------+----------+----------+-------------+-------------+-----------------------+--------+------------+--------------------------------------------
 postgres | postgres | UTF8     | en_US.UTF-8 | en_US.UTF-8 | =Tc/postgres         +| 224 MB | pg_default | default administrative connection database
          |          |          |             |             | postgres=CTc/postgres+|        |            |
          |          |          |             |             | lixuehan=CTc/postgres |        |            |
(1 行记录)


postgres=&gt; select show_trgm(&#39;探探大群&#39;);
                   show_trgm
------------------------------------------------
 {0x98caf4,0xe3fef2,0xfcd2fa,0xff676b,0x4cb10e}
</code></pre><p>虽然添加了 <code>pg_trgm</code> 扩展插件，但是在 <code>LC_CTYPE</code> 非 <code>C</code> 时，分词函数并没有对中文生效，查询时即使走了索引，但在返回数据时进行的 <code>Recheck</code> 操作，耗费了太多时间，导致查询速度变慢。</p>
<p>再回到前面，我们在创建 GIN 索引时，先使用了 <code>pg_trgm</code> 这个扩展插件，这个插件是个什么东东呢？</p>
<p>还是得查看 PostgreSQL 官方的介绍：</p>
<blockquote>
<p>The pg_trgm module provides functions and operators for determining the similarity of ASCII alphanumeric text based on trigram matching,
as well as index operator classes that support fast searching for similar strings.</p>
</blockquote>
<p><code>pg_trgm</code> 模块提供函数和操作符来测定字母，数字，文本基于三元模型匹配的相似性， 还有支持快速搜索相似字符串的索引操作符类。</p>
<p>打个比方<code>foo</code>的三元模型的集合为：</p>
<p>[][]f、[]fo、foo、oo[]</p>
<p>这里用 [] 表示空，也就是说 <code>pg_trgm</code> 将字符串拆解成三个字符一组，如果不满三个，则用空格填充。</p>
<p>那么问题来了，如果我使用了 <code>pg_trgm</code> 扩展插件，且 <code>LC_CTYPE</code> 为 <code>en_US.UTF-8</code> ，是不是查询效率就一定高呢？</p>
<p>不然。</p>
<p>且看下面三个例子：</p>
<pre tabindex="0"><code>postgres=# explain analyze select * from groups where name like &#39;%探探大%&#39;;
                                                     QUERY PLAN
---------------------------------------------------------------------------------------------------------------------
 Bitmap Heap Scan on groups  (cost=28.77..403.03 rows=100 width=69) (actual time=0.066..0.111 rows=1 loops=1)
   Recheck Cond: ((name)::text ~~ &#39;%探探大%&#39;::text)
   Rows Removed by Index Recheck: 1
   Heap Blocks: exact=2
   -&gt;  Bitmap Index Scan on gin_index  (cost=0.00..28.75 rows=100 width=0) (actual time=0.049..0.050 rows=2 loops=1)
         Index Cond: ((name)::text ~~ &#39;%探探大%&#39;::text)
 Planning Time: 0.213 ms
 Execution Time: 0.149 ms
(8 rows)

postgres=# explain analyze select * from groups where name like &#39;%探探%&#39;;
                                                       QUERY PLAN
-------------------------------------------------------------------------------------------------------------------------
 Gather  (cost=1000.00..18564.33 rows=100 width=69) (actual time=0.666..238.445 rows=1 loops=1)
   Workers Planned: 2
   Workers Launched: 2
   -&gt;  Parallel Seq Scan on groups  (cost=0.00..17554.33 rows=42 width=69) (actual time=146.700..225.407 rows=0 loops=3)
         Filter: ((name)::text ~~ &#39;%探探%&#39;::text)
         Rows Removed by Filter: 333333
 Planning Time: 0.152 ms
 Execution Time: 238.469 ms
(8 rows)

postgres=# explain analyze select * from groups where name like &#39;%探%&#39;;
                                                       QUERY PLAN
-------------------------------------------------------------------------------------------------------------------------
 Gather  (cost=1000.00..18564.33 rows=100 width=69) (actual time=0.427..224.734 rows=980 loops=1)
   Workers Planned: 2
   Workers Launched: 2
   -&gt;  Parallel Seq Scan on groups  (cost=0.00..17554.33 rows=42 width=69) (actual time=1.493..207.726 rows=327 loops=3)
         Filter: ((name)::text ~~ &#39;%探%&#39;::text)
         Rows Removed by Filter: 333007
 Planning Time: 0.235 ms
 Execution Time: 224.913 ms
(8 rows)
</code></pre><p>上面的例子中，分别对待搜索字数为 <code>3</code> 个、 <code>2</code> 个、 <code>1</code> 个三种情况进行测试，发现关键词很短的情况（1-2汉字）的情况下召回率很差，无法走索引，只能进行全表扫，查询时间超过了 <code>200ms</code>。</p>
<h2 id="业务分词">业务分词</h2>
<p>从前面分析可知，使用 PostgreSQL 自带分词扩展插件存在以下不足：</p>
<p>1.关键词很短的情况（1-2汉字）的情况下召回率很差，特别是只有一个字时，是无法走索引的，只能进行全表扫。</p>
<p>2.定制性太差，只能使用它自己定义的逻辑来定义字符串的相似度</p>
<p>3.对 <code>LC_CTYPE</code> 有特殊的要求，可移植性较差 ，默认的 <code>LC_CTYPE</code> 无法正确对中文进行分词。</p>
<p>于是，我们决定在业务中使用分词。</p>
<p><img loading="lazy" src="/posts/pg/imgs/business_cut_words.png" type="" alt="分词架构"  /></p>
<ul>
<li>分词：在维护阶段，每一个被模糊搜索的字段（例如应用名称），在<strong>业务代码中使用分词包</strong>加工处理成一系列关键词。</li>
<li>索引：在数据库中建立关键词到表记录的倒排索引</li>
<li>查询：<strong>将查询同样拆解为关键词</strong>，然后利用查询关键词通过倒排索引找出相关的记录来。</li>
</ul>
<p>所以，我们打算采用业务代码分词 + PG查询的方式进行：</p>
<p><img loading="lazy" src="/posts/pg/imgs/search_update.png" type="" alt="搜索和查询架构"  /></p>
<ul>
<li>在业务表中新增一列，专门用来存放搜索列的分词结果</li>
<li>更新或者新插入记录时，在业务代码中进行分词，将分词结果，以 <code>tsvector</code> 的形式存储到新增列中</li>
<li>执行查询时，同样使用业务代码对待搜索内容进行分词，转换为 <code>tsquery</code> 形式，与 <code>tsvector</code> 进行匹配</li>
</ul>
<p>这样的好处：分词方法可以完全按照我们自己的定制的方案进行，如果后面需要支持拼音搜索、拼音首字母搜索等其他方式，在 DB 层面不需要更改，只需要更改业务代码中的分词逻辑即可。</p>
<h3 id="分词方案">分词方案</h3>
<p>常见的分词模式，主要分为：全模式、精确模式和单字模式三种。</p>
<p>以对「我来到了北京清华大学」这句话为例：</p>
<pre tabindex="0"><code>
【全模式】: 我/ 来到/ 北京/ 清华/ 清华大学/ 华大/ 大学

【精确模式】: 我/ 来到/ 北京/ 清华大学

【单字模式】：我/ 来/ 到/ 北/ 京/ 清/ 华/ 大/ 学

【全模式+精确模式+单字模式】：我/ 来到/ 北京/ 清华/ 清华大学/ 华大/ 大学/ 我/ 来/ 到/ 北/ 京/ 清/ 华/ 大/ 学
</code></pre><p>上面的第四种模式，是在群聊业务中使用到的模式，在下面会介绍到。</p>
<p>群聊业务中根据业务使用场景的不同，采用了不同的分词模式进行：</p>
<p>在新增群或者群名变更时，由于对于群名要尽可能列举出来每一种分词的可能，所以采用了「全模式+精确模式+单字模式」结合的思路进行。</p>
<p>比如群名：「爱宠物的单身男女们」</p>
<p>使用分词包进行分词后，结果为：「爱、宠物、单身、男女」</p>
<p>这时，如果输入「女」进行查询，则由于在插入群数据时，没有对该群名分出来「女」这个语素，所以是无法查询出来的。</p>
<p>针对此缺陷，所以本次采用第四种的<strong>订制模式</strong>：「爱」「宠」「物」「的」「单」「身」「男」「女」「们」「宠物」「单身」「男女」。这样基本就把所有可能的模式尽可能列举出来了。</p>
<p>搜索群时对于用户输入的字符串采用了「分词模式」进行。</p>
<p>比如用户输入「女神经」，如果按照「全模式+分词模式」，结果就会为：「女」「神」「经」「神经」。</p>
<p>这样就会把所有只包含「女」或者「神」字的记录也查询出来，而只包含「神」的记录大概率是用户不想搜出来的，如果返回这些记录会让用户感觉莫名其妙，用户体验较差。</p>
<p>如果只采用「分词模式」，则会只搜索「女」或者「神经」，在体验上较好一些，匹配效率更高。</p>
<h3 id="分词包">分词包</h3>
<p>目前使用比较多的分词包主要有：gojieba 、 jiebago、sego、gse。</p>
<p>给定相同词典，大小为 9.2MB，让这四种分词包分别加载后，分析其指标（使用 pprof 方法分析）。</p>
<p>由于我们业务场景中使用的是对短句切分（不超过14个字），这几个包官方给出的分词效率都是 KB/s 级别，对于我们的使用场景，性能绰绰有余，所以我们重点放在了内存占用指标的对比上。</p>
<p>执行下面命令，查看这四个分词包内存情况：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="k">go</span> <span class="nx">tool</span> <span class="nx">pprof</span> <span class="o">-</span><span class="nx">inuse_space</span> <span class="nx">http</span><span class="p">:</span><span class="c1">//127.0.0.1:6060/debug/pprof/heap
</span></span></span></code></pre></div><ol>
<li>
<p>gse 包</p>
<pre tabindex="0"><code>(pprof) top
Showing nodes accounting for 116.65MB, 100% of 116.65MB total
Showing top 10 nodes out of 19
      flat  flat%   sum%        cum   cum%
   50.04MB 42.90% 42.90%    50.04MB 42.90%  github.com/go-ego/cedar.(*Cedar).addBlock
   33.11MB 28.38% 71.28%    83.15MB 71.28%  github.com/go-ego/gse.(*Dictionary).addToken
   28.50MB 24.43% 95.71%    28.50MB 24.43%  github.com/go-ego/gse.(*Segmenter).SplitTextToWords
       3MB  2.57% 98.29%   116.65MB   100%  github.com/go-ego/gse.(*Segmenter).Reader
       2MB  1.71%   100%        2MB  1.71%  fmt.(*ss).convertString
         0     0%   100%        2MB  1.71%  fmt.(*ss).doScan
         0     0%   100%        2MB  1.71%  fmt.(*ss).scanOne
         0     0%   100%        2MB  1.71%  fmt.Fscanln
         0     0%   100%    50.04MB 42.90%  github.com/go-ego/cedar.(*Cedar).Insert
         0     0%   100%    50.04MB 42.90%  github.com/go-ego/cedar.(*Cedar).findPlaces
</code></pre><p>内存占用为 <code>116.65MB</code>。</p>
</li>
<li>
<p>sego 包</p>
<pre tabindex="0"><code>Type: inuse_space
Time: May 17, 2021 at 11:43am (CST)
Entering interactive mode (type &#34;help&#34; for commands, &#34;o&#34; for options)
(pprof) top
Showing nodes accounting for 122.61MB, 99.59% of 123.11MB total
Dropped 3 nodes (cum &lt;= 0.62MB)
Showing top 10 nodes out of 16
      flat  flat%   sum%        cum   cum%
   41.39MB 33.62% 33.62%    78.60MB 63.85%  github.com/huichen/sego.(*Dictionary).addToken
   36.71MB 29.82% 63.44%    36.71MB 29.82%  github.com/adamzy/cedar-go.(*cedar).addBlock
      33MB 26.81% 90.25%       33MB 26.81%  github.com/huichen/sego.splitTextToWords
    8.50MB  6.90% 97.16%   123.11MB   100%  github.com/huichen/sego.(*Segmenter).LoadDictionary
       3MB  2.44% 99.59%        3MB  2.44%  fmt.(*ss).convertString
         0     0% 99.59%        3MB  2.44%  fmt.(*ss).doScan
         0     0% 99.59%        3MB  2.44%  fmt.(*ss).scanOne
         0     0% 99.59%        3MB  2.44%  fmt.Fscanln
         0     0% 99.59%    36.71MB 29.82%  github.com/adamzy/cedar-go.(*Cedar).Insert
         0     0% 99.59%    36.71MB 29.82%  github.com/adamzy/cedar-go.(*cedar).findPlaces
</code></pre><p>内存占用 <code>123.11MB</code>。</p>
</li>
<li>
<p>jiebago</p>
<pre tabindex="0"><code>Type: inuse_space
Time: May 17, 2021 at 11:38am (CST)
Entering interactive mode (type &#34;help&#34; for commands, &#34;o&#34; for options)
(pprof) top
Showing nodes accounting for 25.30MB, 100% of 25.30MB total
Showing top 10 nodes out of 11
      flat  flat%   sum%        cum   cum%
   21.72MB 85.84% 85.84%    21.72MB 85.84%  github.com/wangbin/jiebago.(*Dictionary).addToken
    2.58MB 10.21% 96.05%     2.58MB 10.21%  github.com/wangbin/jiebago/finalseg.init.0
       1MB  3.95%   100%        1MB  3.95%  bufio.(*Scanner).Text
         0     0%   100%    21.72MB 85.84%  github.com/wangbin/jiebago.(*Dictionary).Load
         0     0%   100%    21.72MB 85.84%  github.com/wangbin/jiebago.(*Dictionary).loadDictionary
         0     0%   100%    21.72MB 85.84%  github.com/wangbin/jiebago.(*Segmenter).LoadDictionary
         0     0%   100%    21.72MB 85.84%  github.com/wangbin/jiebago/dictionary.LoadDictionary
         0     0%   100%        1MB  3.95%  github.com/wangbin/jiebago/dictionary.loadDictionary.func1
         0     0%   100%    21.72MB 85.84%  my-project/src/tokens/jiebago.init.0
         0     0%   100%    24.30MB 96.05%  runtime.doInit
</code></pre><p>内存占用 <code>25.30MB</code>。</p>
</li>
<li>
<p>gojieba</p>
<pre tabindex="0"><code>Type: inuse_space
Time: May 17, 2021 at 11:42am (CST)
Entering interactive mode (type &#34;help&#34; for commands, &#34;o&#34; for options)
(pprof) top
Showing nodes accounting for 520.04kB, 100% of 520.04kB total
      flat  flat%   sum%        cum   cum%
  520.04kB   100%   100%   520.04kB   100%  runtime/pprof.writeHeapInternal
         0     0%   100%   520.04kB   100%  net/http.(*ServeMux).ServeHTTP
         0     0%   100%   520.04kB   100%  net/http.(*conn).serve
         0     0%   100%   520.04kB   100%  net/http.HandlerFunc.ServeHTTP
         0     0%   100%   520.04kB   100%  net/http.serverHandler.ServeHTTP
         0     0%   100%   520.04kB   100%  net/http/pprof.Index
         0     0%   100%   520.04kB   100%  net/http/pprof.handler.ServeHTTP
         0     0%   100%   520.04kB   100%  runtime/pprof.(*Profile).WriteTo
         0     0%   100%   520.04kB   100%  runtime/pprof.writeHeap
</code></pre><p>总共占用内存约为 <code>520.04kB</code>。</p>
</li>
</ol>
<p>在占用内存方面：gojieba &lt; jiebago &lt; gse &lt; sego。</p>
<p>除此之外，也对比了一些其他方面的指标：</p>
<table>
<thead>
<tr>
<th>包名</th>
<th>维护情况（最近一次提交时间）</th>
<th>start 数</th>
<th>contributor 数</th>
<th>自带分词库大小</th>
<th>不足</th>
<th>亮点</th>
</tr>
</thead>
<tbody>
<tr>
<td>gojieba</td>
<td>2020年1月</td>
<td>1.4k</td>
<td>11</td>
<td>11M</td>
<td>1.不支持 mac 开发环境交叉编译 2.有issues提到在并发情况下会panic，亲测无此问题 3.底层使用 C++ 实现分词算法，通过 cgo 调用实现，测试环境由于缺少 g++ 执行文件，构建失败，对于环境依赖性较高。</td>
<td>号称是国内使用人数最多的 go 语言分词库</td>
</tr>
<tr>
<td>jiebago</td>
<td>2015年5月</td>
<td>358</td>
<td>1</td>
<td>5.1M</td>
<td>维护活跃度低，基本不维护了。</td>
<td></td>
</tr>
<tr>
<td>sego</td>
<td>2018年6月</td>
<td>1.5k</td>
<td>6</td>
<td>8.6M</td>
<td>仓库中给出的demo分词效果较差（“中华人民共和国”分为了7个字），代码风格较差，log.fatalf panic 满天飞</td>
<td>作者为前 Google 大佬，对 go 和分词熟悉</td>
</tr>
<tr>
<td>gse</td>
<td>2021年3月</td>
<td>1.6k</td>
<td>4</td>
<td>14M</td>
<td>加载自带的分词库占用内存较大。</td>
<td>代码风格较好，注释较为详尽</td>
</tr>
</tbody>
</table>
<p>综合前面的对照表，可知每种包都有各自的优缺点，代码质量也良莠不齐。</p>
<p>维护情况：jiebago &lt; sego &lt; gojieba &lt; gse</p>
<p>star 数：jiebago &lt; gojieba &lt; sego &lt; gse</p>
<p>综合考虑以上因素，选择了对于代码更具掌控性的 gse 作为分词包，虽然内存占用较大，但是如果单独抽象出来一个公共服务，专门提供分词能力，不影响核心服务即可。</p>
<h2 id="倒排">倒排</h2>
<p>如前所述，我们再业务表中新增一列存储分词结果：<code>group_name_tokens</code>。</p>
<p>PostgreSQL 官方文档推荐两种方法建立索引：</p>
<p>1）直接对 <code>group_name_tokens</code> 建立函数索引，比如：</p>
<pre tabindex="0"><code>CREATE INDEX group_idx ON groups USING GIN (to_tsvector(config_name, body));--to_tsvector 是PG内置的函数
</code></pre><p>2）直接将该列设置为 <code>tsvector</code> 类型，直接对 <code>tsvector</code> 类型列建立索引。</p>
<pre tabindex="0"><code>ALTER TABLE groups ADD column group_name_tokens tsvector;
</code></pre><p>我们选择方案2，出于以下考虑：</p>
<p>方案1，建立索引更简单一些，占用磁盘空间更小，因为 tsvector 并没有显式存储，但是每次查询都需要重新执行计算 <code>to_tsvector</code> 值，速度较慢;</p>
<p>方案2，利用索引查询时，无需指定全文索引的配置（全文索引有一些跟 <code>Locale</code> 相关的配置），另外，由于在验证索引匹配时，无需重新计算 <code>to_tsvector</code> 值，所以查询速度更快。</p>
<p>在群聊业务场景下，考虑到群的数量可控，所以占用空间不会增加太多，同时用户对于搜索速度的体验要求更高，所以采用了方案2。</p>
<p>如果要对搜索结果按照相似度排序呢？</p>
<h3 id="similarity">similarity</h3>
<p>这个是在 <code>pg_trgm</code> 扩展中包含的函数，其对中文分词支持不佳，所以业务中不采用。</p>
<h3 id="最小编辑距离">最小编辑距离</h3>
<p>最小编辑距离，需要使用到 PostgreSQL 的扩展：</p>
<pre tabindex="0"><code>CREATE EXTENSION fuzzystrmatch;---依赖该扩展为搜索结果排序
</code></pre><p>levenshtein 函数的一些相关 API：</p>
<pre tabindex="0"><code>levenshtein(text source, text target, int ins_cost, int del_cost, int sub_cost) returns int
levenshtein(text source, text target) returns int
levenshtein_less_equal(text source, text target, int ins_cost, int del_cost, int sub_cost, int max_d) returns int
levenshtein_less_equal(text source, text target, int max_d) returns int
</code></pre><p>官方文档对 <code>source</code>  和  <code>target</code> 参数给出限制：不能超过 <code>255</code> 字节（由于群名称有长度限制，故适合我们的业务使用场景）。</p>
<p><code>cost</code> 参数分别指定了对于一个字符的插入、删除和代替的代价，个人理解，一定程度上就是字符串的这三种改变带来的权重。</p>
<p>分别举几个例子就明白了：</p>
<ol>
<li>
<p>插入</p>
<p><code>GUMBO</code> 和 <code>GUMBOL</code>，后者相比前者，等价于插入了一个 <code>L</code> 字符。所以，影响最终结果的，只有 <code>ins_cost</code> 参数。</p>
<pre tabindex="0"><code>--- 设置为 0，表示插入新字符带来的代价不影响
lixuehan=# SELECT levenshtein(&#39;GUMBO&#39;, &#39;GUMBOL&#39;,0,1,1);
 levenshtein
-------------
           0
(1 row)

--- 设置为 1，表示插入新字符带来的代价为 1
lixuehan=# SELECT levenshtein(&#39;GUMBO&#39;, &#39;GUMBOL&#39;,1,1,1);
 levenshtein
-------------
           1
(1 row)
</code></pre></li>
<li>
<p>删除</p>
<p><code>GUMBO</code> 和 <code>GUMO</code>，后者相比前者，等价于删除了一个 <code>B</code> 字符。所以，影响最终比较结果的只有 <code>del_cost</code> 参数。</p>
<pre tabindex="0"><code>--- 设置为 0，表示插入新字符带来的代价不影响
lixuehan=# SELECT levenshtein(&#39;GUMBO&#39;, &#39;GUMO&#39;,1,0,1);
 levenshtein
-------------
           0
(1 row)

--- 设置为 1，表示插入新字符带来的代价为 1
lixuehan=# SELECT levenshtein(&#39;GUMBO&#39;, &#39;GUMO&#39;,1,1,1);
 levenshtein
-------------
           1
(1 row)
</code></pre></li>
<li>
<p>代替</p>
<p><code>GUMBO</code> 和 <code>GUMLO</code>，后者相比前者，等价于将 <code>B</code> 字符替换为 <code>L</code> 字符。所以，影响最终比较结果的只有 <code>sub_cost</code> 参数。</p>
<pre tabindex="0"><code>--- 设置为 0，表示插入新字符带来的代价不影响
lixuehan=# SELECT levenshtein(&#39;GUMBO&#39;, &#39;GUMLO&#39;,1,1,0);
 levenshtein
-------------
           0
(1 row)

--- 设置为 1，表示插入新字符带来的代价为 1
lixuehan=# SELECT levenshtein(&#39;GUMBO&#39;, &#39;GUMLO&#39;,1,1,1);
 levenshtein
-------------
           1
(1 row)
</code></pre></li>
</ol>
<p>在实际的使用中，我们可以通过确定字符串这三种不同改变带来的权重来影响实际的比较结果。</p>
<p><code>levenshtein_less_equal</code> 函数是一个加速版的 <code>levenshtein</code>。如果 <code>levenshtein</code> 距离大于 <code>max_id</code> ，则返回 <code>levenshtein</code> 距离值，反之，则返回 <code>max_id+1</code>。</p>
<pre tabindex="0"><code>--- levenshtein 距离 ---
lixuehan=# select levenshtein(&#39;extensive&#39;, &#39;exhaustive&#39;);
 levenshtein
-------------
           4
(1 row)

--- max_id 为 2，时返回 3 ---
lixuehan=# SELECT levenshtein_less_equal(&#39;extensive&#39;, &#39;exhaustive&#39;,2);
 levenshtein_less_equal
------------------------
                      3
(1 row)

--- max_id 为 1，时返回 2 ---
lixuehan=# SELECT levenshtein_less_equal(&#39;extensive&#39;, &#39;exhaustive&#39;,1);
 levenshtein_less_equal
------------------------
                      2
(1 row)

--- max_id 大于 levenshtein 值时，返回真正的 levenshtein 距离 ---
lixuehan=# SELECT levenshtein_less_equal(&#39;extensive&#39;, &#39;exhaustive&#39;,7);
 levenshtein_less_equal
------------------------
                      4
(1 row)
</code></pre><p>在我们的群搜索业务场景中，采取了简单的第二种 api ：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="nf">levenshtein</span><span class="p">(</span><span class="n">text</span> <span class="n">source</span><span class="p">,</span> <span class="n">text</span> <span class="n">target</span><span class="p">)</span> <span class="n">returns</span> <span class="kt">int</span>
</span></span></code></pre></div><p>这种情况下，三种case带来的影响都默认是 1.</p>
<p>更多介绍参见 <a href="https://www.postgresql.org/docs/9.1/fuzzystrmatch.html">官方文档</a>。</p>
<p>使用方式比较直观：</p>
<pre tabindex="0"><code>SELECT id,levenshtein(name,?) AS distance FROM groups WHERE group_name_tokens @@ to_tsquery(&#39;探探&#39;) ORDER BY distance ASC
</code></pre><h2 id="上线优化效果">上线优化效果</h2>
<p>利用分词+倒排的方案，实现了搜索功能与 PostgreSQL 的 <code>Locale_Ctype</code> 彻底解耦，同时提供了相似度排名特性，同时加快了搜索的速度，提升了性能，下面两张图就是上线前后的对比：</p>
<p><img loading="lazy" src="/posts/pg/imgs/compare.png" type="" alt=""  /></p>
<p>上线前后对比</p>
<p>优化上线前，搜索查询最长耗时 <code>22.2ms</code>，最短耗时 <code>440us</code>，平均耗时：<code>6.6ms</code>。</p>
<p>优化上线后，最短耗时：<code>456us</code>，最长耗时：<code>14ms</code>，平均耗时：<code>1.7ms</code>。</p>
<p>与之前的 Like 查询相比，最长耗时比原来少了 <code>2ms</code>，平均耗时缩短为原来的 <code>1/4</code>，提升效果显著。</p>
<h2 id="最后">最后</h2>
<p>下面是在实现需求时的一些参考链接，有兴趣可以点击链接详读，文章中有错误之处，恳请大家批评指针。</p>
<ol>
<li><a href="https://github.com/digoal/blog/blob/master/201704/20170426_01.md">https://github.com/digoal/blog/blob/master/201704/20170426_01.md</a></li>
<li><a href="https://www.postgresql.org/docs/13/locale.html">https://www.postgresql.org/docs/13/locale.html</a></li>
<li><a href="http://pigsty.cc/zh/blog/2021/03/05/pg%E4%B8%AD%E7%9A%84%E6%9C%AC%E5%9C%B0%E5%8C%96%E6%8E%92%E5%BA%8F%E8%A7%84%E5%88%99/">http://pigsty.cc/zh/blog/2021/03/05/pg中的本地化排序规则/</a></li>
<li><a href="https://postgrespro.com/blog/pgsql/4261647">Indexes in PostgreSQL</a></li>
<li><a href="https://postgrespro.com/blog/pgsql/4261647">https://postgrespro.com/blog/pgsql/4261647</a></li>
</ol>
]]></content:encoded>
    </item>
    
    <item>
      <title>Hugo 中的命令行模式</title>
      <link>https://anriclee.github.io/posts/hugo_cmd_pattern/</link>
      <pubDate>Fri, 26 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://anriclee.github.io/posts/hugo_cmd_pattern/</guid>
      <description>最近在用 hugo 构建了个人博客之后，便有兴趣想研究下其源码。但是源码的体量之大，逻辑之复杂出乎我的意料。不过好在源码的结构比较清晰，有许多地方值得借鉴。
比如它的程序入口，非常简洁：
func main() { resp := commands.Execute(os.Args[1:]) if resp.Err != nil { if resp.IsUserError() { resp.Cmd.Println(&amp;#34;&amp;#34;) resp.Cmd.Println(resp.Cmd.UsageString()) } os.Exit(-1) } } 它将所有根据命令行参数传入的指令统一封装到 commands 包中。后面有新命令需求时，只需要新建一个 cmd 文件即可。
它是怎么做到的呢？
简而言之，就是在程序入口处将所有的命令类汇总，然后再根据输入参数args，决定要执行哪个cmd，看似增加了代码的复杂度，但是对于后续命令的扩展显得非常方便。
hugo 中使用了 builder 模式将所有的命令汇总，我这里简单起见，只初始化了一个数组，主要是体会其开闭原则的思想即可。
Talk is cheap, show me the code
借鉴它的思路，我写了一个简化版，可以参看，代码链接.</description>
      <content:encoded><![CDATA[<p>最近在用 hugo 构建了个人博客之后，便有兴趣想研究下其源码。但是源码的体量之大，逻辑之复杂出乎我的意料。不过好在源码的结构比较清晰，有许多地方值得借鉴。</p>
<p>比如它的程序入口，非常简洁：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-Golang" data-lang="Golang"><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">resp</span> <span class="o">:=</span> <span class="nx">commands</span><span class="p">.</span><span class="nf">Execute</span><span class="p">(</span><span class="nx">os</span><span class="p">.</span><span class="nx">Args</span><span class="p">[</span><span class="mi">1</span><span class="p">:])</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">resp</span><span class="p">.</span><span class="nx">Err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">resp</span><span class="p">.</span><span class="nf">IsUserError</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">resp</span><span class="p">.</span><span class="nx">Cmd</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="nx">resp</span><span class="p">.</span><span class="nx">Cmd</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">resp</span><span class="p">.</span><span class="nx">Cmd</span><span class="p">.</span><span class="nf">UsageString</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="nx">os</span><span class="p">.</span><span class="nf">Exit</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>它将所有根据命令行参数传入的指令统一封装到 <code>commands</code> 包中。后面有新命令需求时，只需要新建一个 cmd 文件即可。</p>
<p>它是怎么做到的呢？</p>
<p>简而言之，就是在程序入口处将所有的命令类汇总，然后再根据输入参数<code>args</code>，决定要执行哪个<code>cmd</code>，看似增加了代码的复杂度，但是对于后续命令的扩展显得非常方便。</p>
<p>hugo 中使用了 builder 模式将所有的命令汇总，我这里简单起见，只初始化了一个数组，主要是体会其开闭原则的思想即可。</p>
<blockquote>
<p>Talk is cheap, show me the code</p>
</blockquote>
<p>借鉴它的思路，我写了一个简化版，可以参看，<a href="https://github.com/anriclee/GoPatterns/tree/main/cmdpattern">代码链接</a>.</p>
]]></content:encoded>
    </item>
    
  </channel>
</rss>
