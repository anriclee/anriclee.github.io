<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on AnricLee's House</title><link>https://anriclee.github.io/posts/</link><description>Recent content in Posts on AnricLee's House</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>&amp;copy; &lt;a href="https://github.com/anriclee"> AnricLee &lt;/a></copyright><lastBuildDate>Sun, 27 Mar 2022 10:29:12 +0800</lastBuildDate><atom:link href="https://anriclee.github.io/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>Effective Go 之引言</title><link>https://anriclee.github.io/posts/effectivego-1/</link><pubDate>Sun, 27 Mar 2022 10:29:12 +0800</pubDate><guid>https://anriclee.github.io/posts/effectivego-1/</guid><description>Golang 语言借鉴了很多其他语言的特性，但是其本身也有不同于其他语言的一些独特的特性。作者强调了，不能照搬写其他语言的模式到 Go 里面。
In other words, to write Go well, it&amp;rsquo;s important to understand its properties and idioms.
如何写出地道的 Golang 语言，了解语言本身的特性和语言特性（idioms）很重要。</description></item><item><title>Examle Article</title><link>https://anriclee.github.io/posts/create-theme/</link><pubDate>Sat, 26 Jun 2021 16:00:21 +0800</pubDate><guid>https://anriclee.github.io/posts/create-theme/</guid><description>Introduction This tutorial will show you how to create a simple theme in Hugo. I assume that you are familiar with HTML, the bash command line, and that you are comfortable using Markdown to format content. I&amp;rsquo;ll explain how Hugo uses templates and how you can organize your templates to create a theme. I won&amp;rsquo;t cover using CSS to style your theme.
We&amp;rsquo;ll start with creating a new site with a very basic template.</description></item><item><title>Hello</title><link>https://anriclee.github.io/posts/hello/</link><pubDate>Sat, 26 Jun 2021 16:00:21 +0800</pubDate><guid>https://anriclee.github.io/posts/hello/</guid><description>Hello world!</description></item><item><title>Hugo 中的命令行模式</title><link>https://anriclee.github.io/posts/hugo-%E4%B8%AD%E7%9A%84%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%A8%A1%E5%BC%8F/</link><pubDate>Fri, 26 Jun 2020 22:31:37 +0800</pubDate><guid>https://anriclee.github.io/posts/hugo-%E4%B8%AD%E7%9A%84%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%A8%A1%E5%BC%8F/</guid><description>最近在用 hugo 构建了个人博客之后，便有兴趣想研究下其源码。但是源码的体量之大，逻辑之复杂出乎我的意料。不过好在源码的结构比较清晰，有许多地方值得借鉴。
比如它的程序入口，非常简洁：
func main() { resp := commands.Execute(os.Args[1:]) if resp.Err != nil { if resp.IsUserError() { resp.Cmd.Println(&amp;quot;&amp;quot;) resp.Cmd.Println(resp.Cmd.UsageString()) } os.Exit(-1) } } 它将所有根据命令行参数传入的指令统一封装到 commands 包中。后面有新命令需求时，只需要新建一个 cmd 文件即可。
它是怎么做到的呢？
简而言之，就是在程序入口处将所有的命令类汇总，然后再根据输入参数args，决定要执行哪个cmd，看似增加了代码的复杂度，但是对于后续命令的扩展显得非常方便。
hugo 中使用了 builder 模式将所有的命令汇总，我这里简单起见，只初始化了一个数组，主要是体会其开闭原则的思想即可。
Talk is cheap, show me the code
借鉴它的思路，我写了一个简化版，可以参看，代码链接.</description></item><item><title>Hi</title><link>https://anriclee.github.io/posts/hi/</link><pubDate>Wed, 26 Jun 2019 16:16:49 +0800</pubDate><guid>https://anriclee.github.io/posts/hi/</guid><description>Hi world!</description></item></channel></rss>