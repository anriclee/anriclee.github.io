<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Spring on ReadTinyWords</title>
    <link>https://anriclee.github.io/tags/spring/</link>
    <description>Recent content in Spring on ReadTinyWords</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Tue, 19 Sep 2023 22:17:32 +0800</lastBuildDate>
    <atom:link href="https://anriclee.github.io/tags/spring/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>[译] 细谈依赖和配置</title>
      <link>https://anriclee.github.io/posts/spring_framework/core/the_ioc_container/dependencies/dependencies_configuration_in_detail/</link>
      <pubDate>Mon, 11 Sep 2023 21:12:31 +0800</pubDate>
      <guid>https://anriclee.github.io/posts/spring_framework/core/the_ioc_container/dependencies/dependencies_configuration_in_detail/</guid>
      <description>&lt;p&gt;依赖项的详细配置&lt;/p&gt;&#xA;&lt;p&gt;正如前面所提到的那样，你可以定义 bean 的属性和构造函数参数，去引用其他已经设置好的 bean 或者内联定义的值。&#xA;为了达到这个目的，Spring 的基于 XML 配置元数据支持在 &lt;!-- raw HTML omitted --&gt; 和 &lt;!-- raw HTML omitted --&gt; 元素内增加子元素。&lt;/p&gt;&#xA;&lt;h1 id=&#34;直接值基本类型字符串等等&#34;&gt;直接值（基本类型，字符串等等）&lt;/h1&gt;&#xA;&lt;p&gt;&lt;!-- raw HTML omitted --&gt; 元素的 value 值，把一个属性值或者构造函数参数定义为一个可读字符串。Spring 的转换服务被用来将这些值从字符串转换为属性或者参数的实际类型。下面的例子展示了可以被设置的多种值：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-XML&#34; data-lang=&#34;XML&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;bean&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;id=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;myDataSource&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;class=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;org.apache.commons.dbcp.BasicDataSource&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;destroy-method=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;close&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;!-- results in a setDriverClassName(String) call --&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;property&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;name=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;driverClassName&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;value=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;com.mysql.jdbc.Driver&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;property&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;name=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;url&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;value=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;jdbc:mysql://localhost:3306/mydb&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;property&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;name=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;username&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;value=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;root&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;property&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;name=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;password&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;value=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;misterkaoli&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/bean&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;下面的例子使用 p-namespace 来让 XML 配置更加简明：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-XML&#34; data-lang=&#34;XML&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;beans&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;xmlns=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http://www.springframework.org/schema/beans&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#a6e22e&#34;&gt;xmlns:xsi=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http://www.w3.org/2001/XMLSchema-instance&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#a6e22e&#34;&gt;xmlns:p=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http://www.springframework.org/schema/p&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#a6e22e&#34;&gt;xsi:schemaLocation=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http://www.springframework.org/schema/beans&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&#x9;https://www.springframework.org/schema/beans/spring-beans.xsd&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;bean&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;id=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;myDataSource&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;class=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;org.apache.commons.dbcp.BasicDataSource&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&lt;span style=&#34;color:#a6e22e&#34;&gt;destroy-method=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;close&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&lt;span style=&#34;color:#a6e22e&#34;&gt;p:driverClassName=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;com.mysql.jdbc.Driver&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&lt;span style=&#34;color:#a6e22e&#34;&gt;p:url=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;jdbc:mysql://localhost:3306/mydb&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&lt;span style=&#34;color:#a6e22e&#34;&gt;p:username=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;root&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&lt;span style=&#34;color:#a6e22e&#34;&gt;p:password=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;misterkaoli&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/beans&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;上面的 XML 更加的简明。然而，类型是在运行时而不是设计时发现的，除非你在创建 bean 定义的时候，用支持自动属性完成的 IDE（例如 Intellij IDEA 或者 Eclipse 的 Spring 工具）。这些辅助都是高度推荐的。&#xA;你同样可以配置 &lt;code&gt;java.util.Properties&lt;/code&gt; 的实例，如下：&lt;/p&gt;</description>
    </item>
    <item>
      <title>[译] 依赖注入</title>
      <link>https://anriclee.github.io/posts/spring_framework/core/the_ioc_container/dependencies/dependency_injection/</link>
      <pubDate>Mon, 11 Sep 2023 20:12:31 +0800</pubDate>
      <guid>https://anriclee.github.io/posts/spring_framework/core/the_ioc_container/dependencies/dependency_injection/</guid>
      <description>&lt;p&gt;在依赖注入（DI）里，对象通过构造函数参数、工厂方法参数或者在&#xA;被工厂方法创建返回的对象中设置的属性定义他们的依赖。然后，容器在创建这些 bean 时，注入依赖。这个过程与 bean 自身使用所需要类的直接构造函数实例化，或者通过 Service Locator 模式来找到所需要的依赖这个过程正好相反。&lt;/p&gt;&#xA;&lt;p&gt;使用 DI 原则的代码更加干净整洁，并且提供给对象的依赖时，解耦也更加高效。对象并不找他们的依赖也并不知道这些依赖的地址或者类。这样的结果就是，你的类变得更易测试，尤其是当依赖是接口或者抽象的父类时，在单元测试可以对这些依赖进行打桩或者mock他们的实现。&lt;/p&gt;&#xA;&lt;h1 id=&#34;基于构造函数的依赖注入&#34;&gt;基于构造函数的依赖注入&lt;/h1&gt;&#xA;&lt;p&gt;基于构造函数的依赖注入，是通过容器调用构造函数，并且传入若干参数来实现的，每一个参数都代表了一个依赖。调用静态工厂方法并传入特定的参数来构造一个 bean 也是一样的，在本讨论中，对待构造函数的参数和静态方法的参数也是相似的。下面的这里展示了一个之能通过构造函数来进行依赖注入的类：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-Java&#34; data-lang=&#34;Java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;SimpleMovieLister&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#75715e&#34;&gt;// the SimpleMovieLister has a dependency on a MovieFinder&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;final&lt;/span&gt; MovieFinder movieFinder;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#75715e&#34;&gt;// a constructor so that the Spring container can inject a MovieFinder&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;SimpleMovieLister&lt;/span&gt;(MovieFinder movieFinder) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;movieFinder&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; movieFinder;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#75715e&#34;&gt;// business logic that actually uses the injected MovieFinder is omitted...&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;注意，对于这个类没有更多特殊的地方。它仅仅是一个POJO，并且对容器特定接口、父类或者注解没有任何依赖。【译者按：没有任何代码侵入性】&lt;/p&gt;&#xA;&lt;h2 id=&#34;构造函数参数解析&#34;&gt;构造函数参数解析&lt;/h2&gt;&#xA;&lt;p&gt;构造函数参数解析匹配通过参数类型来进行。如果在构造函数参数的 bean 定义中没有歧义，那么在 bean 定义中构造函数参数的顺序，就是当 bean 被实例化时，传给给构造函数参数的顺序。考虑下面的类：&lt;/p&gt;</description>
    </item>
    <item>
      <title>[译] Bean 概述</title>
      <link>https://anriclee.github.io/posts/spring_framework/core/the_ioc_container/bean_overview/</link>
      <pubDate>Sat, 02 Sep 2023 23:12:31 +0800</pubDate>
      <guid>https://anriclee.github.io/posts/spring_framework/core/the_ioc_container/bean_overview/</guid>
      <description>&lt;p&gt;一个 Sring IoC 容器可以操作一个或者多个 bean。这些 bean 是通过你提供给容器的配置元数据生成的（例如，以 XML 中的 &lt;code&gt;&amp;lt;bean/&amp;gt;&lt;/code&gt; ）。&lt;/p&gt;&#xA;&lt;p&gt;在容器内，这些 bean 的定义被表示成 &lt;code&gt;BeanDefinition&lt;/code&gt; 对象的形式，包含了下面的元数据：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;包定义的类名：通常是定义的 bean 的真正实现类&lt;/li&gt;&#xA;&lt;li&gt;bean 行为配置元素，表明了 bean 在 container 中的行为（scope，生命周期回调等等）。&lt;/li&gt;&#xA;&lt;li&gt;对其他需要的 bean 的引用。这些引用也被称作协作器和依赖。&lt;/li&gt;&#xA;&lt;li&gt;在一个新创建的对象中的其他配置设置 - 例如，池的数量限制或者一个操作连接池 bean 中的连接数量&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;这些元数据转换为构成这些 bean 定义的一系列属性。下表表示了这些属性值：&lt;/p&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;属性&lt;/th&gt;&#xA;          &lt;th&gt;含义&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;Class&lt;/td&gt;&#xA;          &lt;td&gt;正在实例化的bean&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;Name&lt;/td&gt;&#xA;          &lt;td&gt;bean的名字&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;Scope&lt;/td&gt;&#xA;          &lt;td&gt;Bean的Scope&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;构造函数参数&lt;/td&gt;&#xA;          &lt;td&gt;依赖注入&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;自动装配模式&lt;/td&gt;&#xA;          &lt;td&gt;装配的协作对象&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;懒加载模式&lt;/td&gt;&#xA;          &lt;td&gt;懒加载 Bean&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;初始化方法&lt;/td&gt;&#xA;          &lt;td&gt;初始化回调&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;析构方法&lt;/td&gt;&#xA;          &lt;td&gt;析构回调&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;p&gt;除了包含怎么创建一个特定的 bean 的信息之外， &lt;code&gt;ApplicationContext&lt;/code&gt; 的实现同样允许在容器外面已经创建好的对象注册到其中（用户创建）。这是通过 &lt;code&gt;getBeanFactory&lt;/code&gt; 方法获取到 &lt;code&gt;ApplicationContext&lt;/code&gt; 的 &lt;code&gt;BeanFactory&lt;/code&gt;，得到 &lt;code&gt;DefaultListableBeanFactory&lt;/code&gt; 实现来做到的。&lt;code&gt;DefaultListableBeanFactory&lt;/code&gt; 支持通过调用 &lt;code&gt;registerSingleton(..)&lt;/code&gt;  和 &lt;code&gt;registerBeanDefinition(..)&lt;/code&gt; 方法来实现这样的注册。然而，典型的应用程序仅仅使用常规的 bean 定义元数据。&lt;/p&gt;</description>
    </item>
    <item>
      <title>[译] Spring IOC 容器</title>
      <link>https://anriclee.github.io/posts/spring_framework/core/the_ioc_container/container_and_beans/</link>
      <pubDate>Sat, 02 Sep 2023 23:12:31 +0800</pubDate>
      <guid>https://anriclee.github.io/posts/spring_framework/core/the_ioc_container/container_and_beans/</guid>
      <description>&lt;h1 id=&#34;spring-ioc-和-bean-的简介&#34;&gt;Spring IOC 和 bean 的简介&lt;/h1&gt;&#xA;&lt;p&gt;本章涵盖了 SpringFramework 中的控制反转原则（Ioc）的实现。IoC 也被称为依赖注入（DI）。它是这样的一种过程，在此期间对象仅通过构造函数参数、工厂方法的参数或者当对象实例被构造后或者通过工厂方法返回时在它上面设置的属性定义自己的依赖（即对象必须合作的其他对象）。&lt;/p&gt;&#xA;&lt;p&gt;当容器创建这些 bean 后，再注入这些依赖。&lt;/p&gt;&#xA;&lt;p&gt;这个过程本质上与bean 通过使用直接的类构造函数进行直接实例化或者通过类似 Service Locator模式来寻找依赖的位置是相反的（这也是 IoC 名字的由来）。&lt;/p&gt;&#xA;&lt;p&gt;&lt;code&gt;org.springframework.beans&lt;/code&gt; 和 &lt;code&gt;org.springframework.context&lt;/code&gt; 包是 SpringFramework IoC 容器的基石。&lt;code&gt;BeanFactory&lt;/code&gt; 接口提供了一种更先进的能够控制人已类型对象的配置机制。&lt;code&gt;ApplicationContext&lt;/code&gt; 是 &lt;code&gt;BeanFactory&lt;/code&gt; 的子接口。它增加了下面的特性：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;与 Spring 的 AOP 特性更容易整合&lt;/li&gt;&#xA;&lt;li&gt;消息资源处理（在国际化场景的使用）&lt;/li&gt;&#xA;&lt;li&gt;事件发布&lt;/li&gt;&#xA;&lt;li&gt;例如用于 Web 应用的 &lt;code&gt;WebApplicationContext&lt;/code&gt; 应用层特定的上下文&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;总而言之，&lt;code&gt;BeanFactory&lt;/code&gt; 提供了配置的框架和基本的功能。&lt;code&gt;ApplicationContext&lt;/code&gt; 增加了更多的企业特定的功能。&lt;code&gt;ApplicationContext&lt;/code&gt; 完全是 &lt;code&gt;BeanFactory&lt;/code&gt; 的超集。在本章关于 Spring IoC 容器做专门描述时会用到。想要获取更多的关于使用 &lt;code&gt;ApplicationContext&lt;/code&gt; 而非 &lt;code&gt;BeanFactory&lt;/code&gt; 的信息，参见介绍 &lt;a href=&#34;https://docs.spring.io/spring-framework/reference/core/beans/beanfactory.html&#34;&gt;BeanFactory&lt;/a&gt; API 的部分。&lt;/p&gt;&#xA;&lt;p&gt;在 Spring 中，作为你应用基石同时可以被 Spring IoC 容器所操控的对象就被称之为 bean。bean 就是被 Spring IoC 容器实例化、组装和设置的对象。否则，一个 bean 就是你应用程序中诸多对象中的一个。 Beans 以及他们依赖关系，反映在容器使用的配置元数据中。&lt;/p&gt;</description>
    </item>
    <item>
      <title>[译] 容器概述</title>
      <link>https://anriclee.github.io/posts/spring_framework/core/the_ioc_container/container_overview/</link>
      <pubDate>Sat, 02 Sep 2023 23:12:31 +0800</pubDate>
      <guid>https://anriclee.github.io/posts/spring_framework/core/the_ioc_container/container_overview/</guid>
      <description>&lt;h1 id=&#34;容器概述&#34;&gt;容器概述&lt;/h1&gt;&#xA;&lt;p&gt;&lt;code&gt;org.springframework.context.ApplicationContext&lt;/code&gt; 接口代表了 Spring IoC 容器，它主要负责通过读取配置文件对 bean 进行实例化、配置和组装。&#xA;容器通过读取配置元数据来获知要实例化、配置和组装那些对象。配置的元数据一般为 XML、Java 注解和 Java 代码的形式，它让你能够表达组成你应用程序的对象以及对象之间的丰富的相互依赖关系。&lt;/p&gt;&#xA;&lt;p&gt;Spring 提供了 &lt;code&gt;ApplicationContext&lt;/code&gt; 接口的若干实现。在单体应用中，创建一个 &lt;code&gt;ClassPathXmlApplicationContext&lt;/code&gt; 或者 &lt;code&gt;FileSystemXmlApplicationContext&lt;/code&gt; 是很常见的。虽然 XML 是定义配置元数据的传统形式，但是你还可以通过在 XML 文件里面进行声明配置来告诉容器对于 Java 注解或者Java代码格式的支持。&lt;/p&gt;&#xA;&lt;p&gt;在大多数的应用场景中，并不需要显式的代码来实例化 Spring IoC 容器。例如，在 Web 应用的场景中，在 &lt;code&gt;web.xml&lt;/code&gt; 文件中仅用简单的 8 行代码左右的样板 Web XML 描述符即可满足需要（参考 &lt;a href=&#34;https://docs.spring.io/spring-framework/reference/core/beans/context-introduction.html#context-create&#34;&gt;Convenient ApplicationContext Instantiation for Web Applications&lt;/a&gt;）。如果你使 Eclipse 中的 Spring 工具（在 Eclipse 开发环境中），你可以通过几下鼠标点击或者按键的敲击就能轻松创建这样一个样板配置文件。&lt;/p&gt;&#xA;&lt;p&gt;下图展示了关于 Spring 工作机制的一个全局视角。在 &lt;code&gt;ApplicationContext&lt;/code&gt; 被创建和初始化后，你的应用类和配置元数据已经捆绑在一起了，这样一来，你就有一个充分配置并且可执行的系统或者应用程序。&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;imgs/ioc.png&#34; alt=&#34;Spring&#34;&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;配置元数据&#34;&gt;配置元数据&lt;/h1&gt;&#xA;&lt;p&gt;如上图所示，Spring Ioc 容器接收到一种格式的配置元数据。这个配置元数据代表了，作为一个应用开发者你告诉 Spring 容器在应用程序中，如何实例化、配置和组装对象。&lt;/p&gt;&#xA;&lt;p&gt;传统的配置元数据是一种简单并且符合直觉的 XML 形式，在本章的大部分地方，也用此来表达关键的概念和 Spring IoC 容器的特性。&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;基于 XML 的元数据不是配置元数据的唯一允许的形式。Spring IoC 容器自身与配置元数据实际上是什么格式完全解耦。目前许多开发者在应用程序中选择&lt;a href=&#34;https://docs.spring.io/spring-framework/reference/core/beans/java.html&#34;&gt;基于Java 的配置&lt;/a&gt;。&lt;/p&gt;</description>
    </item>
    <item>
      <title>[译] SpringFramework 文档</title>
      <link>https://anriclee.github.io/posts/spring_framework/directory/</link>
      <pubDate>Sat, 02 Sep 2023 11:46:07 +0800</pubDate>
      <guid>https://anriclee.github.io/posts/spring_framework/directory/</guid>
      <description>&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;a href=&#34;Overview&#34;&gt;概述&lt;/a&gt; 历史，设计哲学，反馈，开始&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;a href=&#34;&#34;&gt;核心&lt;/a&gt; IoC容器，事件，资源，i18n，验证，数据绑定，类型转换，SpEL，AOP，AOT&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;a href=&#34;&#34;&gt;测试&lt;/a&gt; 对象 Mock，测试上下文框架，Spring MVC 测试，Web 测试客户端&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;a href=&#34;&#34;&gt;数据接入&lt;/a&gt; 事务，DAO 支持，JDBC，R2DBC，O/R 映射，XML 编码&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;a href=&#34;&#34;&gt;Web Servlet&lt;/a&gt; SpringMVC,WebSocket,SockJS,STOMP 通信&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;a href=&#34;&#34;&gt;Web 响应式&lt;/a&gt; Spring WebFlux, WebClient, WebSocket, RSocket.&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;[集成] REST 客户端, JMS, JCA, JMX, Email, 任务, 调度, 缓存, 可见性.&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;a href=&#34;&#34;&gt;语言&lt;/a&gt; Kotlin, Groovy, Dynamic 语言.&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;a href=&#34;&#34;&gt;附录&lt;/a&gt; Spring 属性&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>[译] SpringFramework 概述</title>
      <link>https://anriclee.github.io/posts/spring_framework/overview/</link>
      <pubDate>Sat, 02 Sep 2023 11:46:07 +0800</pubDate>
      <guid>https://anriclee.github.io/posts/spring_framework/overview/</guid>
      <description>&lt;h1 id=&#34;概述&#34;&gt;概述&lt;/h1&gt;&#xA;&lt;p&gt;Spring 使得创建 Java 企业级应用更加容易。它提供了你在企业环境下拥抱 Java 语言所需要的一切，支持 JVM 平台上的 Groovy 和 Kotlin 作为备选语言，并且提供了根据应用程序的需求创建多种架构的灵活性。从 SpringFramework 6.0 开始，Spring 需要 Java 17 以上的版本。&lt;/p&gt;&#xA;&lt;p&gt;Spring 支持广泛的应用场景。在一个大型企业里，应用程序经常会存在很长时间，并且必须运行在一个开发者不能控制升级周期的 JDK 和应用服务器上。&#xA;另外一些可能会作为一个内嵌服务器的单独 jar 包，运行在一个云环境里，还有一些可能是一个不需要服务器的独立应用程序（例如批处理或者集成处理工作）。&lt;/p&gt;&#xA;&lt;p&gt;Spring 是开源的。它有一个庞大而活跃的社群，基于各种实际用例，提供持续反馈。这也帮助了 Spring 在相当长一段时间内成功发展。。&lt;/p&gt;&#xA;&lt;h1 id=&#34;当我们在谈-spring-时我们在谈什么&#34;&gt;当我们在谈 Spring 时我们在谈什么&lt;/h1&gt;&#xA;&lt;p&gt;“Spring” 这个术语在不同的语境下有着不同的含义。它可以用来表示 SpringFramework 这个项目自身，一切都是从这里开始的（-译者按：梦开始的地方）。随着时间的推移，又构建了一些以 SpringFramework 为基础的 Spring 项目。大部分情况下，当人们谈论 Spring，他们的意思是 Spring 整个系列（-译者按：俗称全家桶）。本参考文档只针对这个基础进行介绍：SpringFramework 本身。&lt;/p&gt;&#xA;&lt;p&gt;SpringFramework 被分成不同的模块。应用程序可以根据他们所需要的模块进行选择。这些模块中处于核心的是 core container，包括配置模型和依赖注入机制。除此之外，SpringFramework 还对于不同应用架构提供基础支持，包括消息传递、事务以及持久化和 web。它同时也包含了基于 Servlet 的 SpringMVC web 框架以及Spring WebFlux 响应式web框架。&lt;/p&gt;&#xA;&lt;p&gt;关于这些模块需要注意的是：&lt;/p&gt;&#xA;&lt;p&gt;Spring 的框架，允许部署到 JDK 9 的模块路径（&amp;ldquo;Jigsaw&amp;rdquo;）。对于在支持 “Jigsaw” 的应用程序中的使用，Spring Framework 5 的 jar 包里面，携带了 “Automatic-Module-Name” 的 manifest entries，它定义了稳定的语言级别模块名（例如：“spring.core”，“spring.context” 等等），它与 jar 的 artifact 名字独立（ 这些 jar 遵循同样的模式，例如 “spring-core” 和 “spring-context”。 “-” 代替 “.”&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
