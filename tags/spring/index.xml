<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>Spring - tag - ReadTinyWords</title><link>https://anriclee.github.io/tags/spring/</link><description>Spring - tag - ReadTinyWords</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Mon, 11 Sep 2023 21:12:31 +0800</lastBuildDate><atom:link href="https://anriclee.github.io/tags/spring/" rel="self" type="application/rss+xml"/><item><title>[译] 细谈依赖和配置</title><link>https://anriclee.github.io/posts/spring_framework/core/the_ioc_container/dependencies/dependencies_configuration_in_detail/</link><pubDate>Mon, 11 Sep 2023 21:12:31 +0800</pubDate><author>anriclee</author><guid>https://anriclee.github.io/posts/spring_framework/core/the_ioc_container/dependencies/dependencies_configuration_in_detail/</guid><description><![CDATA[<p>依赖项的详细配置</p>
<p>正如前面所提到的那样，你可以定义 bean 的属性和构造函数参数，去引用其他已经设置好的 bean 或者内联定义的值。
为了达到这个目的，Spring 的基于 XML 配置元数据支持在 <!-- raw HTML omitted --> 和 <!-- raw HTML omitted --> 元素内增加子元素。</p>
<h1 id="直接值基本类型字符串等等">直接值（基本类型，字符串等等）</h1>
<p><!-- raw HTML omitted --> 元素的 value 值，把一个属性值或者构造函数参数定义为一个可读字符串。Spring 的转换服务被用来将这些值从字符串转换为属性或者参数的实际类型。下面的例子展示了可以被设置的多种值：</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-XML">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title=""><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-XML" data-lang="XML"><span class="line"><span class="cl"><span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&#34;myDataSource&#34;</span> <span class="na">class=</span><span class="s">&#34;org.apache.commons.dbcp.BasicDataSource&#34;</span> <span class="na">destroy-method=</span><span class="s">&#34;close&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">	<span class="c">&lt;!-- results in a setDriverClassName(String) call --&gt;</span>
</span></span><span class="line"><span class="cl">	<span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&#34;driverClassName&#34;</span> <span class="na">value=</span><span class="s">&#34;com.mysql.jdbc.Driver&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">	<span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&#34;url&#34;</span> <span class="na">value=</span><span class="s">&#34;jdbc:mysql://localhost:3306/mydb&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">	<span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&#34;username&#34;</span> <span class="na">value=</span><span class="s">&#34;root&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">	<span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&#34;password&#34;</span> <span class="na">value=</span><span class="s">&#34;misterkaoli&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/bean&gt;</span></span></span></code></pre></div></div>
<p>下面的例子使用 p-namespace 来让 XML 配置更加简明：</p>
<div class="code-block code-line-numbers" style="counter-reset: code-block 0">
    <div class="code-header language-XML">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title=""><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-XML" data-lang="XML"><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nt">&lt;beans</span> <span class="na">xmlns=</span><span class="s">&#34;http://www.springframework.org/schema/beans&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="na">xmlns:xsi=</span><span class="s">&#34;http://www.w3.org/2001/XMLSchema-instance&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="na">xmlns:p=</span><span class="s">&#34;http://www.springframework.org/schema/p&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="na">xsi:schemaLocation=</span><span class="s">&#34;http://www.springframework.org/schema/beans
</span></span></span><span class="line"><span class="cl"><span class="s">	https://www.springframework.org/schema/beans/spring-beans.xsd&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&#34;myDataSource&#34;</span> <span class="na">class=</span><span class="s">&#34;org.apache.commons.dbcp.BasicDataSource&#34;</span>
</span></span><span class="line"><span class="cl">		<span class="na">destroy-method=</span><span class="s">&#34;close&#34;</span>
</span></span><span class="line"><span class="cl">		<span class="na">p:driverClassName=</span><span class="s">&#34;com.mysql.jdbc.Driver&#34;</span>
</span></span><span class="line"><span class="cl">		<span class="na">p:url=</span><span class="s">&#34;jdbc:mysql://localhost:3306/mydb&#34;</span>
</span></span><span class="line"><span class="cl">		<span class="na">p:username=</span><span class="s">&#34;root&#34;</span>
</span></span><span class="line"><span class="cl">		<span class="na">p:password=</span><span class="s">&#34;misterkaoli&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/beans&gt;</span></span></span></code></pre></div></div>
<p>上面的 XML 更加的简明。然而，类型是在运行时而不是设计时发现的，除非你在创建 bean 定义的时候，用支持自动属性完成的 IDE（例如 Intellij IDEA 或者 Eclipse 的 Spring 工具）。这些辅助都是高度推荐的。
你同样可以配置 <code>java.util.Properties</code> 的实例，如下：</p>]]></description></item><item><title>[译] 依赖注入</title><link>https://anriclee.github.io/posts/spring_framework/core/the_ioc_container/dependencies/dependency_injection/</link><pubDate>Mon, 11 Sep 2023 20:12:31 +0800</pubDate><author>anriclee</author><guid>https://anriclee.github.io/posts/spring_framework/core/the_ioc_container/dependencies/dependency_injection/</guid><description><![CDATA[<p>在依赖注入（DI）里，对象通过构造函数参数、工厂方法参数或者在
被工厂方法创建返回的对象中设置的属性定义他们的依赖。然后，容器在创建这些 bean 时，注入依赖。这个过程与 bean 自身使用所需要类的直接构造函数实例化，或者通过 Service Locator 模式来找到所需要的依赖这个过程正好相反。</p>
<p>使用 DI 原则的代码更加干净整洁，并且提供给对象的依赖时，解耦也更加高效。对象并不找他们的依赖也并不知道这些依赖的地址或者类。这样的结果就是，你的类变得更易测试，尤其是当依赖是接口或者抽象的父类时，在单元测试可以对这些依赖进行打桩或者mock他们的实现。</p>
<h1 id="基于构造函数的依赖注入">基于构造函数的依赖注入</h1>
<p>基于构造函数的依赖注入，是通过容器调用构造函数，并且传入若干参数来实现的，每一个参数都代表了一个依赖。调用静态工厂方法并传入特定的参数来构造一个 bean 也是一样的，在本讨论中，对待构造函数的参数和静态方法的参数也是相似的。下面的这里展示了一个之能通过构造函数来进行依赖注入的类：</p>
<div class="code-block code-line-numbers" style="counter-reset: code-block 0">
    <div class="code-header language-Java">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title=""><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-Java" data-lang="Java"><span class="line"><span class="cl"><span class="kd">public</span><span class="w"> </span><span class="kd">class</span> <span class="nc">SimpleMovieLister</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="c1">// the SimpleMovieLister has a dependency on a MovieFinder</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="kd">private</span><span class="w"> </span><span class="kd">final</span><span class="w"> </span><span class="n">MovieFinder</span><span class="w"> </span><span class="n">movieFinder</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="c1">// a constructor so that the Spring container can inject a MovieFinder</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="kd">public</span><span class="w"> </span><span class="nf">SimpleMovieLister</span><span class="p">(</span><span class="n">MovieFinder</span><span class="w"> </span><span class="n">movieFinder</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">this</span><span class="p">.</span><span class="na">movieFinder</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">movieFinder</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="c1">// business logic that actually uses the injected MovieFinder is omitted...</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span></span></span></code></pre></div></div>
<p>注意，对于这个类没有更多特殊的地方。它仅仅是一个POJO，并且对容器特定接口、父类或者注解没有任何依赖。【译者按：没有任何代码侵入性】</p>]]></description></item><item><title>[译] Bean 概述</title><link>https://anriclee.github.io/posts/spring_framework/core/the_ioc_container/bean_overview/</link><pubDate>Sat, 02 Sep 2023 23:12:31 +0800</pubDate><author>anriclee</author><guid>https://anriclee.github.io/posts/spring_framework/core/the_ioc_container/bean_overview/</guid><description><![CDATA[<p>一个 Sring IoC 容器可以操作一个或者多个 bean。这些 bean 是通过你提供给容器的配置元数据生成的（例如，以 XML 中的 <code>&lt;bean/&gt;</code> ）。</p>
<p>在容器内，这些 bean 的定义被表示成 <code>BeanDefinition</code> 对象的形式，包含了下面的元数据：</p>
<ul>
<li>包定义的类名：通常是定义的 bean 的真正实现类</li>
<li>bean 行为配置元素，表明了 bean 在 container 中的行为（scope，生命周期回调等等）。</li>
<li>对其他需要的 bean 的引用。这些引用也被称作协作器和依赖。</li>
<li>在一个新创建的对象中的其他配置设置 - 例如，池的数量限制或者一个操作连接池 bean 中的连接数量</li>
</ul>
<p>这些元数据转换为构成这些 bean 定义的一系列属性。下表表示了这些属性值：</p>
<table>
  <thead>
      <tr>
          <th>属性</th>
          <th>含义</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td>Class</td>
          <td>正在实例化的bean</td>
      </tr>
      <tr>
          <td>Name</td>
          <td>bean的名字</td>
      </tr>
      <tr>
          <td>Scope</td>
          <td>Bean的Scope</td>
      </tr>
      <tr>
          <td>构造函数参数</td>
          <td>依赖注入</td>
      </tr>
      <tr>
          <td>自动装配模式</td>
          <td>装配的协作对象</td>
      </tr>
      <tr>
          <td>懒加载模式</td>
          <td>懒加载 Bean</td>
      </tr>
      <tr>
          <td>初始化方法</td>
          <td>初始化回调</td>
      </tr>
      <tr>
          <td>析构方法</td>
          <td>析构回调</td>
      </tr>
  </tbody>
</table>
<p>除了包含怎么创建一个特定的 bean 的信息之外， <code>ApplicationContext</code> 的实现同样允许在容器外面已经创建好的对象注册到其中（用户创建）。这是通过 <code>getBeanFactory</code> 方法获取到 <code>ApplicationContext</code> 的 <code>BeanFactory</code>，得到 <code>DefaultListableBeanFactory</code> 实现来做到的。<code>DefaultListableBeanFactory</code> 支持通过调用 <code>registerSingleton(..)</code>  和 <code>registerBeanDefinition(..)</code> 方法来实现这样的注册。然而，典型的应用程序仅仅使用常规的 bean 定义元数据。</p>]]></description></item><item><title>[译] Spring IOC 容器</title><link>https://anriclee.github.io/posts/spring_framework/core/the_ioc_container/container_and_beans/</link><pubDate>Sat, 02 Sep 2023 23:12:31 +0800</pubDate><author>anriclee</author><guid>https://anriclee.github.io/posts/spring_framework/core/the_ioc_container/container_and_beans/</guid><description><![CDATA[<h1 id="spring-ioc-和-bean-的简介">Spring IOC 和 bean 的简介</h1>
<p>本章涵盖了 SpringFramework 中的控制反转原则（Ioc）的实现。IoC 也被称为依赖注入（DI）。它是这样的一种过程，在此期间对象仅通过构造函数参数、工厂方法的参数或者当对象实例被构造后或者通过工厂方法返回时在它上面设置的属性定义自己的依赖（即对象必须合作的其他对象）。</p>
<p>当容器创建这些 bean 后，再注入这些依赖。</p>
<p>这个过程本质上与bean 通过使用直接的类构造函数进行直接实例化或者通过类似 Service Locator模式来寻找依赖的位置是相反的（这也是 IoC 名字的由来）。</p>
<p><code>org.springframework.beans</code> 和 <code>org.springframework.context</code> 包是 SpringFramework IoC 容器的基石。<code>BeanFactory</code> 接口提供了一种更先进的能够控制人已类型对象的配置机制。<code>ApplicationContext</code> 是 <code>BeanFactory</code> 的子接口。它增加了下面的特性：</p>
<ul>
<li>与 Spring 的 AOP 特性更容易整合</li>
<li>消息资源处理（在国际化场景的使用）</li>
<li>事件发布</li>
<li>例如用于 Web 应用的 <code>WebApplicationContext</code> 应用层特定的上下文</li>
</ul>
<p>总而言之，<code>BeanFactory</code> 提供了配置的框架和基本的功能。<code>ApplicationContext</code> 增加了更多的企业特定的功能。<code>ApplicationContext</code> 完全是 <code>BeanFactory</code> 的超集。在本章关于 Spring IoC 容器做专门描述时会用到。想要获取更多的关于使用 <code>ApplicationContext</code> 而非 <code>BeanFactory</code> 的信息，参见介绍 <a href="https://docs.spring.io/spring-framework/reference/core/beans/beanfactory.html" target="_blank" rel="noopener noreffer ">BeanFactory</a> API 的部分。</p>
<p>在 Spring 中，作为你应用基石同时可以被 Spring IoC 容器所操控的对象就被称之为 bean。bean 就是被 Spring IoC 容器实例化、组装和设置的对象。否则，一个 bean 就是你应用程序中诸多对象中的一个。 Beans 以及他们依赖关系，反映在容器使用的配置元数据中。</p>]]></description></item><item><title>[译] 容器概述</title><link>https://anriclee.github.io/posts/spring_framework/core/the_ioc_container/container_overview/</link><pubDate>Sat, 02 Sep 2023 23:12:31 +0800</pubDate><author>anriclee</author><guid>https://anriclee.github.io/posts/spring_framework/core/the_ioc_container/container_overview/</guid><description><![CDATA[<h1 id="容器概述">容器概述</h1>
<p><code>org.springframework.context.ApplicationContext</code> 接口代表了 Spring IoC 容器，它主要负责通过读取配置文件对 bean 进行实例化、配置和组装。
容器通过读取配置元数据来获知要实例化、配置和组装那些对象。配置的元数据一般为 XML、Java 注解和 Java 代码的形式，它让你能够表达组成你应用程序的对象以及对象之间的丰富的相互依赖关系。</p>
<p>Spring 提供了 <code>ApplicationContext</code> 接口的若干实现。在单体应用中，创建一个 <code>ClassPathXmlApplicationContext</code> 或者 <code>FileSystemXmlApplicationContext</code> 是很常见的。虽然 XML 是定义配置元数据的传统形式，但是你还可以通过在 XML 文件里面进行声明配置来告诉容器对于 Java 注解或者Java代码格式的支持。</p>
<p>在大多数的应用场景中，并不需要显式的代码来实例化 Spring IoC 容器。例如，在 Web 应用的场景中，在 <code>web.xml</code> 文件中仅用简单的 8 行代码左右的样板 Web XML 描述符即可满足需要（参考 <a href="https://docs.spring.io/spring-framework/reference/core/beans/context-introduction.html#context-create" target="_blank" rel="noopener noreffer ">Convenient ApplicationContext Instantiation for Web Applications</a>）。如果你使 Eclipse 中的 Spring 工具（在 Eclipse 开发环境中），你可以通过几下鼠标点击或者按键的敲击就能轻松创建这样一个样板配置文件。</p>
<p>下图展示了关于 Spring 工作机制的一个全局视角。在 <code>ApplicationContext</code> 被创建和初始化后，你的应用类和配置元数据已经捆绑在一起了，这样一来，你就有一个充分配置并且可执行的系统或者应用程序。</p>
<p></p>
<h1 id="配置元数据">配置元数据</h1>
<p>如上图所示，Spring Ioc 容器接收到一种格式的配置元数据。这个配置元数据代表了，作为一个应用开发者你告诉 Spring 容器在应用程序中，如何实例化、配置和组装对象。</p>]]></description></item><item><title>[译] SpringFramework 文档</title><link>https://anriclee.github.io/posts/spring_framework/directory/</link><pubDate>Sat, 02 Sep 2023 11:46:07 +0800</pubDate><author>anriclee</author><guid>https://anriclee.github.io/posts/spring_framework/directory/</guid><description><![CDATA[<ul>
<li>
<p><a href="Overview" rel="">概述</a> 历史，设计哲学，反馈，开始</p>
</li>
<li>
<p><a href="" rel="">核心</a> IoC容器，事件，资源，i18n，验证，数据绑定，类型转换，SpEL，AOP，AOT</p>
</li>
<li>
<p><a href="" rel="">测试</a> 对象 Mock，测试上下文框架，Spring MVC 测试，Web 测试客户端</p>
</li>
<li>
<p><a href="" rel="">数据接入</a> 事务，DAO 支持，JDBC，R2DBC，O/R 映射，XML 编码</p>
</li>
<li>
<p><a href="" rel="">Web Servlet</a> SpringMVC,WebSocket,SockJS,STOMP 通信</p>
</li>
<li>
<p><a href="" rel="">Web 响应式</a> Spring WebFlux, WebClient, WebSocket, RSocket.</p>
</li>
<li>
<p>[集成] REST 客户端, JMS, JCA, JMX, Email, 任务, 调度, 缓存, 可见性.</p>
</li>
<li>
<p><a href="" rel="">语言</a> Kotlin, Groovy, Dynamic 语言.</p>
</li>
<li>
<p><a href="" rel="">附录</a> Spring 属性</p>
</li>
</ul>]]></description></item><item><title>[译] SpringFramework 概述</title><link>https://anriclee.github.io/posts/spring_framework/overview/</link><pubDate>Sat, 02 Sep 2023 11:46:07 +0800</pubDate><author>anriclee</author><guid>https://anriclee.github.io/posts/spring_framework/overview/</guid><description><![CDATA[<h1 id="概述">概述</h1>
<p>Spring 使得创建 Java 企业级应用更加容易。它提供了你在企业环境下拥抱 Java 语言所需要的一切，支持 JVM 平台上的 Groovy 和 Kotlin 作为备选语言，并且提供了根据应用程序的需求创建多种架构的灵活性。从 SpringFramework 6.0 开始，Spring 需要 Java 17 以上的版本。</p>
<p>Spring 支持广泛的应用场景。在一个大型企业里，应用程序经常会存在很长时间，并且必须运行在一个开发者不能控制升级周期的 JDK 和应用服务器上。
另外一些可能会作为一个内嵌服务器的单独 jar 包，运行在一个云环境里，还有一些可能是一个不需要服务器的独立应用程序（例如批处理或者集成处理工作）。</p>
<p>Spring 是开源的。它有一个庞大而活跃的社群，基于各种实际用例，提供持续反馈。这也帮助了 Spring 在相当长一段时间内成功发展。。</p>
<h1 id="当我们在谈-spring-时我们在谈什么">当我们在谈 Spring 时我们在谈什么</h1>
<p>“Spring” 这个术语在不同的语境下有着不同的含义。它可以用来表示 SpringFramework 这个项目自身，一切都是从这里开始的（-译者按：梦开始的地方）。随着时间的推移，又构建了一些以 SpringFramework 为基础的 Spring 项目。大部分情况下，当人们谈论 Spring，他们的意思是 Spring 整个系列（-译者按：俗称全家桶）。本参考文档只针对这个基础进行介绍：SpringFramework 本身。</p>
<p>SpringFramework 被分成不同的模块。应用程序可以根据他们所需要的模块进行选择。这些模块中处于核心的是 core container，包括配置模型和依赖注入机制。除此之外，SpringFramework 还对于不同应用架构提供基础支持，包括消息传递、事务以及持久化和 web。它同时也包含了基于 Servlet 的 SpringMVC web 框架以及Spring WebFlux 响应式web框架。</p>
<p>关于这些模块需要注意的是：</p>
<p>Spring 的框架，允许部署到 JDK 9 的模块路径（&ldquo;Jigsaw&rdquo;）。对于在支持 “Jigsaw” 的应用程序中的使用，Spring Framework 5 的 jar 包里面，携带了 “Automatic-Module-Name” 的 manifest entries，它定义了稳定的语言级别模块名（例如：“spring.core”，“spring.context” 等等），它与 jar 的 artifact 名字独立（ 这些 jar 遵循同样的模式，例如 “spring-core” 和 “spring-context”。 “-” 代替 “.”</p>]]></description></item></channel></rss>